<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2025-01-20-回文字符串</title>
    <url>/2025/01/20/2025-01-20-%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="蓝桥杯2024省赛-简单-回文字符串"><a href="#蓝桥杯2024省赛-简单-回文字符串" class="headerlink" title="蓝桥杯2024省赛-简单-回文字符串"></a>蓝桥杯2024省赛-简单-回文字符串</h1><h3 id="题目连接："><a href="#题目连接：" class="headerlink" title="题目连接："></a>题目连接：</h3><p><a href="https://www.lanqiao.cn/problems/19718/learning/">蓝桥官网-回文字符串</a></p>
<h3 id="题目介绍："><a href="#题目介绍：" class="headerlink" title="题目介绍："></a>题目介绍：</h3><p><img src="/images/2025-01-20-01.png"></p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>使用双指针在字符串的左右向中间进行遍历，如果 left 和 right 索引指向的字符是相等的，则继续前进，否则判断 right 索引字符是否在规定的 l,q,b 这三个字符中，如果在这三个字符中，则有机会可以补齐成为回文串，如果不在这三个字符中，则不可能通过在头部补齐变成回文串</p>
<h3 id="具体题解："><a href="#具体题解：" class="headerlink" title="具体题解："></a>具体题解：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">int</span>(<span class="built_in">input</span>())    <span class="comment"># 输入字符串次数</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">    inputData = <span class="built_in">input</span>()     <span class="comment"># 本次输入的字符串</span></span><br><span class="line">    length = <span class="built_in">len</span>(inputData)</span><br><span class="line">    left, right = <span class="number">0</span>, length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:     <span class="comment"># 双指针检查</span></span><br><span class="line">        <span class="keyword">if</span> inputData[left] == inputData[right]:     <span class="comment"># left=right，向前检查</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> inputData[right] <span class="keyword">in</span> [<span class="string">&quot;l&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;b&quot;</span>]:   <span class="comment"># 可以通过补齐成为回文串</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:   <span class="comment"># 不可能成为回文串</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> left &gt;= right:   <span class="comment"># 通过左右指针来进行最终判断</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>2025-02-07-好数</title>
    <url>/2025/02/07/2025-02-07-%E5%A5%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="蓝桥杯2024省赛-简单-好数"><a href="#蓝桥杯2024省赛-简单-好数" class="headerlink" title="蓝桥杯2024省赛-简单-好数"></a>蓝桥杯2024省赛-简单-好数</h1><h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p><a href="https://www.lanqiao.cn/problems/19709/learning/?page=1&first_category_id=1&second_category_id=3&difficulty=30">蓝桥官网-好数</a></p>
<h3 id="题目介绍："><a href="#题目介绍：" class="headerlink" title="题目介绍："></a>题目介绍：</h3><p><img src="/images/2025-02-07-01.png"></p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>逐一查看从1到num的每个数字，将该数字按照低位到高位排序，默认该数字为好数，flag设置为True，如果奇数位置上是偶数，或者偶数位置上是奇数，那么将flag设置为False，如果flag为True则计入，为False不计入计算，</p>
<h3 id="具体题解："><a href="#具体题解：" class="headerlink" title="具体题解："></a>具体题解：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num + <span class="number">1</span>):     <span class="comment"># 打印每一个数字，逐一查看是否为好数</span></span><br><span class="line">    <span class="comment"># print(&quot;低位到高位排序：&quot;, str(n), str(n)[::-1])</span></span><br><span class="line">    str_n = <span class="built_in">str</span>(n)[::-<span class="number">1</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str_n)):</span><br><span class="line">        digit = <span class="built_in">int</span>(str_n[i])</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> digit % <span class="number">2</span> != <span class="number">1</span>:   <span class="comment"># 如果奇数位置上是偶数</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> i % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">and</span> digit % <span class="number">2</span> != <span class="number">0</span>:     <span class="comment"># 如果偶数位置上是奇数</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>2025-02-07-寻找数组的中心坐标</title>
    <url>/2025/02/07/2025-02-07-%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E5%9D%90%E6%A0%87/</url>
    <content><![CDATA[<h1 id="寻找数组的中心坐标"><a href="#寻找数组的中心坐标" class="headerlink" title="寻找数组的中心坐标"></a>寻找数组的中心坐标</h1><h3 id="题目连接："><a href="#题目连接：" class="headerlink" title="题目连接："></a>题目连接：</h3><p><a href="https://leetcode.cn/problems/find-pivot-index/">leetcode-寻找数组的中心坐标</a></p>
<h3 id="题目介绍："><a href="#题目介绍：" class="headerlink" title="题目介绍："></a>题目介绍：</h3><p><img src="/images/2025-01-20-02.png"></p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>使用前缀和进行求解，第一遍遍历，计算前缀和数组，第二次遍历，利用前缀和取判断某一索引的左右</p>
<h3 id="具体题解："><a href="#具体题解：" class="headerlink" title="具体题解："></a>具体题解：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pivotIndex</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 使用前缀和，第一次遍历记录前缀和列表，第二次遍历查看每个索引的左右值是否相同</span></span><br><span class="line">        totalSum = <span class="built_in">sum</span>(nums)</span><br><span class="line">        preList = [<span class="number">0</span>] * (<span class="built_in">len</span>(nums) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            preList[i + <span class="number">1</span>] = preList[i] + nums[i]</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="comment"># index 左侧和 = 当前加一索引的前缀和减去当前值</span></span><br><span class="line">            leftSum = preList[index + <span class="number">1</span>] - nums[index]</span><br><span class="line">            <span class="comment"># index 右侧和 = 数组总和减去当前索引的加一前缀和</span></span><br><span class="line">            rightSum = totalSum - preList[index + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> leftSum == rightSum:</span><br><span class="line">                <span class="keyword">return</span> index</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP</title>
    <url>/2024/12/31/FTP/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>File Transport File，提供文件上传和下载服务</li>
<li>服务名：vsftpd</li>
<li>端口：21&#x2F;tcp</li>
<li>配置文件：<code>/etc/vsftpd/vsftpd.conf</code></li>
<li>配置文件常见字段：<br>（1）annoymous_enable &#x3D; YES&#x2F;NO，是否允许匿名用户登录<br>（2）IndexOptions Charset&#x3D;UTF-8，文件编码格式<br>（3）chroot_local_user &#x3D; YES, local_root &#x3D; &#x2F;share，访问根目录</li>
<li>安全上下文策略：<code>ftpd_full_access</code></li>
<li>防火墙名称：vsftpd</li>
</ul>
<hr>
<p>@ <a href="https://zybuluo.com/2303010148/note/2563425">基于 DNS + httpd + ftpd 服务的个人主页发布系统</a><br>@ <a href="https://zybuluo.com/mdeditor#2564002-full-reader">shell 脚本批量创建个人主页系统</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2024/12/30/Docker/</url>
    <content><![CDATA[<h3 id="一、基础介绍"><a href="#一、基础介绍" class="headerlink" title="一、基础介绍"></a>一、基础介绍</h3><ul>
<li>镜像<br>docker镜像类似于一个安装包，类比mysql，内部可以有mysql安装依赖部署等，docker可以拉取镜像到本地虚拟机中，并忽略不同操作系统之间的差异，拉取后可以直接使用</li>
<li>容器<br>镜像拉取到本地后，会在本地开辟一个隔离空间来运行，称之为容器，一个镜像可以开辟多个不同的容器，且之间不会有干扰，实现多开效果，注意，一个容器是运行在虚拟机内部，完全隔离外界的，拥有自己的ip地址等，但是无法与外界进行通信，类似自己一个小主机，只能和宿主机实现通信效果</li>
</ul>
<h3 id="二、常见选项和操作"><a href="#二、常见选项和操作" class="headerlink" title="二、常见选项和操作"></a>二、常见选项和操作</h3><blockquote>
<p><strong>常见子选项</strong><br><code>-d</code> 容器在后台运行，不加-d会占用前台<br><code>-name</code> 为容器取名，唯一<br><code>-p [localhost-port]:[docker-port]</code> 设置端口映射，将宿主机的port和docker的内部port做一个端口映射，使其能和外界做通信，一个宿主机的端口只能分配给一个docker做映射，一个docker相当于一个宿主机的进程<br><code>-e [KEY]=[VALUE]</code> 设置环境变量，由镜像决定<br><code>[repository]:[tag]</code> 指定运行的镜像名称和镜像版本，默认最新版，一般加在docker命令尾端</p>
</blockquote>
<blockquote>
<p><strong>镜像相关操作</strong><br><code>docker pull</code> 拉取镜像地址到本地<br><code>docker images</code> 查看本地所有镜像<br><code>docker rmi</code> 删除镜像<br><code>docker file + docker build</code> 创建自定义镜像<br><code>docker save</code> 保存镜像<br><code>docker load</code> 下载镜像<br><code>docker push</code> 上传镜像到镜像仓库</p>
</blockquote>
<blockquote>
<p><strong>容器相关操作</strong><br><code>docker stop</code> 停止容器进程，容器还是存在<br><code>docker start</code> 开启容器进程<br><code>docker run</code> 创建并运行一个容器<br><code>docker ps</code> 查看容器进程<br><code>docker rm</code> 删除容器<br><code>docker logs</code> 查看容器日志<br><code>docker exec</code> 运行容器内部服务</p>
</blockquote>
<h3 id="三、配置服务示例"><a href="#三、配置服务示例" class="headerlink" title="三、配置服务示例"></a>三、配置服务示例</h3><h4 id="1-配置阿里云镜像"><a href="#1-配置阿里云镜像" class="headerlink" title="1. 配置阿里云镜像"></a>1. 配置阿里云镜像</h4><ol>
<li>安装docker依赖包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y yum-utils</span><br><span class="line">[root@localhost ~]# <span class="built_in">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">[root@localhost ~]# yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></li>
<li>查看安装是否成功<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker -v</span><br><span class="line">[root@localhost ~]# systemctl <span class="built_in">enable</span> --now docker</span><br><span class="line">[root@localhost ~]# docker images</span><br></pre></td></tr></table></figure></li>
<li>配置阿里云镜像服务器并重启<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /etc/docker</span><br><span class="line">[root@localhost docker]# vim /etc/docker/daemon.json</span><br><span class="line">&#123; &quot;registry-mirrors&quot;: [ &quot;https://2a6bf1988cb6428c877f723ec7530dbc.mirror.swr.myhuaweicloud.com&quot;, &quot;https://docker.m.daocloud.io&quot;, &quot;https://hub-mirror.c.163.com&quot;, &quot;https://mirror.baidubce.com&quot;, &quot;https://your_preferred_mirror&quot;, &quot;https://dockerhub.icu&quot;, &quot;https://docker.registry.cyou&quot;, &quot;https://docker-cf.registry.cyou&quot;, &quot;https://dockercf.jsdelivr.fyi&quot;, &quot;https://docker.jsdelivr.fyi&quot;, &quot;https://dockertest.jsdelivr.fyi&quot;, &quot;https://mirror.aliyuncs.com&quot;, &quot;https://dockerproxy.com&quot;, &quot;https://mirror.baidubce.com&quot;, &quot;https://docker.m.daocloud.io&quot;, &quot;https://docker.nju.edu.cn&quot;, &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot;, &quot;https://mirror.iscas.ac.cn&quot;, &quot;https://docker.rainbond.cc&quot; ] &#125;</span><br><span class="line">[root@localhost ~]# systemctl daemon-reload</span><br><span class="line">[root@localhost ~]# systemctl restart docker &amp;&amp; systemctl status docker</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-配置Nginx环境"><a href="#2-配置Nginx环境" class="headerlink" title="2. 配置Nginx环境"></a>2. 配置Nginx环境</h4><ol>
<li>拉取nginx镜像<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker pull nginx</span><br><span class="line">[root@localhost docker]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">nginx        latest    3b25b682ea82   3 weeks ago   192MB</span><br></pre></td></tr></table></figure></li>
<li>打包nginx镜像(-o output)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker save -o nginx.tar nginx:latest</span><br><span class="line">[root@localhost docker]# ll</span><br><span class="line">总用量 191248</span><br><span class="line">-rw-r--r-- 1 root root       799 10月 27 06:22 daemon.json</span><br><span class="line">-rw-r--r-- 1 root root        67 10月 27 05:32 daemon.json.bak</span><br><span class="line">-rw------- 1 root root 195826176 10月 27 06:27 nginx.tar</span><br></pre></td></tr></table></figure></li>
<li>删除nginx镜像包，使用tar包进行下载(-i input)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker rmi nginx:latest</span><br><span class="line">Untagged: nginx:latest</span><br><span class="line">[root@localhost docker]# docker load -i nginx.tar </span><br></pre></td></tr></table></figure></li>
<li>创建并执行一个名为nignx的容器，配置80端口映射，使用nginx镜像包<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker run -d --name nginx -p 80:80 nginx</span><br></pre></td></tr></table></figure></li>
<li>查看正在执行的docker容器进程和所有进程<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS                               NAMES</span><br><span class="line">5f8880ea2cff   nginx     &quot;/docker-entrypoint.…&quot;   8 seconds ago   Up 7 seconds   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx</span><br><span class="line">[root@localhost docker]# docker ps -a</span><br></pre></td></tr></table></figure></li>
<li>查看nginx容器的日志，-f占用前台追踪日志<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker logs nginx</span><br><span class="line">[root@localhost docker]# docker logs nginx -f</span><br></pre></td></tr></table></figure></li>
<li>进入容器内部，-it(interactive terminal)新开辟终端使用bash解释器<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker exec -it nginx bash</span><br><span class="line">root@5f8880ea2cff:/# ls</span><br><span class="line">bin  boot  dev	docker-entrypoint.d  docker-entrypoint.sh  etc	home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@5f8880ea2cff:/# exit</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-配置mysql环境"><a href="#3-配置mysql环境" class="headerlink" title="3. 配置mysql环境"></a>3. 配置mysql环境</h4><ol>
<li>拉取mysql运行镜像，创建并运行一个容器实例对象<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker pull mysql</span><br><span class="line">[root@localhost docker]# docker run -d --name mysql -p 3306:3306 \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-e TZ:Asia/Shanghai -e MYSQL_ROOT_PASSWORD=123 mysql</span> </span><br><span class="line">[root@localhost docker]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">mysql        latest    be960704dfac   12 days ago   602MB</span><br><span class="line">nginx        latest    3b25b682ea82   3 weeks ago   192MB</span><br></pre></td></tr></table></figure></li>
<li>进入容器内部<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker exec -it mysql bash</span><br><span class="line">bash-5.1# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show databases;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line">bash-5.1# ls</span><br><span class="line">bash-5.1# cat /etc/os-release</span><br><span class="line">PRETTY_NAME=&quot;Oracle Linux Server 9.4&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="四、-数据卷"><a href="#四、-数据卷" class="headerlink" title="四、 数据卷"></a>四、 数据卷</h3><p>已创建已运行的docker容器无法再挂载数据卷，只有在创建容器时边执行挂载数据卷操作，且容器会帮助我们自动创建数据卷，我们只需要执行挂载操作即可，挂载成功后docker服务会将目录自动映射到宿主机下，宿主机下的真实路径也会自动创建</p>
<blockquote>
<p><code>docker volume create</code> 创建数据卷<br><code>docker volume ls</code> 查看数据卷<br><code>docker volume inspect [volume-name]</code>  查看数据卷详细信息<br><code>docker volume rm</code> 删除数据卷<br><code>docker volume prune</code> 清除数据卷数据<br><img src="/images/%E6%95%B0%E6%8D%AE%E5%8D%B71.png"><br> <code>docker run -v [数据卷名称]:[docker内部地址] -d --name [容器名] -p[宿主机port]:[docker-port]</code></p>
</blockquote>
<ol>
<li>删除原有nginx容器<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~] docker rm -f nginx</span><br><span class="line">[root@localhost ~] docker ps    # 确保无nginx进程</span><br></pre></td></tr></table></figure></li>
<li>重新下载nginx容器，下载时创建数据卷<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~] docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3f2c8e43875ec9cb78f21b4ff0411af5902755b50ce48280a585738fb2de072b</span></span><br><span class="line">[root@localhost ~] docker volume ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DRIVER    VOLUME NAME</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     f11e855b8916d5eaf33f7492f3308b64114fbc57e9f795e072c7dcedd1c93520</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     html</span></span><br><span class="line">[root@localhost ~] docker volume inspect html</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2024-10-27T17:55:39+08:00&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Labels&quot;</span>: null,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,   <span class="comment"># 宿主机真实路径</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,    <span class="comment"># 逻辑卷卷名</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Options&quot;</span>: null,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">]</span></span><br><span class="line">[root@localhost ~] ls /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">50x.html  index.html    <span class="comment"># 文件与容器内部的配置文件相同</span></span></span><br><span class="line">[root@localhost _data] vim index.html</span><br><span class="line">[root@localhost _data] pwd &amp;&amp; cat index.html | grep h1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/var/lib/docker/volumes/html/_data</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;h1&gt;Welcome to China!&lt;/h1&gt;    <span class="comment"># 修改为China</span></span></span><br></pre></td></tr></table></figure></li>
<li>进入docker容器进行校验<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost _data] docker exec -it nginx bash</span><br><span class="line">root@3f2c8e43875e:/ cd /usr/share/nginx/html</span><br><span class="line">root@3f2c8e43875e:/usr/share/nginx/html cat index.html | grep h1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;h1&gt;Welcome to China!&lt;/h1&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/images/%E6%95%B0%E6%8D%AE%E5%8D%B72.png"></li>
</ol>
<h3 id="五、本地目录挂载"><a href="#五、本地目录挂载" class="headerlink" title="五、本地目录挂载"></a>五、本地目录挂载</h3><p>mysql容器会自动将容器内部的数据挂载到宿主机上，挂载后数据存储在宿主机，生成匿名卷，卷名称随机生成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------ 【自动挂载如下】</span></span><br><span class="line">[root@localhost _data] docker inspect mysql     # 以下就是容器自动挂载点结果</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;Mounts&quot;</span>: [</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Name&quot;</span>:    <span class="string">&quot;4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd&quot;</span>,    <span class="comment"># 容器名称</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd/_data&quot;</span>,     // 宿主机挂载地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,    // 容器存储地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">],</span></span><br><span class="line">[root@localhost _data] docker volume ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DRIVER    VOLUME NAME</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     f11e855b8916d5eaf33f7492f3308b64114fbc57e9f795e072c7dcedd1c93520</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     html</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------ 【手动挂载顺序】</span></span><br><span class="line">[root@localhost ~] mkdir /mysql/&#123;data,init,conf&#125; -p</span><br><span class="line">[root@localhost _data] docker run -d --name mysql \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-p 3306:3306 \</span></span><br><span class="line"><span class="language-bash">&gt; -e TZ=Asia/Shanghai \     <span class="comment"># [配置环境变量-时间地区]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-e MYSQL_ROOT_PASSWORD=cjnn10030406 \    <span class="comment"># [配置mysql中root的密码]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-v /root/mysql/data:/var/lib/mysql \    <span class="comment"># [挂载数据]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-v /root/mysql/init:/docker-entrypoint-initdb.d \    <span class="comment"># [挂载初始文件]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-v /root/mysql/conf:/etc/mysql/conf.d \    <span class="comment"># [挂载配置文件]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">mysql</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5c4e6bea23a990338b1c15e08708ae372ef47b21e7e3e71f2e56a91d8e7fc7ae</span></span><br><span class="line">[root@localhost ~] docker inspect mysql   # 挂载详情</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;Mounts&quot;</span>: [</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/root/mysql/data&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/root/mysql/init&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/docker-entrypoint-initdb.d&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/root/mysql/conf&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/etc/mysql/conf.d&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">],</span></span><br><span class="line">[root@localhost ~] du -sh mysql    # ls mysql 中可以查看data下已经成功挂载很多文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">213M    mysql</span></span><br><span class="line">[root@localhost ~] docker ps -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CONTAINER ID   IMAGE     COMMAND                   CREATED          STATUS          PORTS                                                  NAMES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5c4e6bea23a9   mysql     <span class="string">&quot;docker-entrypoint.s…&quot;</span>   15 minutes ago   Up 15 minutes   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3f2c8e43875e   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   3 hours ago      Up 3 hours      0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                      nginx</span></span><br></pre></td></tr></table></figure>


<h3 id="六、-删除镜像"><a href="#六、-删除镜像" class="headerlink" title="六、 删除镜像"></a>六、 删除镜像</h3><p><strong>删除镜像前，需要将所有镜像创建的容器进行删除，删除成功后最后在删除镜像</strong></p>
<p>显示无法删除，因为 mysql 镜像有容器正在运行中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker rmi mysql:latest</span><br><span class="line">Error response from daemon: conflict: unable to remove repository reference <span class="string">&quot;mysql:latest&quot;</span> (must force) - container 5c4e6bea23a9 is using its referenced image be960704dfac</span><br></pre></td></tr></table></figure>
<p>查看所有正在运行的容器进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED       STATUS                     PORTS                                                  NAMES</span><br><span class="line">817412dd0343   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>         6 weeks ago   Exited (255) 5 weeks ago   0.0.0.0:3355-&gt;8080/tcp, :::3355-&gt;8080/tcp              tomcat01</span><br><span class="line">5c4e6bea23a9   mysql     <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 weeks ago   Exited (255) 7 weeks ago   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span><br><span class="line">3f2c8e43875e   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   7 weeks ago   Exited (255) 7 weeks ago   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                      nginx</span><br></pre></td></tr></table></figure>
<p>停止 mysql 镜像运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker stop mysql</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure>
<p>删除 mysql 容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker <span class="built_in">rm</span> 5c4e6bea23a9</span><br><span class="line">5c4e6bea23a9</span><br></pre></td></tr></table></figure>
<p>再次查看容器进程，删除容器成功，删除容器进程成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED       STATUS                     PORTS                                       NAMES</span><br><span class="line">817412dd0343   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>         6 weeks ago   Exited (255) 5 weeks ago   0.0.0.0:3355-&gt;8080/tcp, :::3355-&gt;8080/tcp   tomcat01</span><br><span class="line">3f2c8e43875e   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   7 weeks ago   Exited (255) 7 weeks ago   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp           nginx</span><br></pre></td></tr></table></figure>
<p>删除镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker rmi mysql:latest</span><br></pre></td></tr></table></figure>



<h3 id="七、DockerFile"><a href="#七、DockerFile" class="headerlink" title="七、DockerFile"></a>七、DockerFile</h3><p>是一种定义镜像构建过程的脚本，包含了一系列的命令和指令，可以实现自动化构建 Docker 镜像<br>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS with JDK 8</span></span><br><span class="line"><span class="comment"># Author 2303010148</span></span><br><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="comment"># 指定作者</span></span><br><span class="line">MAINTAINER 2303010148</span><br><span class="line"><span class="comment"># 新建文件夹用于存放JDK文件</span></span><br><span class="line">RUN <span class="built_in">mkdir</span> /usr/local/java</span><br><span class="line"><span class="comment"># 将JDK文件复制到镜像内并解压</span></span><br><span class="line">ADD jdk-8u151-linux-x64.tar.gz /usr/local/java/</span><br><span class="line"><span class="comment"># 创建软链接</span></span><br><span class="line">RUN <span class="built_in">ln</span> -s /usr/local/java/jdk1.8.0_151 /usr/local/java/jdk</span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk</span><br><span class="line">ENV JDK_HOME <span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line">ENV CLASSPATH .:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line">ENV PATH <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>


<hr>
<p>不断学习ing，如果有错请指出(⸝⸝•‧̫•⸝⸝)</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>NFS网络存储与autofs自动挂载</title>
    <url>/2025/01/05/NFS%E7%BD%91%E7%BB%9C%E5%AD%98%E5%82%A8%E4%B8%8Eautofs%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="一、引言：Linux存储分类"><a href="#一、引言：Linux存储分类" class="headerlink" title="一、引言：Linux存储分类"></a>一、引言：Linux存储分类</h2><p><img src="/images/nfs1.png"><br>1. <strong>DAS直连附加存储</strong>：存储设备通过专用接口(SCSI, SATA, USB…)直接连接到服务器<br>2. <strong>NAS网络连接存储</strong>：具有单独的存储操作系统，通过TCP&#x2F;IP协议访数据，支持(FTP, <strong>NFS</strong>, HTTP…)等协议进行文件共享，小型低成本<br>@：SMB多用于LINUX与windows之间文件共享，针对用户&#x2F;组（UID&#x2F;GID）进行配置，可以设置共享权限<br>@：NFS多用于LINUX与LINUX之间，具体差异是根据固定IP地址&#x2F;固定IP网段来配置，可以设置共享权限<br>@：FTP可用于LINUX与windows之间，而LINUX之间常用于基于SSH协议上的SFTP安全传输协议进行文件上传下载的共享<br>3. <strong>SAN存储区域网络</strong>：也叫做FC(SAN)，通过光纤交换机访问数据，建立专用于数据存储的区域网络，基于块级别存储，高性能高成本</p>
<h2 id="二、基础介绍"><a href="#二、基础介绍" class="headerlink" title="二、基础介绍"></a>二、基础介绍</h2><p><strong>NFS是基于网络的一个资源共享配置系统</strong>，创建两个IP地址的虚拟机，在服务端虚拟上搭建一个NFS的共享目录，<strong>将NFS主机分享的目录，挂载到本地客户端当中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，在客户端端看起来，就像访问本地文件一样。</strong></p>
<h2 id="三、端口配置问题"><a href="#三、端口配置问题" class="headerlink" title="三、端口配置问题"></a>三、端口配置问题</h2><p>NFS服务端口开在2049，但是由于文件系统非常复杂，所以NFS需要远程调用 <strong>RPC(Remote Procedure Call)</strong> 协议去启动其他端口，传输数据的端口是随机生成小于1024的。具体流程：<br>① 首先服务端启动 RPC 服务，并开启111端口<br>② 服务端启动NFS服务，并向 RPC 注册端口信息<br>③ 客户端启动 RPC 服务，向服务端的 RPC 服务请求服务端的NFS端口<br>④ 服务端的 RPC 服务反馈NFS端口信息给客户端<br>⑤ 客户端通过获取的NFS端口来建立和服务端的NFS连接并进行数据的传输<br><img src="/images/nfs2.png"></p>
<h2 id="四、NFS-优缺点"><a href="#四、NFS-优缺点" class="headerlink" title="四、NFS 优缺点"></a>四、NFS 优缺点</h2><p>优点：节省本地空间，可以通过网络进行访问<br>缺点：<br>1) 若服务端宕机，则所有客户端都无法进行访问<br>2) 若客户端无法使用网络，则无法访问服务端文件<br>3) NFS采用明文数据传输，无用户认证机制，需要担心其安全性<br>4) 服务端在高并发下，NFS性能效率一般</p>
<h2 id="五、服务端配置文件-etc-exports"><a href="#五、服务端配置文件-etc-exports" class="headerlink" title="五、服务端配置文件&#x2F;etc&#x2F;exports"></a>五、服务端配置文件&#x2F;etc&#x2F;exports</h2><p><code>/etc/exports</code> 文件是NFS主要的配置文件，该文件用于设置服务器的共享目录，以及目录允许访问的主机，访问权限，和其他选项，NFS安装后会在&#x2F;etc&#x2F;目录下创建一个空文件，用户需要自定编辑</p>
<h2 id="六、日志文件-var-lib-nfs"><a href="#六、日志文件-var-lib-nfs" class="headerlink" title="六、日志文件 &#x2F;var&#x2F;lib&#x2F;nfs"></a>六、日志文件 &#x2F;var&#x2F;lib&#x2F;nfs</h2><p>服务端常用&#x2F;var&#x2F;lib&#x2F;nfs&#x2F;etab记录所有共享文件的完整权限</p>
<blockquote>
<p><code>ro,rw</code> 只读和读写<br><code>async</code> 异步，数据变化后不立即写磁盘，先写入到缓冲区中，过一段时间再写入磁盘，性能高<br><code>sync</code>（1.0.0后为默认）同步，数据在请求时立即写入共享存储磁盘<br><code>root_squash</code> （默认）远程root映射为nfsnobody,UID为65534，CentOS8 为nobody,早期版本是4294967294 (nfsnobody)<br><code>no_root_squash</code> 远程root映射成root用户<br><code>all_squash</code> 所有远程用户(包括root)都变成nfsnobody, CentOS8 为nobody<br><code>no_all_squash</code> （默认）保留共享文件的UID和GID<br><code>anonuid</code>和<code>anongid</code> 指明匿名用户映射为特定用户UID和组GID，而非nfsnobody,可配合all_squash使用</p>
</blockquote>
<h2 id="七、相关命令"><a href="#七、相关命令" class="headerlink" title="七、相关命令"></a>七、相关命令</h2><p>1. <code>showmount  -e  [IP_ADDRESS]</code> 展示网络挂载信息<br>2. <code>exportfs</code> 管理NFS共享文件系统列表；无需重启服务，使用 <code>exportfs</code> 命令搭配选项即可重新加载主配置文件<br>@：创建 NFS 共享的根目录，也称为导出文件夹。文件系统，或简称为导出。<br>常用命令：<code>-a</code>(all) 导出或取消导出所有目录<br><code>-r</code>(reexport) 重新导出，且同步&#x2F;var&#x2F;lib&#x2F;nfs&#x2F;etab和&#x2F;etc&#x2F;exports文件信息<br><code>-u</code>(unexport) 取消导出一个或多个目录<br><code>-v</code>(verbose)<br><code>-s</code>(display current export list suitable)</p>
<h2 id="八、客户端的三个挂载方式"><a href="#八、客户端的三个挂载方式" class="headerlink" title="八、客户端的三个挂载方式"></a>八、客户端的三个挂载方式</h2><p><strong>1. 手动挂载</strong> <code>mount -t nfs [serverIP:/PATH] [mountpoint]</code><br><strong>2. 开机自动挂载</strong><br>(1) <code>/etc/fstab</code>： <code>[serverIP:/PATH] [挂载点] nfs [挂载权限] [是否备份1/0] [是否检查1/0]</code><br>(2)<code> /etc/rc.local</code>：  <code>mount -t nfs [serverIP:/PATH] [mountpoint] (额外操作：chmod +x /etc/rc.d/rc.local)</code><br><strong>3. 按需自动挂载卸载：</strong> <code>autofs</code> 直接映射和间接映射<br>主配置文件：<code>/etc/auto.master.d/xxx.autofs</code><br>子配置文件：<code>/etc/auto.xxx</code></p>
<h2 id="九、autofs-按需自动下载"><a href="#九、autofs-按需自动下载" class="headerlink" title="九、autofs 按需自动下载"></a>九、autofs 按需自动下载</h2><h4 id="1-功能介绍："><a href="#1-功能介绍：" class="headerlink" title="1. 功能介绍："></a>1. 功能介绍：</h4><p>手动挂载和开机自动挂载开启后，若无需使用，会占用系统资源，需要手动卸载，才能释放资源，autofs工具为此提供解决方案，能够及时挂载动态卸载文件系统，识别若超过五分钟未使用该文件，则自动卸载，免去我们手动挂载的麻烦。</p>
<h4 id="2-主子配置文件"><a href="#2-主子配置文件" class="headerlink" title="2. 主子配置文件"></a>2. 主子配置文件</h4><blockquote>
<p>主配置文件：<code>/etc/auto.master.d/xxx.autofs</code><br>——内容：<code>[挂载点] [子配置文件路径]</code><br>子配置文件：<code>/etc/auto.xxx</code><br>——内容：<code>[挂载点] [-fstype=挂载选项] [服务端IP:/共享路径]</code></p>
</blockquote>
<h4 id="3-直接映射与间接映射"><a href="#3-直接映射与间接映射" class="headerlink" title="3. 直接映射与间接映射"></a>3. 直接映射与间接映射</h4><blockquote>
<p><strong>直接映射</strong>：主：<code>[/-] [子配置文件]</code><br>—-内容：子：<code>[挂载点绝对路径] [挂载选项] [服务端共享路径]</code><br><strong>间接映射</strong>：主：<code>[挂载点父目录] [子配置文件]</code><br>—-内容：子：<code>[挂载点相对路径] [挂载选项] [服务端共享路径]</code></p>
</blockquote>
<p>@：<code>/-</code> 仅是一种占位符，代表任意路径<br>@：间接映射，在主子配置文件的挂载点上的一种写法，不可描述冲突，属于拼接写法，冲突会报错</p>
<p><strong>直接映射和间接映射的区别：</strong><br><img src="/images/nfs3.png"><br>@：间接映射可以使用通配符编辑子配置文件，间接映射client端示例：<br>@：主配置文件内容：<code>/mnt  /etc/auto.zbx</code><br>@：子配置文件内容：<code>*  -fstype=nfs,rw,sync  192.168.48.201:/share/&amp;</code><br>@：表示 <code>/share/*</code> 下所有文件在client机上都可以按需进入挂载使用，都挂载到&#x2F;mnt&#x2F;下</p>
<h4 id="4-细说间接映射"><a href="#4-细说间接映射" class="headerlink" title="4. 细说间接映射"></a>4. 细说间接映射</h4><p>@：说明<br>@：直接映射因为进去挂载点的父目录时，看得到该挂载的文件，所以不会覆盖原文件<br>@：间接映射因为进去挂载点的父目录时，会看不到挂载文件，因为它覆盖了该目录下所有的原文件，只透明的展示了本身文件<br><img src="/images/nfs4.png"></p>
<h4 id="5-总体权限管控图"><a href="#5-总体权限管控图" class="headerlink" title="5. 总体权限管控图"></a>5. 总体权限管控图</h4><p><img src="/images/nfs5.png"></p>
<h4 id="6-配置挂载权限是否匿名化"><a href="#6-配置挂载权限是否匿名化" class="headerlink" title="6. 配置挂载权限是否匿名化"></a>6. 配置挂载权限是否匿名化</h4><p>nfs默认对root用户做匿名化，对普通用户不做匿名化，但是此操作无任何意义，一看就知道nobody为root用户，固可以选择全部用户匿名话或者全部用户不匿名化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ----------------------------------------------------</span></span><br><span class="line"><span class="comment"># ----- nfs 默认对 root 用户做匿名化处理：root_squash</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/work</span><br><span class="line"><span class="built_in">echo</span> 123 &gt; 123.txt</span><br><span class="line">ll</span><br><span class="line"><span class="comment"># -rw-r--r-- 1 nobody nobody 4 May 10 18:25 123.txt</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------</span></span><br><span class="line"><span class="comment"># ----- 编辑服务端 /etc/exports 对 root 不做匿名化：no_root_squash</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------</span></span><br><span class="line"><span class="built_in">echo</span> 456 &gt; 456.txt</span><br><span class="line">ll</span><br><span class="line"><span class="comment"># -rw-r--r-- 1 nobody nobody 4 May 10 18:25 123.txt</span></span><br><span class="line"><span class="comment"># -rw-r--r-- 1 root root 4 May 10 18:27 456.txt</span></span><br></pre></td></tr></table></figure>

<h4 id="7-示例一，采用NFS将服务端的目录共享，客户机挂载到本地"><a href="#7-示例一，采用NFS将服务端的目录共享，客户机挂载到本地" class="headerlink" title="7. 示例一，采用NFS将服务端的目录共享，客户机挂载到本地"></a>7. 示例一，采用NFS将服务端的目录共享，客户机挂载到本地</h4><p>&lt;1&gt; 在服务端和客户端各自配置好yum源，安装并启动rpcbind和nfs<br>@：注意 因为NFS服务依赖于RPC服务，所以必须先开启rpcbind服务，再开启nfs-utils服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sr0 /mnt</span><br><span class="line">yum install -y nfs* rpcbind</span><br><span class="line">systemctl <span class="built_in">enable</span> --now rpcbind &amp;&amp; systemctl <span class="built_in">enable</span> --now nfs-utils</span><br></pre></td></tr></table></figure>
<p>&lt;2&gt; 在服务端根下创建共享文件并设置文件权限为777</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /share/&#123;work,life&#125;</span><br><span class="line"><span class="built_in">chmod</span> -R 777 /share</span><br></pre></td></tr></table></figure>
<p>&lt;3&gt; 在服务端修改配置文件，添加共享文件夹和客户端ip网段，并查看本机共享目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --- 修改配置文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/share/work 192.168.99.0/24(rw,sync)&#x27;</span> &gt; /etc/exports</span><br><span class="line">sed -i <span class="string">&#x27;$a\/share/life 192.168.99.0/24(rw,sync)&#x27;</span> /etc/exports</span><br><span class="line"><span class="built_in">cat</span> /etc/exports</span><br><span class="line"><span class="comment"># /share/work 192.168.99.0/24(rw,sync)</span></span><br><span class="line"><span class="comment"># /share/life 192.168.99.0/24(rw,sync)</span></span><br><span class="line"><span class="comment"># --- 重启服务，查看本机共享目录</span></span><br><span class="line">systemctl restart nfs    </span><br><span class="line">showmount -e</span><br><span class="line"><span class="comment"># Export list for server:</span></span><br><span class="line"><span class="comment"># /share/work 192.168.48.0/24</span></span><br><span class="line"><span class="comment"># /share/life 192.168.48.0/24</span></span><br></pre></td></tr></table></figure>
<p>&lt;4&gt; 服务端防火墙配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-service=nfs --permanent    <span class="comment"># 允许 NFS 服务</span></span><br><span class="line">firewall-cmd --add-service=rpc-bind --permanent   <span class="comment"># 允许 NFS 服务通过 RPC 进行通信</span></span><br><span class="line">firewall-cmd --zone=public --add-service=mountd --permanent    <span class="comment"># 允许 NFS 客户端挂载</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<p>&lt;5&gt; 服务端 selinux 配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setsebool -P nfs_export_all_rw 1    <span class="comment"># 确保 NFS 服务的相关端口和服务被允许</span></span><br><span class="line">setsebool -P nfs_export_all_ro 1    <span class="comment"># 确保 NFS 服务的相关端口和服务被允许</span></span><br><span class="line">setsebool -P nfs_client 1    <span class="comment"># 允许客户端挂载</span></span><br><span class="line">semanage fcontext -a -t nfs_t <span class="string">&#x27;/share(/.*)?&#x27;</span>    <span class="comment"># 配置 selinux 安全上下文标签</span></span><br><span class="line">restorecon -Rv /share</span><br></pre></td></tr></table></figure>
<p>&lt;6&gt; 服务端验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exportfs -ra    <span class="comment"># 重新导出 NFS 共享</span></span><br><span class="line">exportfs -v     <span class="comment"># 查看共享目录列表</span></span><br></pre></td></tr></table></figure>
<p>&lt;7&gt; 在客户端，查看服务端的共享文件，将服务端的共享文件挂载到本地<br>@：server-192.168.99.200，client-192.168.99.201</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">showmount -e 192.168.99.200</span><br><span class="line">mount -t nfs 192.168.99.200:/share /mnt/share    <span class="comment"># 手动挂载</span></span><br><span class="line">mount | grep share</span><br><span class="line"><span class="built_in">cd</span> /mnt/share &amp;&amp; <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># work life</span></span><br></pre></td></tr></table></figure>
<p>&lt;8&gt; 在客户端，设置开机自动挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -1 /etc/fstab    <span class="comment"># 编辑 /etc/fstab 文件新增 NFS 挂载记录</span></span><br><span class="line"><span class="comment"># 192.168.48.200:/share    /mnt/share    nfs    rw,sync    0    0</span></span><br><span class="line">mount -a    <span class="comment"># 验证 /etc/fstab 自动挂载是否有错</span></span><br><span class="line"><span class="built_in">df</span> -Th | grep nfs     <span class="comment"># 查看挂载信息</span></span><br></pre></td></tr></table></figure>


<h4 id="8-示例二，采用autofs按需自动挂载服务器端到本地【直接映射挂载】"><a href="#8-示例二，采用autofs按需自动挂载服务器端到本地【直接映射挂载】" class="headerlink" title="8. 示例二，采用autofs按需自动挂载服务器端到本地【直接映射挂载】"></a>8. 示例二，采用autofs按需自动挂载服务器端到本地【直接映射挂载】</h4><p>&lt;1&gt; 在服务端，客户端，安装autofs并开启<br>@：注意：本地源无提供autofs工具包，需要利用网络源下载autofs工具，此时把手动配置的repo文件cdrom移动至back下，使其不为&#x2F;etc&#x2F;yum.repos.d目录的子文件，则默认使用网络源进行下载；openEuler.repo是系统预设的网络源文件<br>@：注意：因为需要使用网络源下载工具包，固需要确保虚拟机可以正常上网，可以连接外网，且因为网络源中下载链接中都为域名地址，所以需要检查虚拟机网络配置中是否有配置DNS来解析域名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y autofs &amp;&amp; systemctl <span class="built_in">enable</span> --now autofs</span><br></pre></td></tr></table></figure>
<p>&lt;2&gt; 配置客户端主配置文件，子配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/auto.master.d/titi.autofs</span><br><span class="line"><span class="comment"># /- /etc/auto.titi</span></span><br><span class="line"><span class="built_in">cat</span> /etc/auto.titi</span><br><span class="line"><span class="comment"># /mnt/nfs/work -fstype,nfs,rw,sync 192.168.99.200:/share/work</span></span><br></pre></td></tr></table></figure>
<p>&lt;3&gt; 客户端确保&#x2F;mnt默认挂载点无文件，重启autofs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unmount /mnt/*</span><br><span class="line">systemctl restart autofs</span><br></pre></td></tr></table></figure>
<p>&lt;4&gt; 不需要使用，无进入目录，显示无挂载，需要使用时，进入目录，显示挂载信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------- 不需要使用，无进入目录，显示无挂载 -------</span></span><br><span class="line"><span class="built_in">df</span> -Th | grep nfs</span><br><span class="line"><span class="comment"># ------- 无需人工手动创建挂载点 只要在配置文件中编写挂载点 autofs自动创建 -------</span></span><br><span class="line"><span class="built_in">ls</span> /mnt/nfs</span><br><span class="line"><span class="comment"># work</span></span><br><span class="line"><span class="comment"># ------- 进入挂载点 autofs开始自动挂载 -------</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/nfs/work</span><br><span class="line"><span class="built_in">df</span> -Th | grep nfs</span><br><span class="line"><span class="comment"># 192.168.99.200:/share/work    nfs4    17G    2.7G     14G    17%    /mnt/nfs/work</span></span><br><span class="line"><span class="comment"># ------- 退出挂载点 查看系统挂载信息此时还是挂载中 -------</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">df</span> -Th | grep nfs</span><br><span class="line"><span class="comment"># 192.168.99.200:/share/work    nfs4    17G    2.7G     14G    17%    /mnt/nfs/work</span></span><br><span class="line"><span class="comment"># ------- 因为autofs具有时效性 后台等待五分钟 若未在挂载点中未使用则自动卸载 -------</span></span><br><span class="line"><span class="comment"># ------- 可以选择等待五分钟/重启autofs/umount手动卸载等刷新挂载信息 -------</span></span><br><span class="line">systemctl restart autofs</span><br><span class="line"><span class="built_in">df</span> -Th | grep nfs</span><br></pre></td></tr></table></figure>



<h4 id="9-示例三，采用autofs按需自动挂载服务器端到本地【间接映射挂载】"><a href="#9-示例三，采用autofs按需自动挂载服务器端到本地【间接映射挂载】" class="headerlink" title="9. 示例三，采用autofs按需自动挂载服务器端到本地【间接映射挂载】"></a>9. 示例三，采用autofs按需自动挂载服务器端到本地【间接映射挂载】</h4><p>&lt;1&gt; 在客户端上，先卸载 <code>/mnt/*</code>，再关闭 autofs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unmount /mnt/*</span><br><span class="line">systemctl stop autofs</span><br></pre></td></tr></table></figure>
<p>&lt;2&gt; 配置主子配置文件为间接挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/auto.master.d/titi.autofs</span><br><span class="line"><span class="comment"># /mnt /etc/auto.titi</span></span><br><span class="line"><span class="built_in">cat</span> /etc/auto.titi</span><br><span class="line"><span class="comment"># * -fstype,nfs,rw,sync 192.168.99.200:/share/&amp;</span></span><br><span class="line">systemctl restart autofs</span><br></pre></td></tr></table></figure>
<p>&lt;3&gt; 不使用时查看挂载情况，显示没有挂载，需要使用时，进入目录work和life，系统自动挂载两个子目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------- 未进入挂载父目录，此时挂载信息无服务端相关信息 ------- </span></span><br><span class="line"><span class="built_in">df</span> -Th | grep nfs    </span><br><span class="line"><span class="comment"># ------- 查看挂载父目录为空，因为间接挂载，实际目录被隐藏，但是还可以进入子文件 work，life ------- </span></span><br><span class="line"><span class="built_in">ls</span> /mnt    </span><br><span class="line"><span class="built_in">cd</span> /mnt/work</span><br><span class="line"><span class="built_in">cd</span> /mnt/life</span><br><span class="line"><span class="comment"># ------- 再次查看系统挂载信息，挂载成功 ------- </span></span><br><span class="line"><span class="built_in">df</span> -Th | grep nfs    </span><br><span class="line"><span class="comment"># 192.168.99.200:/share/work    nfs4    17G    2.7G     14G    17%    /mnt/work</span></span><br><span class="line"><span class="comment"># 192.168.99.200:/share/life    nfs4    17G    2.7G     14G    17%    /mnt/life</span></span><br></pre></td></tr></table></figure>
<p>&lt;4&gt; 在服务器端再共享一个子目录shopping，添加该目录到nfs配置文件并重启nfs服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -m 777 /share/shopping</span><br><span class="line">sed -i <span class="string">&#x27;$a\/share/shopping 192.168.99.0/24(rw,sync)&#x27;</span> /etc/exports</span><br><span class="line">systemctl restart nfs</span><br></pre></td></tr></table></figure>
<p>&lt;5&gt; 在客户端，进入shopping后，系统应自动挂载该子目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mnt/shopping</span><br><span class="line"><span class="built_in">df</span> -Th | grep nfs</span><br><span class="line"><span class="comment"># 192.168.99.200:/share/work    nfs4    17G    2.7G     14G    17%    /mnt/work</span></span><br><span class="line"><span class="comment"># 192.168.99.200:/share/life    nfs4    17G    2.7G     14G    17%    /mnt/life</span></span><br><span class="line"><span class="comment"># 192.168.99.200:/share/shopping    nfs4    17G    2.7G     14G    17%    /mnt/shopping</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mail</title>
    <url>/2024/12/31/Mail/</url>
    <content><![CDATA[<p><img src="/images/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8.png"></p>
<ul>
<li>邮件传输代理<br>MTA-Mail Transport Agent，负责将邮件在服务器之间传输。常用协议：SMTP。常见代理商软件：postfix，sendmail，Exim</li>
<li>邮件用户代理<br>MUA-Mail User Agent，负责发送和接收邮件。常用协议：IMAP，POP3，POP3S。常见代理商软件：Dovecot，常见Web端：openwebmail，roundcubemail。</li>
<li>邮件投递代理<br>MDA-Mail Delivery Agent，负责将邮件存储到接收方的邮箱中。</li>
</ul>
<h4 id="一、Postfix-配置"><a href="#一、Postfix-配置" class="headerlink" title="一、Postfix 配置"></a>一、Postfix 配置</h4><p>安装 postfix 软件包，对主配置文件 <code>/et/postfix/main.cf</code> 文件进行配置，并重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> dnf install -y postfix</span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> vim /etc/postfix/main.cf</span><br><span class="line">myhostname = mail.titi.cn    <span class="comment"># 主机名</span></span><br><span class="line">mydomain = titi.cn           <span class="comment"># 域名</span></span><br><span class="line">myorigin = <span class="variable">$mydomain</span>                    <span class="comment"># 查看邮件发件人来源设置</span></span><br><span class="line">inet_interfaces = all                   <span class="comment"># 通过所有可用的网络接口来接收和发送邮件</span></span><br><span class="line">mydestination = <span class="variable">$myhostname</span>, <span class="variable">$mydomain</span>, localhost       <span class="comment"># 定义接收的邮件域名</span></span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now postfix</span><br></pre></td></tr></table></figure>
<p>防火墙放行 SMTP 服务的所有数据包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> firewall-cmd --add-service=smtp --per</span><br><span class="line">success</span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure>
<p>postconf 命令，查看 &#x2F;etc&#x2F;postfix&#x2F;main.cf 中的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost ~]$ postconf myhostname</span><br><span class="line">myhostname = mail.sziit2303010148.cn</span><br><span class="line">[titi@localhost ~]$ postconf mydomain</span><br><span class="line">mydomain = sziit2303010148.cn</span><br><span class="line">[titi@localhost ~]$ postconf myorigin</span><br><span class="line">myorigin = <span class="variable">$mydomain</span></span><br><span class="line">[titi@localhost ~]$ postconf inet_interfaces</span><br><span class="line">inet_interfaces = all</span><br><span class="line">[titi@localhost ~]$ postconf mydestination</span><br><span class="line">mydestination = <span class="variable">$myhostname</span>, <span class="variable">$mydomain</span>, localhost</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/postfix/main.cf | grep -v <span class="string">&#x27;^#&#x27;</span> | grep -v <span class="string">&#x27;^$&#x27;</span></span><br></pre></td></tr></table></figure>


<h4 id="二、Dovecot-配置"><a href="#二、Dovecot-配置" class="headerlink" title="二、Dovecot 配置"></a>二、Dovecot 配置</h4><p>安装服务，配置配置文件，开启允许协议通过，定义邮件存储格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> dnf install -y dovecot</span><br><span class="line"><span class="comment"># 主配置文件，开放接收协议</span></span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> vim /etc/dovecot/dovecot.conf</span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/dovecot/dovecot.conf | grep -v <span class="string">&#x27;^#&#x27;</span> | grep protocol</span><br><span class="line">protocols = imap pop3 lmtp submission      </span><br><span class="line"><span class="comment"># 子配置文件，定义邮件存储格式</span></span><br><span class="line">[titi@localhost ~]$ <span class="built_in">cd</span> /etc/dovecot/conf.d</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> vim 10-mail.conf</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> 10-mail.conf | grep -v <span class="string">&#x27;^#&#x27;</span> | grep mail_location</span><br><span class="line">   mail_location = mbox:~/mail:INBOX=/var/mail/%u   </span><br><span class="line"><span class="comment"># 开机自动启动</span></span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now dovecot</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> systemctl is-active dovecot</span><br><span class="line">active</span><br></pre></td></tr></table></figure>
<p>防火墙放行所需的 pop3s 协议</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> firewall-cmd --add-service=pop3s --per</span><br><span class="line">success</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> firewall-cmd --add-service=imaps --per</span><br><span class="line">success</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line">success</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> firewall-cmd --list-services</span><br><span class="line">cockpit dhcpv6-client dns mdns pop3s samba smtp ssh</span><br></pre></td></tr></table></figure>
<p>生产证书解决SSL加密问题<br>Dovecot 邮件服务器启用 SSL&#x2F;TLS 加密，10-ssl.conf 配置 SSL 相关信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> vim 10-ssl.conf</span><br><span class="line">ssl_cert = &lt;/etc/pki/dovecot/certs/dovecot.pem    <span class="comment"># SSL证书文件</span></span><br><span class="line">ssl_key = &lt;/etc/pki/dovecot/private/dovecot.pem   <span class="comment"># SSL私钥文件</span></span><br><span class="line"><span class="comment">#ssl_cipher_list = PROFILE=SYSTEM</span></span><br></pre></td></tr></table></figure>
<p>指向的SSL证书文件与私钥文件默认都为空</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/pki/dovecot/certs/dovecot.pem</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/pki/dovecot/private/dovecot.pem</span><br></pre></td></tr></table></figure>
<p>打开配置文件中的认证模块一</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SSL ciphers to use, the default is:</span></span><br><span class="line">ssl_cipher_list = ALL:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW@STRENGTH</span><br><span class="line"><span class="comment"># To disable non-EC DH, use:</span></span><br><span class="line"><span class="comment">#ssl_cipher_list = ALL:!DH:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW@STRENGTH</span></span><br><span class="line"><span class="comment">#ssl_cipher_list = PROFILE=SYSTEM</span></span><br></pre></td></tr></table></figure>
<p>配置文件中提及： Included doc&#x2F;mkcert.sh can be used to easily generate self-signed certificate，使用 mkcert.sh 脚本可以生成 SSL 密钥。<br>使用 rpm -ql 命令查找 dovecot 软件所有已安装的包，在搜索 mkcert.sh 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost conf.d]$ rpm -ql dovecot | grep mkcert.sh</span><br><span class="line">/usr/libexec/dovecot/mkcert.sh</span><br><span class="line">/usr/share/doc/dovecot/mkcert.sh</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">cat</span> /usr/share/doc/dovecot/mkcert.sh</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generates a self-signed certificate.</span></span><br><span class="line"><span class="comment"># Edit dovecot-openssl.cnf before running this.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">umask</span> 077   </span><br><span class="line">OPENSSL=<span class="variable">$&#123;OPENSSL-openssl&#125;</span>          </span><br><span class="line">SSLDIR=<span class="variable">$&#123;SSLDIR-/etc/pki/dovecot&#125;</span>    </span><br><span class="line">OPENSSLCONFIG=<span class="variable">$&#123;OPENSSLCONFIG-/etc/pki/dovecot/dovecot-openssl.cnf&#125;</span></span><br><span class="line"></span><br><span class="line">CERTDIR=<span class="variable">$SSLDIR</span>/certs</span><br><span class="line">KEYDIR=<span class="variable">$SSLDIR</span>/private</span><br><span class="line"></span><br><span class="line">CERTFILE=<span class="variable">$CERTDIR</span>/dovecot.pem</span><br><span class="line">KEYFILE=<span class="variable">$KEYDIR</span>/dovecot.pem</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$CERTDIR</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$SSLDIR</span>/certs directory doesn&#x27;t exist&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$KEYDIR</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$SSLDIR</span>/private directory doesn&#x27;t exist&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$CERTFILE</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$CERTFILE</span> already exists, won&#x27;t overwrite&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$KEYFILE</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$KEYFILE</span> already exists, won&#x27;t overwrite&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$OPENSSL</span> req -new -x509 -nodes -config <span class="variable">$OPENSSLCONFIG</span> -out <span class="variable">$CERTFILE</span> -keyout <span class="variable">$KEYFILE</span> -days 365 || <span class="built_in">exit</span> 2</span><br><span class="line"><span class="built_in">chown</span> root:root <span class="variable">$CERTFILE</span> <span class="variable">$KEYFILE</span></span><br><span class="line"><span class="built_in">chmod</span> 0600 <span class="variable">$CERTFILE</span> <span class="variable">$KEYFILE</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="variable">$OPENSSL</span> x509 -subject -fingerprint -noout -<span class="keyword">in</span> <span class="variable">$CERTFILE</span> || <span class="built_in">exit</span> 2</span><br></pre></td></tr></table></figure>
<p>执行文件，生成 SSL 密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> sh -x /usr/share/doc/dovecot/mkcert.sh</span><br><span class="line"><span class="comment"># + echo &#x27;/etc/pki/dovecot/certs/dovecot.pem already exists, won&#x27;\&#x27;&#x27;t overwrite&#x27;</span></span><br><span class="line"><span class="comment"># /etc/pki/dovecot/certs/dovecot.pem already exists, won&#x27;t overwrite</span></span><br><span class="line"><span class="comment"># + exit 1</span></span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> <span class="built_in">rm</span> /etc/pki/dovecot/certs/dovecot.pem</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> sh -x /usr/share/doc/dovecot/mkcert.sh</span><br><span class="line"><span class="comment"># + echo &#x27;/etc/pki/dovecot/private/dovecot.pem already exists, won&#x27;\&#x27;&#x27;t overwrite&#x27;</span></span><br><span class="line"><span class="comment"># /etc/pki/dovecot/private/dovecot.pem already exists, won&#x27;t overwrite</span></span><br><span class="line"><span class="comment"># + exit 1</span></span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> <span class="built_in">rm</span> /etc/pki/dovecot/private/dovecot.pem</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> sh -x /usr/share/doc/dovecot/mkcert.sh</span><br><span class="line">+ <span class="built_in">umask</span> 077</span><br><span class="line">+ OPENSSL=openssl</span><br><span class="line">+ SSLDIR=/etc/pki/dovecot</span><br><span class="line">+ OPENSSLCONFIG=/etc/pki/dovecot/dovecot-openssl.cnf</span><br><span class="line">+ CERTDIR=/etc/pki/dovecot/certs</span><br><span class="line">+ KEYDIR=/etc/pki/dovecot/private</span><br><span class="line">+ CERTFILE=/etc/pki/dovecot/certs/dovecot.pem</span><br><span class="line">+ KEYFILE=/etc/pki/dovecot/private/dovecot.pem</span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> <span class="string">&#x27;!&#x27;</span> -d /etc/pki/dovecot/certs <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> <span class="string">&#x27;!&#x27;</span> -d /etc/pki/dovecot/private <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> -f /etc/pki/dovecot/certs/dovecot.pem <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> -f /etc/pki/dovecot/private/dovecot.pem <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ openssl req -new -x509 -nodes -config /etc/pki/dovecot/dovecot-openssl.cnf -out /etc/pki/dovecot/certs/dovecot.pem -keyout /etc/pki/dovecot/private/dovecot.pem -days 365</span><br><span class="line">Generating a RSA private key</span><br><span class="line">..............................++++</span><br><span class="line">...........................................................................................................................................................++++</span><br><span class="line">writing new private key to <span class="string">&#x27;/etc/pki/dovecot/private/dovecot.pem&#x27;</span></span><br><span class="line">-----</span><br><span class="line">+ <span class="built_in">chown</span> root:root /etc/pki/dovecot/certs/dovecot.pem /etc/pki/dovecot/private/dovecot.pem</span><br><span class="line">+ <span class="built_in">chmod</span> 0600 /etc/pki/dovecot/certs/dovecot.pem /etc/pki/dovecot/private/dovecot.pem</span><br><span class="line">+ <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">+ openssl x509 -subject -fingerprint -noout -<span class="keyword">in</span> /etc/pki/dovecot/certs/dovecot.pem</span><br><span class="line">subject=OU = IMAP server, CN = imap.example.com, emailAddress = postmaster@example.com</span><br><span class="line">SHA1 Fingerprint=38:33:D4:53:45:51:1D:C2:BB:31:4D:1A:C5:40:3E:E3:CC:98:47:3D</span><br></pre></td></tr></table></figure>


<h4 id="三、roundcube-软件客户端-web-部署"><a href="#三、roundcube-软件客户端-web-部署" class="headerlink" title="三、roundcube 软件客户端 web 部署"></a>三、roundcube 软件客户端 web 部署</h4><p>（1）从官网 <a href="https://roundcube.net/">https://roundcube.net/</a> 上下载客户端工具 complete 版本<br>（2）解压到 <code>/var/www/mail</code> 目录下，根据该工具的配置，编辑 <code>/etc/php.ini</code> 文件，编辑配置时区，<code>date.timezone = Asia/Shanghai</code><br>（3）修改 php-fpm 的配置文件后，重启 Htppd 服务使其生效<br>（4）为 roundcube 创建数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123 </span><br><span class="line">create database roundcubemail;</span><br><span class="line">show databases;</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure>
<p>（5）修改 <code>/var/www/mail/&#123;temp,logs&#125;</code> 文件权限，添加 <code>w</code> 写权限<br>（6）在浏览器输入：<code>http://mail.titi.cn/installer</code> 进行一步步配置（本虚拟机的 DNS 配置中，指定 mail.titi.cn 网址指向 &#x2F;var&#x2F;www&#x2F;mail 目录），not OK 问题需要修复，not available 问题可以忽略，若打不开网站，可以尝试重启 httpd 服务，mariadb 或 named 服务<br>（7）在 web 端的安装引导页面，第三页中，生成 <code>config.inc.php</code> 文件，复制到 <code>/var/www/mail/config/</code> 目录下，然后在第三页中点击 <code>initialize database</code> 初始化数据库，最后可以使用 <code>Test IMAP config</code> 进行邮件收发测试<br>（8）最终验证：打开 <code>http://mail.titi.cn</code> 可以登录账号，账号需要在虚拟机中进行创建，加入附加组 mail 组即可<br>（9）其他：本次测试基于 redhat9.2 发行版实施，</p>
<hr>
<p>@ <a href="https://zybuluo.com/2303010148/note/2566257">支持邮件客户端的邮件服务器</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RAID-LVM-VDO-磁盘优化</title>
    <url>/2025/01/06/RAID-LVM-VDO-%E7%A3%81%E7%9B%98%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="一、RAID"><a href="#一、RAID" class="headerlink" title="一、RAID"></a>一、RAID</h2><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p><a href="https://en.wikipedia.org/wiki/Standard_RAID_levels">RAID 基维百科</a><br><strong>条带化</strong> – 一种基于其片段在阵列组件之间的分布的数据组织技术。并行读取&#x2F;写入，速度快，但是数据分布在两个硬盘上，容错率不高，在 RAID 0 中使用。<br><strong>镜像</strong> – 一种基于将信息复制到单独组件上的数据组织技术。镜像会创建一个组件的完整副本，并使用另一个组件来存储此副本。提高容错率，在 RAID 1 中使用。<br><strong>奇偶校验</strong> – 一种数据组织技术，写入同时校验数据，教研结果存放到其他成员磁盘中，若数据丢失，可以通过校验数据反校验重建丢失的数据，速度快，在 RAID 5 中使用。<br><img src="/images/RAID.png"></p>
<h3 id="常见-RAID-等级："><a href="#常见-RAID-等级：" class="headerlink" title="常见 RAID 等级："></a>常见 RAID 等级：</h3><ol>
<li><p><strong>RAID 0（条带化，Striping）</strong></p>
<ul>
<li><strong>特点</strong>：数据被分割成多个块，分别写入到不同的硬盘中。没有冗余，也就是说，如果一个硬盘损坏，所有数据将丢失。</li>
<li><strong>优点</strong>：提升读取和写入性能。</li>
<li><strong>缺点</strong>：没有数据冗余，数据丢失风险高。</li>
<li><strong>适用场景</strong>：对性能要求高，但对数据安全性要求不高的应用。</li>
</ul>
</li>
<li><p><strong>RAID 1（镜像，Mirroring）</strong></p>
<ul>
<li><strong>特点</strong>：将数据完全镜像到两块或多块硬盘上，即每个硬盘都保存相同的数据。</li>
<li><strong>优点</strong>：提供数据冗余，一块硬盘损坏时，数据仍然可以从另一块硬盘中恢复。</li>
<li><strong>缺点</strong>：存储效率低，因为所有数据都会被复制一份，至少需要两块硬盘。</li>
<li><strong>适用场景</strong>：对数据安全性要求较高的应用，尤其是小型企业和个人使用。</li>
</ul>
</li>
<li><p><strong>RAID 5（带奇偶校验的条带化，Striping with Parity）</strong></p>
<ul>
<li><strong>特点</strong>：数据和奇偶校验信息被分散存储在多个硬盘中，通常至少需要三块硬盘。</li>
<li><strong>优点</strong>：提供数据冗余，允许一个硬盘故障而不丢失数据，同时性能较好。</li>
<li><strong>缺点</strong>：写入操作较慢，因为需要计算奇偶校验。</li>
<li><strong>适用场景</strong>：企业级存储，既需要性能又需要数据安全。</li>
</ul>
</li>
<li><p><strong>RAID 10（RAID 1+0，镜像与条带化的组合）</strong></p>
<ul>
<li><strong>特点</strong>：结合RAID 1和RAID 0的特点。数据首先在两个硬盘之间进行镜像（RAID 1），然后再在两个镜像对之间进行条带化（RAID 0）。</li>
<li><strong>优点</strong>：提供良好的冗余和性能，能够容忍一个硬盘故障。</li>
<li><strong>缺点</strong>：需要至少四块硬盘，存储效率较低。</li>
<li><strong>适用场景</strong>：对性能和数据安全要求都很高的应用。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="二、LVM-逻辑卷"><a href="#二、LVM-逻辑卷" class="headerlink" title="二、LVM 逻辑卷"></a>二、LVM 逻辑卷</h2><h3 id="什么是逻辑卷？为什么需要逻辑卷？"><a href="#什么是逻辑卷？为什么需要逻辑卷？" class="headerlink" title="什么是逻辑卷？为什么需要逻辑卷？"></a>什么是逻辑卷？为什么需要逻辑卷？</h3><p>系统中磁盘分区一旦分配成功，若出现分区空间不够的情况，只能添加磁盘解决，数据无法跨盘或者跨分区，各磁盘和分区大小固定，重新调整较为麻烦；为实现数据存储空间弹性管理，动态逻辑卷提供更优解决方案</p>
<h3 id="关于LVM逻辑卷的基础概念："><a href="#关于LVM逻辑卷的基础概念：" class="headerlink" title="关于LVM逻辑卷的基础概念："></a>关于LVM逻辑卷的基础概念：</h3><p><strong>PV物理卷[physical volumn]</strong> ：直接从物理介质上划分，真正提供存储容量介质<br><strong>VG卷组[volumn group]</strong> ：由多个物理卷组成，将所有物理卷空间存放在一起的资源存储池<br><strong>LV逻辑卷[logical volumn]</strong> ：基于卷组上定义，是一种物理分区集合上的信息集合，在硬件磁盘和文件系统之间添加的一个逻辑中间层<br><strong>FS文件系统[file system]</strong> ：建立于逻辑卷之上<br><strong>PE</strong>：逻辑卷的基本单元，默认大小1PE&#x3D;4MB，可在创建逻辑卷时使用-s选项指定PE大小，第一次设定后不可再次修改<br><img src="/images/LVM1.png"></p>
<h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><p><strong>创建逻辑卷</strong> ：磁盘 &#x2F; 分区 —— <code>pvcreate</code> 创建物理卷 —— <code>vgcreate</code> 创建卷组 —— <code>lvcreate</code> 创建逻辑卷<br><strong>卸载逻辑卷</strong> ：<code>umount</code> 卸载文件系统 —— <code>lvremove</code> 删除逻辑卷 —— <code>vgremove</code> 删除卷组 —— pvremove删除物理卷<br><strong>缩容逻辑卷</strong> ：<code>umount</code> 卸载文件系统 —— <code>e2fsck -pf</code> 检查文件系统 —— <code>resize2fs</code> &#x2F; <code>xfs_growfs</code> 缩小文件系统 —— <code>lvreduce</code> 缩小逻辑卷 —— <code>mount</code> 挂载文件系统</p>
<h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><p><img src="/images/LVM2.png"></p>
<p>@：LVM逻辑卷写入方式<br> 1、线性方式（linear）：一次将数据写入磁盘多个磁盘，只有在前一个磁盘容量用完后才开始写入随后的磁盘。<br> 2、交错模式（triped）：指的是将数据拆分成两部分，分别写到底层不同的磁盘中。 </p>
<hr>
<h2 id="三、VDO-优化磁盘空间"><a href="#三、VDO-优化磁盘空间" class="headerlink" title="三、VDO 优化磁盘空间"></a>三、VDO 优化磁盘空间</h2><h3 id="一、VDO-介绍"><a href="#一、VDO-介绍" class="headerlink" title="一、VDO 介绍"></a>一、VDO 介绍</h3><ul>
<li>VDO(virtual data optimizer)虚拟数据优化器，VDO本身为一种虚拟技术，工具占据一定空间量，工具内核模块主要提供了<strong>重复数据块删除、压缩和精简配置来优化磁盘空间</strong>。</li>
<li>VDO的处理过程主要有三个部分：<br>1. <strong>一是零区块的清除，在初始化阶段，VDO会对仅包含0的数据块进行过滤消除，来提高 I&#x2F;0 性能；</strong><br>2. <strong>二是UDS模块在数据写入之前判断是否为冗余数据，删除重复数据块的副本，减少资源消耗，指向原数据块的过程；</strong><br>3. <strong>三是kvdo模块对数据使用LZ4压缩算法进行压缩，它把数据压缩为数据块，放在物理块上，一个物理块可以包含多个压缩块，所以提高了读取性能。</strong></li>
</ul>
<h3 id="二、VDO-相关命令"><a href="#二、VDO-相关命令" class="headerlink" title="二、VDO 相关命令"></a>二、VDO 相关命令</h3><p>服务名称：vdo</p>
<h4 id="创建和修改"><a href="#创建和修改" class="headerlink" title="创建和修改"></a>创建和修改</h4><p>&lt;1&gt; 创建一块vdo：<code>vdo create --name=? --device=/dev/? --vdoLogicalSize=?G</code><br>@：VDO 创建成功后，保存在 &#x2F;dev&#x2F;mapper 下，该机制为 Device Mapper 从逻辑设备到物理设备的映射框架， dmsetup info 可以查看具体映射情况，可以对 &#x2F;dev&#x2F;mapper 下的 dm-xx 进行格式化、挂载等操作，当成常规块设备使用即可。<br>&lt;2&gt; 扩容逻辑大小：<code>vdo growLogical --name=? --vdoLogicalSize=?</code>  (扩容逻辑大小需要指定新的逻辑大小；创建VDO时不指定虚拟大小，则按照物理大小进行1:1创建)<br>&lt;3&gt; 扩容物理大小：<code>vdo growPhysical --name=?</code>  (扩容物理大小无法设置具体值，一般在物理设备扩容后使用该命令扩容和下一层物理设备一样大小)</p>
<h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><p><strong>&lt;1&gt; 查看 vdo 列表</strong> ：<code>vdo list</code> （若vdo关闭，则该vdo不会出现在vdo列表中）<br><strong>&lt;2&gt; 关闭所有 vdo，关闭某个 vdo</strong> ：<code>vdo stop --all</code>   <code>vdo stop --name=?</code><br><strong>&lt;3&gt; 开启所有 vdo，开启某个 vdo</strong> ：<code>vdo start --all</code>  <code>vdo start --name=?</code></p>
<p><strong>&lt;4&gt; 查看 vdo 状态</strong> ：<code>vdo status</code>  <code>vdo status --name=?</code><br>@：VDO去重和压缩主要因为VDO卷中 Compression 和 Deduplication 两个工具，使用时使用 <code>vdo status</code> 确保为开启状态</p>
<p><strong>&lt;5&gt; 查看 vdo 的压缩功能是否正常开启</strong> ：<code>vdo status | grep Compression</code><br><strong>&lt;6&gt; 查看 vdo 的去重功能是否正常开启</strong> ：<code>vdo status | grep Deduplication</code></p>
<p><strong>&lt;7&gt; 查看 vdo 真实大小</strong> ：<code>vdostats --hu</code>  <code>vdostats --si</code><br>@：VDO有虚拟逻辑大小和真实物理大小之分，逻辑大小可以使用 <code>lsblk</code> &#x2F; <code>df -Th</code> &#x2F; <code>du -h</code> 等方式进行查看，而物理大小仅可使用 <code>vdostats</code> 进行查看；对于VDO卷而言，一般逻辑大小会比实际大小大很多，甚至远超磁盘大小；若一个VDO卷里存在多份重复文件，则从逻辑大小看来，使用量&#x2F;使用占比不断增高，而从物理大小看来，因为底部UDS去重模块会删除重复块副本，引用原始块，所以使用量只占一份，重复文件越多，节省空间占比越大。</p>
<h4 id="格式化和开机自动启动"><a href="#格式化和开机自动启动" class="headerlink" title="格式化和开机自动启动"></a>格式化和开机自动启动</h4><p><strong>&lt;1&gt; VDO卷格式化：</strong><br>1. 对于xfs文件系统格式化：<code>mkfs.xfs -K [VDO路径]</code><br>2. 对于ext文件系统格式化：<code>mkfs.ext? -E nodiscard [VDO路径]</code><br>@：在创建格式化文件系统时，默认丢弃块，设备丢弃块对于精简配置很有用，加快文件系统初始化；但是对于新的VDO卷，设置不丢弃可以不花费时间发送请求，他对未分配的块无影响，设置不立即丢弃块反而增快了命令的返回速度<br><strong>&lt;2&gt; &#x2F;etc&#x2F;fstab 文件开机自动开启 vdo</strong><br>当VDO设置开机自动挂载将信息写入&#x2F;etc&#x2F;fstab时，需要告诉系统在读取挂载文件的前一步需要开启VDO服务，否则若VDO服务无开启，则挂载失败导致启动异常，相关操作：添加字段组成  <code>[defaults,x-systemd.requires=vdo.service]</code></p>
<h3 id="三、LVM与VDO的关系"><a href="#三、LVM与VDO的关系" class="headerlink" title="三、LVM与VDO的关系"></a>三、LVM与VDO的关系</h3><p>当 LVM 与 VDO 结合，既能够动态调整空间大小，又能对空间进行压缩去重操作。当准备好所有磁盘分布情况后，只需要格式化最近一层的文件系统即可，如下图只需要格式化 VDO 的文件系统即可。<br><img src="/images/VDO1.png"><br><img src="/images/VDO2.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SAMBA</title>
    <url>/2025/01/01/SAMBA/</url>
    <content><![CDATA[<h3 id="一、安装samba工具"><a href="#一、安装samba工具" class="headerlink" title="一、安装samba工具"></a>一、安装samba工具</h3><p>1. 确保虚拟机有连接光盘（光盘存放真正软件源，yum包起链接作用）<br>2. 挂载光盘： mount &#x2F;dev&#x2F;sr0 &#x2F;mnt<br>3. 切换目录： cd &#x2F;etc&#x2F;yum.repos.d<br>4. 检查内部是否正常：ls &#x2F;etc&#x2F;yum.repos.d    cat &#x2F;etc&#x2F;yum.repos.d&#x2F;cdrom.repo    yum repolist -v.<br>5. 开始下载： yum install samba -y<br>6. 下载完成： which smbpasswd（查找有无此命令，有即工具已下载）<br> rpm -qa | grep samba（查找有无samba工具）<br><img src="/images/samba.png"></p>
<h3 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h3><p>工具名：samba<br>命令名：smbpasswd<br>服务名：smb</p>
<h3 id="三、命令"><a href="#三、命令" class="headerlink" title="三、命令"></a>三、命令</h3><h4 id="3-1-smbpasswd"><a href="#3-1-smbpasswd" class="headerlink" title="3.1 smbpasswd"></a>3.1 smbpasswd</h4><p>将 linux 用户添加为 samba 用户：<code>smbpasswd -a username</code><br>显式添加samba用户：<code>echo -e &quot;123\n123&quot; | smbpasswd -a username</code><br>删除samba用户：<code>smbpasswd -x username</code></p>
<h4 id="3-2-smbclient"><a href="#3-2-smbclient" class="headerlink" title="3.2 smbclient"></a>3.2 smbclient</h4><p>查看该主机下有什么共享目录：<code>smbclient -L [ipAddress]</code><br>使用samba用户查看share目录：<code>smbclient //ipAddress/share -U [username]%[password] -L</code><br>连接到共享：<code>smbclient //ipAddress/share -U [username]%[password]</code><br>连接后操作：<code>smbclient //ipAddress/share -U [username]%[password] -c [command]</code><br>上传文件到共享：<code>smbclient //ipAddress/share -U [username]%[password] -c &quot;put localfile remotefile&quot;</code><br>从共享中下载文件：<code>smbclient //ipAddress/share -U [username]%[password] -c &quot;get remotefile localfile&quot;</code></p>
<h4 id="3-3-smbmount"><a href="#3-3-smbmount" class="headerlink" title="3.3 smbmount"></a>3.3 smbmount</h4><p>从 samba 挂载到本地：<code>smbmount //ipAddress/share /mnt -o username=?,password=?</code><br>使用 mount.cifs 挂载：<code>mount.cifs //ipAddress/share /mnt -o username=?,password=?</code></p>
<h4 id="3-4-others"><a href="#3-4-others" class="headerlink" title="3.4 others"></a>3.4 others</h4><p>验证配置文件是否出错：<code>testparm [configuration file]</code><br>查看 samba 用户列表：<code>pdbedit -L</code><br>查看登录状态：<code>smbstatus</code></p>
<h3 id="四、配置文件-etc-samba-smb-conf"><a href="#四、配置文件-etc-samba-smb-conf" class="headerlink" title="四、配置文件 &#x2F;etc&#x2F;samba&#x2F;smb.conf"></a>四、配置文件 &#x2F;etc&#x2F;samba&#x2F;smb.conf</h3><p><code>[]</code>&#x3D;共享文件名<br><code>comment</code>&#x3D;说明<br><code>path</code>&#x3D;实际共享路径<br><code>public</code>&#x3D;yes&#x2F;no，是否公开<br><code>write list</code>&#x3D;user&#x2F;@group，可写用户列表，组要加@符号<br><code>read list</code>&#x3D;user&#x2F;@group可读用户列表<br><code>valid user</code>&#x3D;user&#x2F;@group有效用户<br><code>writable</code>&#x3D;yes&#x2F;no，是否全部可写<br><code>host allow</code>&#x3D;ip，白名单<br><code>host deny</code>&#x3D;ip，黑名单</p>
<h3 id="五、Samba与Selinux"><a href="#五、Samba与Selinux" class="headerlink" title="五、Samba与Selinux"></a>五、Samba与Selinux</h3><p>Selinux安全策略：<code>samba_enable_home_dirs</code><br>Selinux安全上下文：<code>samba_share_t</code></p>
<h3 id="六、断开连接："><a href="#六、断开连接：" class="headerlink" title="六、断开连接："></a>六、断开连接：</h3><p>访问方式：在文件资源系统中，打开：<code>\\ipAddress</code>，跳转登录界面<br><code>net use * /del</code> 断开连接<br><code>smbstatus</code> 查看服务状态<br><code>samba -x</code> 删除特定用户连接</p>
<h3 id="七、特殊配置"><a href="#七、特殊配置" class="headerlink" title="七、特殊配置"></a>七、特殊配置</h3><p>若在 windows 中连接不了 samba，无法打开登录对话框，在主配置文件的全局配置中，手动指定 samba 相互通信的协议版本，指定 NT1 可以兼容 Windows XP 系统之后的所有系统，编辑后重启 samba 服务即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client min protocol = NT1</span><br><span class="line">server min protocol = NT1</span><br></pre></td></tr></table></figure>

<hr>
<p>其他：<br>@：&#x2F;etc&#x2F;samba&#x2F;smb.conf中writable&#x3D;yes与write list是相冲突的，writable开启属于全部人可读，而write list是部分用户可读，固writable会覆盖write list<br>@：useradd -M创建系统用户且不设置默认家目录，无法登录，windows下无法查看自己的家目录<br>@：mount -o guest 使用选项guest常常挂载共享文件<br>@：配置完配置文件后，可以使用testparm命令对&#x2F;etc&#x2F;samba&#x2F;smb.conf文件检查语法，按enter确认<br>@：用户认证文件：&#x2F;var&#x2F;lib&#x2F;samba&#x2F;private&#x2F;passdb.tdb，存放samba用户与linux用户的映射关系，passdb.tdb是一个数据库文件；<br>@：TDB（Trivial Database）是 Samba 中常用的数据库格式之一，用于存储用户凭据、共享信息、锁定信息等。</p>
<hr>
<p>@：<a href="https://zybuluo.com/2303010148/note/2564937">部门级samba服务器</a><br>@：<a href="https://zybuluo.com/2303010148/note/2565072">企业级samba服务器</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH</title>
    <url>/2025/01/01/SSH/</url>
    <content><![CDATA[<h3 id="一、介绍："><a href="#一、介绍：" class="headerlink" title="一、介绍："></a>一、介绍：</h3><p>SSH(Secure Shell)是一个网络安全协议，用于多操作系统间的远程登录与服务，相对与Telnet明文传输而言，SSH是<strong>对传输内容进行了压缩</strong>，后在<strong>加密传送</strong>，<strong>非明文传送</strong>，更加安全可靠，提高传输速度<br><img src="/images/ssh1.png"><br><img src="/images/ssh2.png"></p>
<h3 id="二、配置文件："><a href="#二、配置文件：" class="headerlink" title="二、配置文件："></a>二、配置文件：</h3><p>服务端程序：<code>/usr/bin/sshd</code>，服务端配置文件：<code>/etc/ssh/sshd_config</code><br>客户端程序：<code>/usr/bin/ssh</code>， 客户端配置文件：<code>/etc/ssh/ssh_config</code></p>
<h3 id="三、-etc-ssh-sshd-config-主要配置字段："><a href="#三、-etc-ssh-sshd-config-主要配置字段：" class="headerlink" title="三、&#x2F;etc&#x2F;ssh&#x2F;sshd_config 主要配置字段："></a>三、&#x2F;etc&#x2F;ssh&#x2F;sshd_config 主要配置字段：</h3><p><code>PermitRootLogin no</code> 是否允许root登录<br><code>PasswordAuthentication yes</code> 是否允许密码登录<br><code>PubkeyAuthentication yes</code> 是否允许公钥登录<br><code>AllowUsers</code>，<code>AllowGroups</code> 白名单<br><code>DenyUsers</code>，<code>DenyGroups</code> 黑名单</p>
<h3 id="四、其他文件："><a href="#四、其他文件：" class="headerlink" title="四、其他文件："></a>四、其他文件：</h3><p>Client机私钥文件：<code>~/.ssh/id_rsa</code><br>Client机公钥文件：<code>~/.ssh/id_rsa.pub</code><br>Client机信任主机文件：<code>~/.ssh/known_hosts</code><br>Server机接收的公钥文件：<code>~/.ssh/authorized_keys</code></p>
<h3 id="五、相关命令："><a href="#五、相关命令：" class="headerlink" title="五、相关命令："></a>五、相关命令：</h3><p>生成密钥对：<code>ssh-keygen</code><br>发送公钥：<code>ssh-copy-id  username@ip_address 密码登录：</code>ssh username@IpAddress<code>， </code>ssh -l username IpAddress&#96;</p>
<h3 id="六、其他："><a href="#六、其他：" class="headerlink" title="六、其他："></a>六、其他：</h3><ul>
<li>client已经对server设置了ssh免密登录，如何再次使用密码登录？<br>禁止免密登录，即使用密码登录：<code>ssh -o PubkeyAuthentication=no user@IpAddress</code><br>选择登录方式为密码登录：<code>ssh -o PreferredAuthentications=password user@IpAddress</code></li>
<li>ssh远程执行命令<br><code>ssh user@IpAddress [command]</code></li>
<li>如何对ssh配置文件进行备份？<br>复制 <code>.bak</code> 备份文件在同一目录下：<code>cp /etc/ssh/sshd_config&#123;,.bak&#125;</code></li>
<li><code>~/.ssh</code> 目录文件权限必须为 700，除了自己，其他人没有任何权限，否则 ssh 服务器拒绝登录</li>
<li>服务器上的 <code>~/.ssh/authorized_keys</code> 权限必须为 600</li>
</ul>
<h3 id="七、scp"><a href="#七、scp" class="headerlink" title="七、scp"></a>七、scp</h3><p><strong>scp命令——secure copy</strong><br>&lt;1&gt; scp命令适合传送众多的小型数据，基于ssh的远程文件拷贝功能，享有与ssh相同级别的数据加密。cp命令仅用于本机内部文件拷贝与传输，scp适用于不同的服务器之间文件拷贝。<br>&lt;2&gt; 格式：<code>scp 选项 源头地址 目标地址</code><br><strong>下载&#x2F;从远端传到本地：</strong> <code>scp [option]  [user@IP_address:path]  [local_path]</code><br><strong>上传&#x2F;从本地传到远端：</strong> <code>scp [option]  [local_path]  [user@IP_address:path]</code><br>&lt;3&gt; 选项：<code>-r</code> 递归；<code>-q</code> 精简模式 不显示进度条；<code>-p</code> 保持原属性；<code>-v</code> 显示传输细节；<code>-P</code> 指定端口号；<code>-C</code> 压缩传输；</p>
<h3 id="八、sftp"><a href="#八、sftp" class="headerlink" title="八、sftp"></a>八、sftp</h3><p><strong>sftp命令——secure file transfer protocol</strong><br>&lt;1&gt; sftp是交互性命令，也是基于ssh服务的基本功能，sftp相当于在两台主机之间建立桥梁，可以对主机和服务机做操作<br>&lt;2&gt; FTP与SFTP之间的不同：<br>FTP是使用TCP&#x2F;IP协议的，传输效率高，使用明文传输，windows下较多使用FTP，FTP也较适用于内网；而SFTP属于SSH协议的一部分，与SSH同根同源，使用加密传输，传输效率低，较适用于与外网建立连接，确保数据机密性与完整性。<br>&lt;3&gt; 格式：</p>
<ul>
<li><strong>登录到服务端：</strong> <code>ssh user@IP_address  (-P port)</code></li>
<li><strong>使用子命令传输</strong><br><strong>下载：</strong> <code>get 主机路径 本地路径</code><br><strong>上传：</strong> <code>put 本地路径 主机路径</code><br><code>普通命令</code>：作用在服务端<br><code>l+普通命令</code>：作用在本地（有时有的命令无法使用，可以使用 <code>!+command</code> 方式，<code>!</code> 叹号在这里表示逃离回本地shell执行）</li>
</ul>
<h3 id="九、rsync"><a href="#九、rsync" class="headerlink" title="九、rsync"></a>九、rsync</h3><p><strong>rsync命令——remote synchronize</strong><br>&lt;1&gt; rsync最大的特点在于可以增量传输，对已存在的文件不会进行二次传输，减少数据冗余。rsync在传输同一份文件时，第一次进行全部复制，后在复制属于增量传输，仅对新增的改变的进行传输，原存在的不再二次传输。<br>&lt;2&gt; 格式：<code>rsync  [command]  [源头地址]  [目标地址]</code><br>常用选项：<code>-r</code> 递归； <code>-z</code> 压缩；<code>-a</code> 归档； <code>-v</code> 展示详细内容；<code>-q</code> 精简输出；<br>配置文件：&#x2F;etc&#x2F;rsyncd.conf</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Selinux</title>
    <url>/2024/12/30/Selinux/</url>
    <content><![CDATA[<h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p>LINUX传统访问控制标准是DAC自主访问控制，这种情况下进程以一个UID或者一个SUID运行，拥有该角色的权限。而MAC强制访问控制中，策略和安全上下文决定了主体能够访问哪个对象。<br><img src="/images/selinux1.png"></p>
<h3 id="二、工作模式"><a href="#二、工作模式" class="headerlink" title="二、工作模式"></a>二、工作模式</h3><p><code>Enforcing</code>：强制模式，基于策略规则拒绝主体对目标的访问。<br><code>Permissive</code>：宽容模式，属于旁观者状态，不会拒绝访问，但是会把信息记录到日志中。<br><code>Disabled</code>：关闭禁用selinux。</p>
<h3 id="三、工作策略"><a href="#三、工作策略" class="headerlink" title="三、工作策略"></a>三、工作策略</h3><p><code>Targeted</code>：默认模式，对大部分网络服务进程进行管理<br><code>Minimum</code>：对选定的网络服务进行管理<br><code>Mls</code>：多级高级安全保护</p>
<h3 id="四、配置文件："><a href="#四、配置文件：" class="headerlink" title="四、配置文件："></a>四、配置文件：</h3><p>&#x2F;etc&#x2F;selinux&#x2F;config</p>
<h3 id="五、查询selinux状态"><a href="#五、查询selinux状态" class="headerlink" title="五、查询selinux状态"></a>五、查询selinux状态</h3><p><code>sestatus (-v)</code> -v显示详细内容<br><code>getenforce</code> </p>
<h3 id="六、设置selinux开关"><a href="#六、设置selinux开关" class="headerlink" title="六、设置selinux开关"></a>六、设置selinux开关</h3><ul>
<li>临时开关：setenforce 1&#x2F;0 （1表示开启0表示关闭）</li>
<li>永久修改：修改配置文件&#x2F;etc&#x2F;selinux&#x2F;config（重启系统生效）</li>
</ul>
<h3 id="七、安全上下文"><a href="#七、安全上下文" class="headerlink" title="七、安全上下文"></a>七、安全上下文</h3><p>Selinux为每个文件&#x2F;目录&#x2F;进程服务提供安全上下文信息，这些信息标签作为可否访问文件的依据</p>
<p><strong>1. 查看</strong><br>文件&#x2F;目录查看安全上下文：<code>ls -Z</code><br>进程服务查看安全上下文：<code>ps -auxZ</code><br>显示内容：<code>[user] [role] [type] [degree] [file-name]</code><br>（其中Z选项都是查看安全上下文的子选项）<br>selinux进程访问时，会四配与日标文件的安全上下文中的类型type字段，匹配成功进行访问，匹配失败根据工作模式进行相对应操作</p>
<p><strong>2. 临时性修改安全上下文信息chcon</strong><br>由于chcon是临时性操作，固常用于调试，重启后即失效<br>格式：<code>chcon [选项] [文件/目录]</code><br>常用选项：-R递归；-t指定类型；-u指定用户；-r指定角色<br>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归更改目录的selinux类型</span></span><br><span class="line"><span class="built_in">chcon</span> -R -t httpd_sys_content_t /var/www/html/</span><br><span class="line"><span class="comment"># 更改文件的selinux用户</span></span><br><span class="line"><span class="built_in">chcon</span> -u user /filename</span><br><span class="line"><span class="comment"># 恢复文件的默认selinux类型</span></span><br><span class="line"><span class="built_in">chcon</span> -l /var/www/html/index.html</span><br><span class="line"><span class="comment"># 查看文件的安全上下文</span></span><br><span class="line"><span class="built_in">chcon</span> -Z /var/www/html/index.html</span><br></pre></td></tr></table></figure>

<p><strong>3. 永久性&#x2F;修改默认安全上下文信息 semanage</strong><br>semanage是一个管理selinux的主命令，其中包含一些子命令，每个子命令都有自己的选项和功能<br>通过man semanage查看关于semanage的使用手册说明，也可以通过semanage –help和semanage -h查看使用 说明的简短信息<br>修改类型标签：<code>semanage fcontext [选项] [路径(/.*)? ]</code><br>常用选项：-a添加&#x2F;-m修改&#x2F;-d删除&#x2F;-l查看&#x2F;-t指定类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 持久修改目录及其子文件上下文类型</span></span><br><span class="line">semanage fcontext -a -t httpd_sys_content_t <span class="string">&#x27;/var/www/html(/.*)?&#x27;</span></span><br><span class="line"><span class="comment"># 查看所有文件的上下文规则</span></span><br><span class="line">semanage fcontext -l</span><br></pre></td></tr></table></figure>

<p><strong>4. restorecon恢复安全上下文</strong><br>格式：<code>restorecon [选项] [文件/目录]</code><br>常用选项：-R递归；-v显示细节<br>在临时修改后，使用restorecon重置删除上下文<br>在永久修改后，使用restorecon保存上下文配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用更改</span></span><br><span class="line">restorecon -R /var/www/html/</span><br></pre></td></tr></table></figure>

<p><strong>5. 复制与移动对文件安全上下文的继承效果</strong><br>复制文件，文件安全上下文信息被更改，继承了新的目录的安全上下文<br>移动文件，保留了原有的安全上下文信息</p>
<p><strong>6. 常用上下文</strong><br>WEB端用户家目录：<code>httpd_user_content_t</code><br>WEB端目录：<code>httpd_sys_content_t</code><br>WEB端可读目录：<code>httpd_sys_rw_content_t</code><br>SAMBA服务：<code>samba_share_t</code></p>
<h3 id="八、安全策略"><a href="#八、安全策略" class="headerlink" title="八、安全策略"></a>八、安全策略</h3><p>Selinux策略辅助于selinux上下文匹配，二者结合对于进程访问主体做管控</p>
<p><strong>1. 策略管理常用命令</strong><br>设置策略开关：<code>setsebool  (-P)  policy_name  on/off(1/0)</code> ，-P为永久设置，立即生效<br><img src="/images/SeBoolean.png" alt="图片"><br><strong>2. 常用策略</strong><br>允许 HTTPD 访问用户的主目录：<code>httpd_enable_homedirs</code><br>允许 Samba 共享用户的主目录：<code>samba_enable_home_dirs</code><br>允许 Samba 共享目录时具有读写权限：<code>samba_export_all_rw</code><br>允许 HTTPD进程访问由其他服务控制的文件：<code>httpd_unified</code><br>允许 NFS 共享所有文件系统并且只读：<code>nfs_export_all_ro</code><br>允许 HTTPD 进程进行网络连接：<code>httpd_can_network_connect</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动HTTPD服务访问网络</span></span><br><span class="line">semanage boolean -m --on httpd_can_network_connect</span><br><span class="line"><span class="comment"># 允许NFS共享只读所有文件系统</span></span><br><span class="line">setsebool -P nfs_export_all_ro on </span><br></pre></td></tr></table></figure>



<h3 id="九、端口"><a href="#九、端口" class="headerlink" title="九、端口"></a>九、端口</h3><p>查看所有端口：<code>semanage port -l</code><br>添加端口：<code>semanage port -a -t &lt;type&gt; -p &lt;protocol&gt; &lt;port_number&gt;</code><br>删除端口：<code>semanage port -d -t &lt;type&gt; -p &lt;protocol&gt; &lt;port_number&gt;</code><br>常用端口上下文：<code>http_port_t</code> <code>ssh_port_t</code><br>选项：<code>-a</code> 新增规则，<code>-t</code> 指定端口类型，<code>-p</code> 指定协议，最后添加端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为8080端口设置类型用于HTTP服务</span></span><br><span class="line">semanage port -a -t http_port_t -p tcp 8080</span><br><span class="line"><span class="comment"># 删除8080端口的selinux类型</span></span><br><span class="line">semanage port -d -t http_port_t -p tcp 8080</span><br><span class="line"><span class="comment"># 查看所有selinux端口规则</span></span><br><span class="line">semanage port -l</span><br></pre></td></tr></table></figure>

<h3 id="十、用户"><a href="#十、用户" class="headerlink" title="十、用户"></a>十、用户</h3><p><code>semanage login</code> 用于管理系统用户关联的 selinux 用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将系统用户titi映射到selinux用户user_u</span></span><br><span class="line">semanage login -a -s user_u titi</span><br><span class="line"><span class="comment"># 列出所有用户映射</span></span><br><span class="line">semanage login -l</span><br></pre></td></tr></table></figure>
<p><img src="/images/selinux2.png"></p>
<h3 id="十一、日志追踪"><a href="#十一、日志追踪" class="headerlink" title="十一、日志追踪"></a>十一、日志追踪</h3><p>selinux系统相关安全信息主要存放在<code>/var/log/audit/audit.log</code>下，有些分布在<code>/var/log/messages</code>公共目录下</p>
<p>由于观察selinux拦截的系统信息时，查看不方便，多使用<code>sealert</code>，<code>audit2why</code>和<code>audit2allow</code>工具进行自动分析，后存放至一个文件下，需要查看时执行命令进行更新分析。</p>
<p>格式：<br><code>sealert -a /var/log/audit/audit.log &gt; name.txt </code>（-a: analyse)<br><code>audit2why &lt; /var/log/audit/audit.log &gt; name.txt</code><br><code>audit2allow -a /var/log/audit/audit.log &gt; name.txt</code><br>下载工具包：yum install -y setroubleshoot* 和 yum install -y policycoreutils*</p>
<h3 id="十二、有关审计日志"><a href="#十二、有关审计日志" class="headerlink" title="十二、有关审计日志"></a>十二、有关审计日志</h3><p>若audit审计工具在运行，selinux的拒绝信息被写入&#x2F;var&#x2F;log&#x2F;audit&#x2F;audit.log中<br>服务名：<code>auditd</code>；查看状态：systemctl status auditd 或 auditctl -s</p>
<h3 id="十三、常见报错"><a href="#十三、常见报错" class="headerlink" title="十三、常见报错"></a>十三、常见报错</h3><p>NOT FOUND：文件路径找不到，路径错误<br>Forbidden：权限错误</p>
<h3 id="十四、访问出错排查"><a href="#十四、访问出错排查" class="headerlink" title="十四、访问出错排查"></a>十四、访问出错排查</h3><p>1，网络是否通常（内网和虚拟机，虚拟机内网ping外网）<br>2，DAC权限是否可以操作<br>3，防火墙firewalld是否关闭<br>4，Apache&#x2F;samba&#x2F;auditd是否开启（关乎是否能上网，是否能window与linux远程登陆，是否记录审计日志）<br>5，进程与文件是否属于同一个域<br>6，策略方案getsebool -a | grep<br>7，http 端口</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN</title>
    <url>/2024/12/31/VPN/</url>
    <content><![CDATA[<h2 id="一、-PPTP-协议"><a href="#一、-PPTP-协议" class="headerlink" title="一、 PPTP 协议"></a>一、 PPTP 协议</h2><p>点对点隧道协议，Point-to-Point Tunneling Protocol，是实现<a href="https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91" title="虚拟专用网">虚拟专用网</a>（VPN）的一种方式。<br>PPTP 使用<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" title="传输控制协议">传输控制协议</a>（TCP）建立控制通道以发送控制命令，并利用<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E8%B7%AF%E7%94%B1%E5%B0%81%E8%A3%85" title="通用路由封装">通用路由封装</a>（GRE）通道封装<a href="https://zh.wikipedia.org/wiki/%E7%82%B9%E5%AF%B9%E7%82%B9%E5%8D%8F%E8%AE%AE" title="点对点协议">点对点协议</a>（PPP）数据包以发送数据。</p>
<h2 id="二、-PPTP-服务"><a href="#二、-PPTP-服务" class="headerlink" title="二、 PPTP 服务"></a>二、 PPTP 服务</h2><h4 id="2-1-基础信息："><a href="#2-1-基础信息：" class="headerlink" title="2.1 基础信息："></a>2.1 基础信息：</h4><p>下载安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y ppp </span><br><span class="line">wget http://dl.fedoraproject.org/pub/archive/epel/7/x86_64/Packages/p/pptpd-1.4.0-2.el7.x86_64.rpm</span><br><span class="line">yum install -y pptpd-1.4.0-2.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p>端口：1723&#x2F;tcp</p>
<h4 id="2-2-防火墙"><a href="#2-2-防火墙" class="headerlink" title="2.2 防火墙"></a>2.2 防火墙</h4><p><code>--add-port=1723/tcp</code>，<code>--add-protocol=gre</code>，<code>--add-service=pptp</code>，<code>--zone=trusted --add-interface=ppp+</code>（该命令的作用是将所有以 ppp 开头的接口，例如 ppp0、ppp1 等添加到 trusted 区域，- –add-interface 用来将一个特定的网络接口添加到指定的区域中。ppp+ 是一个接口的名称。这里的 ppp+ 是一个匹配模式，ppp 通常是点对点协议 PPP 接口的名称，常见于拨号连接、VPN、拨号调制解调器等）</p>
<h4 id="2-3-主配置文件：-etc-pptpd-conf"><a href="#2-3-主配置文件：-etc-pptpd-conf" class="headerlink" title="2.3 主配置文件：&#x2F;etc&#x2F;pptpd.conf"></a>2.3 主配置文件：&#x2F;etc&#x2F;pptpd.conf</h4><p>相关字段：<br>option 配置PPTP连接。选项文件包含了有关连接的各种配置设置，例如认证方式、加密方式、DNS服务器等<br>localip 指定了PPTP服务器在VPN连接中使用的本地IP地址<br>remoteip 指定了PPTP服务器用于分配给VPN客户端的IP地址范围</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">option /etc/ppp/options.pptpd</span><br><span class="line">localip &lt;PPTP服务器的IP地址&gt;</span><br><span class="line">remoteip &lt;分配给客户端的IP地址范围&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-4-用户配置文件：-etc-ppp-chap-secrets"><a href="#2-4-用户配置文件：-etc-ppp-chap-secrets" class="headerlink" title="2.4 用户配置文件：&#x2F;etc&#x2F;ppp&#x2F;chap-secrets"></a>2.4 用户配置文件：&#x2F;etc&#x2F;ppp&#x2F;chap-secrets</h4><p>添加用户名、服务器、密码和IP地址的条目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Secrets for authentication using CHAP</span></span><br><span class="line"><span class="comment"># client        server  secret                  IP addresses</span></span><br><span class="line">  user1         *       password1               *</span><br><span class="line">  user2         *       password2               *</span><br></pre></td></tr></table></figure>
<h4 id="2-5-开启linux的IP转发功能"><a href="#2-5-开启linux的IP转发功能" class="headerlink" title="2.5 开启linux的IP转发功能"></a>2.5 开启linux的IP转发功能</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">sysctl -p /proc/sys/net/ipv4/ip_forward	   <span class="comment"># 刷新配置生效</span></span><br></pre></td></tr></table></figure>
<h4 id="2-6-开启-PPTP-的穿透功能"><a href="#2-6-开启-PPTP-的穿透功能" class="headerlink" title="2.6 开启 PPTP 的穿透功能"></a>2.6 开启 PPTP 的穿透功能</h4><p>这个命令用于加载 ip_nat_pptp 内核模块，以支持PPTP的网络地址转换（NAT）。<br>PPTP协议本身需要特殊的NAT处理来正确地转发PPTP通信中的控制和数据流量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">modprobe ip_nat_pptp</span><br><span class="line">lsmod | grep pptp</span><br></pre></td></tr></table></figure>
<h4 id="2-7-添加-pptp-服务的-xml-文件"><a href="#2-7-添加-pptp-服务的-xml-文件" class="headerlink" title="2.7 添加 pptp 服务的 xml 文件"></a>2.7 添加 pptp 服务的 xml 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/firewalld/services</span><br><span class="line"><span class="built_in">cp</span> -p http.xml pptp.xml</span><br><span class="line">vim pptp.xml</span><br><span class="line">&lt;service&gt;</span><br><span class="line">	...</span><br><span class="line">	&lt;port protocol=<span class="string">&quot;tcp&quot;</span> port=<span class="string">&quot;1723&quot;</span> /&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/12/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>shell</title>
    <url>/2025/01/06/shell/</url>
    <content><![CDATA[<h3 id="一、解释器"><a href="#一、解释器" class="headerlink" title="一、解释器"></a>一、解释器</h3><p>shell脚本开头定义解释器，一般为：<code>/bin/bash</code> 或者 <code>/bin/sh</code></p>
<h3 id="二、参数"><a href="#二、参数" class="headerlink" title="二、参数"></a>二、参数</h3><p><code>$#</code> 参数个数<br><code>$0</code> shell脚本自身文件名<br><code>$1</code> 第一个参数，以此类推<br><code>$@</code> 所有参数</p>
<h3 id="三、常用逻辑判断"><a href="#三、常用逻辑判断" class="headerlink" title="三、常用逻辑判断"></a>三、常用逻辑判断</h3><table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>中文</th>
</tr>
</thead>
<tbody><tr>
<td>-eq</td>
<td>Equal to</td>
<td>等于</td>
</tr>
<tr>
<td>-ne</td>
<td>Not equal to</td>
<td>不等于</td>
</tr>
<tr>
<td>-gt</td>
<td>Greater than</td>
<td>大于</td>
</tr>
<tr>
<td>-ge</td>
<td>Greater than or equal to</td>
<td>大于等于</td>
</tr>
<tr>
<td>-lt</td>
<td>Less than</td>
<td>小于</td>
</tr>
<tr>
<td>-le</td>
<td>Less than or equal to</td>
<td>小于等于</td>
</tr>
</tbody></table>
<h3 id="四、shell语言基础循环-for结构"><a href="#四、shell语言基础循环-for结构" class="headerlink" title="四、shell语言基础循环 for结构"></a>四、shell语言基础循环 for结构</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下两种方式输出结果相同</span></span><br><span class="line">[sziit@2303010148 ~]$ for name in user01 user02 user03; do echo $&#123;name&#125;; done</span><br><span class="line">[sziit@2303010148 ~]$ for name in &#123;01..03&#125;; do echo user$&#123;name&#125;; done</span><br><span class="line">user01</span><br><span class="line">user02</span><br><span class="line">user03</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下两种方式输出结果相同</span></span><br><span class="line">[sziit@2303010148 ~]$ for name in `cat UserList.txt`; do echo stu$&#123;name&#125;; done</span><br><span class="line">[sziit@2303010148 ~]$ for name in $(cat UserList.txt); do echo stu$&#123;name&#125;; done</span><br><span class="line">stu2303010148</span><br><span class="line">stu2303010149</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="五、shell语言基础分支-case结构"><a href="#五、shell语言基础分支-case结构" class="headerlink" title="五、shell语言基础分支 case结构"></a>五、shell语言基础分支 case结构</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ id=123</span><br><span class="line">[sziit@2303010148 ~]$ case $&#123;id&#125; in</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">    123 | 321)    <span class="comment"># | 属于或运算</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">        <span class="built_in">echo</span> <span class="string">&quot;匹配 123&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">        ;;        <span class="comment"># ; 分号匹配一个代码块的结尾</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">    456 | 654)</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">        <span class="built_in">echo</span> <span class="string">&quot;匹配 456&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">        ;;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">    *)</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">        <span class="built_in">echo</span> <span class="string">&quot;没有匹配项&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">        ;;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="keyword">esac</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配 123</span></span><br></pre></td></tr></table></figure>

<h3 id="六、shell语言基础分支-if结构"><a href="#六、shell语言基础分支-if结构" class="headerlink" title="六、shell语言基础分支 if结构"></a>六、shell语言基础分支 if结构</h3><p><code>-z</code> 判断字符串是否为空<br><code>-n</code> 判断字符串是否非空<br><code>==</code> 判断字符串是否相等<br><code>-e</code> 文件是否存在<br><code>-f</code> 文件是否存在且为普通文件<br><code>-d</code> 判断文件是否存在且为目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断两个数字是否相等</span></span><br><span class="line">[sziit@2303010148 ~]$ num1=1; num2=1</span><br><span class="line">[sziit@2303010148 ~]$ if [ $&#123;num1&#125; -eq $&#123;num2&#125; ]; then echo &#x27;true&#x27;; else echo &#x27;false&#x27;; fi</span><br><span class="line">true</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断字符串是否为空</span></span><br><span class="line">[sziit@2303010148 ~]$ str=&quot;&quot;</span><br><span class="line">[sziit@2303010148 ~]$ if [ -z &quot;$str&quot; ]; then echo &#x27;Null string.&#x27;; else echo &#x27;The string is not empty.&#x27;; fi</span><br><span class="line">Null string.</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是否存在</span></span><br><span class="line">[sziit@2303010148 ~]$ touch testFile</span><br><span class="line">[sziit@2303010148 ~]$ filepath=&#x27;/home/sziit/testFile&#x27;</span><br><span class="line">[sziit@2303010148 ~]$ if [ -e &quot;$filepath&quot; ]; then echo &#x27;file already exists.&#x27;; else echo &#x27;file does not exist.&#x27;; fi</span><br><span class="line">file already exists.</span><br></pre></td></tr></table></figure>

<h3 id="七、shell语言变量的定义与截取"><a href="#七、shell语言变量的定义与截取" class="headerlink" title="七、shell语言变量的定义与截取"></a>七、shell语言变量的定义与截取</h3><blockquote>
<p><code>variable=value</code> 定义变量，等号左右无空格<br><code>$&#123;arr:idnex:length&#125;</code> 从index索引位选取长度为length的元素<br><code>$&#123;arr:(-index)&#125;</code> 选取倒数多少个索引位</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ id=123456789</span><br><span class="line">[sziit@2303010148 ~]$ echo $&#123;id&#125;</span><br><span class="line">123456789</span><br><span class="line">[sziit@2303010148 ~]$ echo $&#123;id:2:3&#125;    </span><br><span class="line">345</span><br><span class="line">[sziit@2303010148 ~]$ echo $&#123;id:(-4)&#125;</span><br><span class="line">6789</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>文件操作</title>
    <url>/2025/01/04/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="一、文件基础操作命令"><a href="#一、文件基础操作命令" class="headerlink" title="一、文件基础操作命令"></a>一、文件基础操作命令</h3><p><strong>进入主目录</strong> ： <code>cd</code><br><strong>查看当前目录</strong>： <code>pwd</code><br><strong>查看当前目录下的文件</strong>： <code>ls</code>，<code>ls -l</code>，<code>ls -a</code>， <code>ls -ld</code></p>
<p><strong>创建文件&#x2F;文件夹&#x2F;目录</strong>： <code>touch</code> 命令创建文件，<code>mkdir</code> 命令创建文件夹创建目录<br><strong>输出内容到文件中</strong>： <code>echo</code> 命令   <code> echo 内容 &gt;/&gt;&gt; 文件</code>，&gt;直接覆盖内容，&gt;&gt;表示追加定向</p>
<p><strong>显示查看文件内容</strong>： <code>cat+文件名</code><br><strong>查看大型文件01</strong>： <code>more+文件名</code><br>cat比较适合打开小型文件，一次性全显示出来，more适合查看打开大型文件，从头开始展示文件，以分屏展示，百分比进行显示内容调节，直接从顶部开始分页显示，左下角是显示进度百分比，可向后浏览，按enter进行一行一行翻，按空格进行一页一页翻，按Q退出此界面<br><strong>查看大型文件02</strong>： <code>less+文件名</code><br>按键盘上下箭头上下拖动浏览，前后均可浏览，按Q键退出<br><strong>查看文件默认前十行</strong>： <code>head</code>，<code>head -5</code> 查看前五行<br><strong>查看文件默认后十行</strong>： <code>tail</code>，<code>tail -5</code> 查看后五行</p>
<p><strong>在系统内查找文件路径</strong>： <code>find 寻找地址 -name 文件名</code><br><strong>在文件中搜索有无此关键词</strong>： <code>grep+关键词词条+目标路径</code></p>
<p><strong>复制</strong>： <code>cp+源头地址+目标地址 </code>（-r 递归<br><strong>移动</strong>： <code>mv+源头地址+目标地址</code></p>
<p><strong>切换目录</strong>：  <code>cd+目录</code><br><strong>返回上层目录</strong>： <code>cd ..</code><br><strong>返回当前目录</strong>： <code>cd .</code><br><strong>返回家目录</strong>： <code>cd+空格</code> 或者 <code>cd ~</code></p>
<p><strong>删除</strong>： （没有强制删除的话会提醒是否删除该文件？输入yes即可）<br>删除文件：<code>rm 文件名</code><br>强制删除文件：<code>rm -f 文件名</code><br>删除文件夹：<code>rm -r 文件夹</code><br>强制删除文件夹：<code>rm -rf 文件夹</code></p>
<p><strong>创建递归文件</strong>：<br>创建文件夹：<code>mkdir</code><br>创建递归文件：<code>mkdir -p</code>（此处p表示parent，父子关系的多层文件）<br>递归查看opt文件：<code>ls -R /opt</code><br><strong>创建链接文件</strong>： <code>In -s</code> 源头链接 目标地址<br><strong>同时创建多个目录</strong>： 使用<code>mkdir</code>命令，中间用 <em>空格</em> 隔开即可</p>
<p><strong>命令别名</strong>：<code>alias+别名=”命令名”</code><br>输入alias查看别名列表</p>
<p><strong>统计文件大小</strong>： <code>du+选项+文件路径</code><br>s显示该目录总大小，h表示显示单位</p>
<p><strong>通配符</strong>：<br>代表一个字符：<code>?</code><br>代表两个字符：<code>??</code><br>代表任意个字符：<code>*</code><br>匹配范围内的字符：<code>[]</code>中括号内用<code>-</code>相连，示例：<code>[1-3]</code><br>匹配字符集合：<code>&#123;&#125;</code>大括号内用 <code>,</code> 隔开，示例：<code>&#123;1,4&#125;</code></p>
<h3 id="二、文件查找和压缩"><a href="#二、文件查找和压缩" class="headerlink" title="二、文件查找和压缩"></a>二、文件查找和压缩</h3><h4 id="1-find"><a href="#1-find" class="headerlink" title="1. find"></a>1. find</h4><p>格式：<code>find 路径 选项 内容</code><br><img src="/images/find.png"><br><strong>A 基础操作</strong><br>使用通配符搭配-name选项进行查找：<code>find / -name grub??</code><br>查找在&#x2F;etc下五天内被访问过的文件：<code>find /etc -atime -5</code><br>查找&#x2F;etc下所有大小为10M的文件：<code>find /etc -size +10</code><br>查找&#x2F;home 下yhx用户的所有文件：<code>find /home -user yhx</code><br>文件名不分大小查找：<code>find / -iname abc</code><br><strong>B 查找并操作</strong><br>格式： <code>find 路径 选项 (-print) -exec (-ok) 命令 &#123;&#125; \;</code><br>作用： -exec 的作用类似于管道符，把前面用find命令找出来的所有文件传递到后面做操作<br>其中{}代表占位符，指前面搜索到的文件 \；是结尾符<br>注意： 结尾符 ; 前面一定要有空格与前面内容隔开<br>注意：删除文件时，为避免程序出错等问题，删除时最好使用具有交互性指令，更加安全保险，两种方式如下：<br>【find -ok】ok选项和exec选项雷同，ok选项具有交互性：<code>find /home -name &#39;data*&#39; -ok rm -rf &#123;&#125; \;</code><br>【find -exec rm -i】rm -i选项在删除时也会弹出提示文本：<code>find /home -name &#39;data*&#39; -exec rm -i &#123;&#125; \;</code></p>
<h4 id="2-grep"><a href="#2-grep" class="headerlink" title="2. grep"></a>2. grep</h4><p>格式：<code>grep 选项 关键词 目标文件</code><br>选项：<br><code>-i</code> 查找时忽略大小<br><code>-c</code> 返回这个关键词出现的次数（一行多个只有效一个）<br><code>-n</code> 输出时一并输出行号<br><code>-v</code> 反选-返回没有这个关键词的行<br>特殊通配符： <code>^</code>字符——返回以这个字符开头的    字符<code>$</code>返回以这个字符结尾的</p>
<h4 id="3-wc"><a href="#3-wc" class="headerlink" title="3. wc"></a>3. wc</h4><p>格式：<code>wc [选项] 路径</code><br>选项：<br>-l 只显示此路径的行数（lines）<br>-w 只显示这个文件有多少单词&#x2F;字符串（words）<br>-c 只显示这个文件有多少字节（bytes）<br>-m 只显示这个文件有多少字符（chars）</p>
<h4 id="4-tar"><a href="#4-tar" class="headerlink" title="4. tar"></a>4. tar</h4><p>格式：<code>[tar] [选项] [打包/压缩/解压后的文件名] [被打包的文件]</code><br>常用搭配：<br>（1）使用gzip 工具，<code>tar -czvf /压缩后的文件 /被打包压缩的文件</code><br>（2）使用 bzip2 工具，<code>tar -cjvf /压缩后的文件 /被打包压缩的文件</code><br>注意：压缩时，如果有多个目录，用空格隔开<br>压缩时性能对比：压缩速度 gzip &gt; bzip2<br>压缩时间 bzip2 &gt; gzip<br><img src="/images/tar.png"></p>
<h4 id="5-zip"><a href="#5-zip" class="headerlink" title="5. zip"></a>5. zip</h4><p>压缩格式：<code>zip 压缩后名称 文件</code><br>常用命令：<br><code>zip -r</code> 递归压缩，同时压缩目录<br><code>zip -d</code> 指定解压路径<br>解压格式：<code>unzip 文件 (-d) 解压路径</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>代理</title>
    <url>/2024/12/31/%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、Proxy-代理和-NAT-地址转换的区别"><a href="#一、Proxy-代理和-NAT-地址转换的区别" class="headerlink" title="一、Proxy 代理和 NAT 地址转换的区别"></a>一、Proxy 代理和 NAT 地址转换的区别</h2><p><strong>NAT：</strong> 将一个内网 IP 映射为一个公网 IP 才可访问公网，不存在缓存加速功能，适用于小型网络如家庭路由器<br><strong>Proxy：</strong> 相当于一个局域网的出入口，代理服务器拥有一个公网 IP，所有内网 IP 将数据包发送给代理服务器，代理服务器接收数据包后进行转发到公网中；代理服务器因为频繁接收多个请求，会将某些内网 IP 频繁访问的数据进行缓存，每一个生命周期 TTL 过后进行一次更新</p>
<h2 id="二、正向代理、透明代理与反向代理"><a href="#二、正向代理、透明代理与反向代理" class="headerlink" title="二、正向代理、透明代理与反向代理"></a>二、正向代理、透明代理与反向代理</h2><h4 id="2-1-正向代理："><a href="#2-1-正向代理：" class="headerlink" title="2.1 正向代理："></a>2.1 正向代理：</h4><p>正向代理服务器充当了客户端和服务端之间的中介，客户端无法直接发送数据到达服务端，在客户端需要设置代理服务器的 IP 和端口，使用正向代理服务器去发送数据，可以有效保护真实的客户端地址，向服务端隐藏了客户端地址。</p>
<ul>
<li>客户端向代理服务器发送请求。</li>
<li>代理服务器接收请求并代表客户端访问目标服务器。</li>
<li>代理服务器将目标服务器的响应转发给客户端。<br><img src="/images/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.png"></li>
</ul>
<h4 id="2-2-透明代理："><a href="#2-2-透明代理：" class="headerlink" title="2.2 透明代理："></a>2.2 透明代理：</h4><p>它在客户端和目标服务器之间充当中间人，但客户端不需要配置代理服务器。透明代理是“隐形”的，客户端并不知道代理的存在。无需客户端配置，透明代理不会隐藏客户端的真实 IP 地址，目标服务器仍然可以看到客户端的真实 IP。</p>
<ul>
<li>客户端直接向目标服务器发起请求。</li>
<li>网络中的透明代理会拦截这些请求，并在不改变客户端配置的情况下转发到目标服务器。</li>
<li>透明代理会接收目标服务器的响应并将其转发给客户端。</li>
</ul>
<h4 id="2-3-反向代理："><a href="#2-3-反向代理：" class="headerlink" title="2.3 反向代理："></a>2.3 反向代理：</h4><p>反向代理服务器对客户端隐藏了服务端的地址，防止了 DDOS 攻击。负载均衡：因为此服务器不止一个，反向代理服务器会将请求均匀的转发给它的服务器资源池中，防止当个服务器因为过多客户端请求而过载。</p>
<ul>
<li>客户端向反向代理服务器发送请求，通常是通过域名访问。</li>
<li>反向代理服务器接收到请求后，会根据负载均衡策略或其他规则，转发请求到实际的目标服务器（也称为后端服务器）。</li>
<li>后端服务器处理请求并返回响应。</li>
<li>反向代理服务器将后端服务器的响应返回给客户端，客户端通常不直接与后端服务器交互。<br><img src="/images/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png"></li>
</ul>
<h2 id="三、正向代理配置"><a href="#三、正向代理配置" class="headerlink" title="三、正向代理配置"></a>三、正向代理配置</h2><p>&lt;1&gt; 软件：squid<br>&lt;2&gt; 主配置文件：&#x2F;etc&#x2F;squid&#x2F;squid.conf<br>&lt;3&gt;设备：Kylin-V10SP3 一台（代理服务器），Win10 一台（内网测试机）</p>
<h4 id="3-1-网络配置"><a href="#3-1-网络配置" class="headerlink" title="3.1 网络配置"></a>3.1 网络配置</h4><p>在互联网中，一般内网使用仅主机模式，外网使用 NAT 模式。固为代理虚拟机添加两张网卡，外网使用 ens160 网卡，网络模式为 NAT；内网使用 ens224 网卡，网络模式为仅主机模式。测试机网卡使用仅主机模式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ nmcli c</span><br><span class="line">NAME  UUID                                  TYPE      DEVICE</span><br><span class="line">WAN   2965720b-3805-4059-8cc3-5698a3104bef  ethernet  ens160</span><br><span class="line">LAN   f6bdfcdf-5fae-4dea-86f4-53a52c458495  ethernet  ens224</span><br><span class="line">[sziit@2303010148 ~]$ nmcli dev</span><br><span class="line">DEVICE  TYPE      STATE   CONNECTION</span><br><span class="line">ens160  ethernet  已连接  WAN</span><br><span class="line">ens224  ethernet  已连接  LAN</span><br><span class="line">lo      loopback  未托管  --</span><br></pre></td></tr></table></figure>
<h4 id="3-2-代理服务端配置和测试端配置"><a href="#3-2-代理服务端配置和测试端配置" class="headerlink" title="3.2 代理服务端配置和测试端配置"></a>3.2 代理服务端配置和测试端配置</h4><p>（1）在 linux 代理服务器虚拟机上安装 squid 服务，设置开机自动启动，查看配置文件中服务的端口信息，防火墙放行该端口 3128&#x2F;tcp 与服务，允许数据包从 3128 端口流入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> dnf install -y squid</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now squid</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/squid/squid.conf | grep http_port</span><br><span class="line">http_port 3128</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> firewall-cmd --add-port=3128/tcp --per</span><br><span class="line">success</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> firewall-cmd --add-service=squid --per</span><br><span class="line">success</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure>
<p>（2）在 windows 虚拟机上，关闭防火墙，设置 IpAddress 为 <code>10.10.48.10/24</code>，子网掩码为 <code>255.255.255.0</code>，与 linux 虚拟机的仅主机网卡 <code>10.10.48.254/24</code> 在 <em>同一个网段内</em> ，确保两个仅主机网卡之间可以相互 ping 通发送数据包。<br>（3）在 windows 虚拟机上，在控制面板对网络代理进行配置（控制面板-&gt;配置代理服务器-&gt;连接-&gt;局域网设置-&gt;代理服务器-&gt;地址端口：<code>10.10.48.254 : 3128</code>），设置代理地址为 linux 虚拟机中的仅主机网卡地址。<br>（4）windows 上发送的虚拟机通过 <code>10.10.48.10/24</code> 地址发送给 linux 虚拟机上的 <code>10.10.48.254/24</code> 地址，存储到该地址上后，使用 <code>192.168.48.100/24</code> 发送给实体机的 <code>192.168.48.10/24</code> 的 NET8 网卡，此时数据包可以由实体机进行对外网发送与访问。<br>（5）在 windows 端访问百度网站，实际由 linux 虚拟机进行访问，记录日志信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">tail</span> -f /var/log/squid/access.log</span><br><span class="line">1733278706.206    218 10.10.48.10 TCP_TUNNEL/200 130089 CONNECT www.baidu.com:443 - HIER_DIRECT/157.148.69.80 -</span><br></pre></td></tr></table></figure>
<p>注意事项：<br>linux 的仅主机网卡，无需配置 DNS 与 gateway，因为仅主机网卡无法访问网络，只能在局域网内部通信使用<br>windows 仅主机网卡，不能配置 DNS 与 gateway，只能通过代理商进行输出访问</p>
<h4 id="3-3-实现访问控制"><a href="#3-3-实现访问控制" class="headerlink" title="3.3 实现访问控制"></a>3.3 实现访问控制</h4><p><strong>（1）使用时间配置</strong><br>在 <code>/etc/squid/squid.conf</code> 添加自定义访问控制列表，设置工作时间在早上九点到下午五点之间，不可访问网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span></span><br><span class="line">acl WorkTime <span class="keyword">time</span> 9:00-17:00</span><br><span class="line">http_access deny WorkTime</span><br></pre></td></tr></table></figure>
<p>重新加载 Squid 服务的配置文件，此时在当前时间 10:30 刚好为工作时间，在 windows 段则无法访问网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> systemctl reload squid</span><br></pre></td></tr></table></figure>
<p>如果修改当前时间为下午六点，则非工作时间，windows 端可正常访问网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">date</span> -s 18:00</span><br><span class="line">2024年 12月 04日 星期三 18:00:00 CST</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">date</span></span><br><span class="line">2024年 12月 04日 星期三 18:00:05 CST</span><br></pre></td></tr></table></figure>

<p><strong>（2）使用域名控制</strong><br>添加自定义访问控制列表，设置禁止访问的域名列表为 &#x2F;etc&#x2F;squid&#x2F;WebSiteBlock.list，若访问这个列表中的域名，即拒绝访问，设置禁止访问域名列表如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/squid/WebSiteBlock.list</span><br><span class="line">.jd.com</span><br><span class="line">.taobao.com</span><br><span class="line">.tmall.com</span><br></pre></td></tr></table></figure>
<p>添加 squid 配置，将时间配置关闭，否则发生拒绝冲突，时间配置关闭后观察由域名配置的变化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span></span><br><span class="line">acl WorkTime <span class="keyword">time</span> 9:00-17:00</span><br><span class="line">acl WebSiteBlock dstdomain <span class="string">&quot;/etc/squid/WebSiteBlock.list&quot;</span></span><br><span class="line"></span><br><span class="line">http_access deny WebSiteBlock</span><br><span class="line"><span class="comment"># http_access deny WorkTime</span></span><br></pre></td></tr></table></figure>
<p>重新加载服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> systemctl reload squid</span><br></pre></td></tr></table></figure>
<p>此时在 windows 端访问这些购物网站失败，访问普通网站类似百度等访问成功</p>
<p><strong>（3）使用 IP 黑名单控制</strong><br>使用 src 关键字定义黑名单列表为 &#x2F;etc&#x2F;squid&#x2F;IPBlock.list</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span></span><br><span class="line">acl WorkTime <span class="keyword">time</span> 9:00-17:00</span><br><span class="line">acl WebSiteBlock dstdomain <span class="string">&quot;/etc/squid/WebSiteBlock.list&quot;</span></span><br><span class="line">acl IPBlock src <span class="string">&quot;/etc/squid/IPBlock.list&quot;</span></span><br><span class="line">http_access deny IPBlock</span><br><span class="line">http_access deny WebSiteBlock WorkTime</span><br><span class="line"><span class="comment"># http_access deny WebSiteBlock</span></span><br><span class="line"><span class="comment"># http_access deny WorkTime</span></span><br></pre></td></tr></table></figure>
<p>黑名单列表如下，包含 Windows 端 IP 地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">cat</span> /etc/squid/IPBlock.list</span><br><span class="line">10.10.48.10</span><br></pre></td></tr></table></figure>
<p>此时在 Windows 端（10.10.48.10）中无法正常上网，Squid 代理商拒绝代理该 IP 地址的请求</p>
<p><strong>（4）联合控制</strong><br>实现：前台Ip在上班时间禁止访问购物网站，假设前台 IP 地址为：10.10.48.10，禁止访问的购物网站为：京东、淘宝、天猫，则实现相关配置如下，定义限制时间为早九晚五，定义限制域名为购物网站域名，定义限制的黑名单用户为前台IP，同时满足三者条件触发拒绝操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/squid/IPBlock.conf</span><br><span class="line">10.10.48.10</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/squid/WebSiteBlock.conf</span><br><span class="line">.jd.com</span><br><span class="line">.taobao.com</span><br><span class="line">.tmall.com</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span></span><br><span class="line">acl WorkTime <span class="keyword">time</span> 9:00-17:00</span><br><span class="line">acl WebSiteBlock dstdomain <span class="string">&quot;/etc/squid/WebSiteBlock.conf&quot;</span></span><br><span class="line">acl IPBlock src <span class="string">&quot;/etc/squid/IPBlock.conf&quot;</span></span><br><span class="line">http_access deny WorkTime WebSiteBlock IPBlock</span><br></pre></td></tr></table></figure>


<h4 id="3-4-squid-服务的日志统计"><a href="#3-4-squid-服务的日志统计" class="headerlink" title="3.4 squid 服务的日志统计"></a>3.4 squid 服务的日志统计</h4><p>在 Squid 服务的日志文件 &#x2F;var&#x2F;log&#x2F;squid&#x2F;access.log 中，每一行表示一次客户端请求</p>
<blockquote>
<p>[时间戳] [所处理的时间|ms] [客户端IP] [请求状态] [响应字节数] [HTTP方法和请求] [请求头] [缓存状态] [响应类型]</p>
</blockquote>
<p>使用 awk 过滤第四个字段：请求状态，使用 sort 进行分类，使用 uniq -c 计算每种状态码的数量，使用 sort -n 对状态码计数进行排序，后输出到 output.txt 文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span> /var/log/squid/access.log | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -n &gt; ~/output.txt                                                                                     </span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">ls</span></span><br><span class="line">app  Changelog.md  config  data  discuz.zip  grade.sh  index.php  kodbox.1.54.zip  list.txt  output.txt  plugins  static  _tmp  wordpress.tar.gz</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">cat</span> output.txt</span><br><span class="line">      1 TCP_MISS/301</span><br><span class="line">      1 TCP_MISS/503</span><br><span class="line">      2 TCP_REFRESH_MODIFIED/200</span><br><span class="line">      3 TCP_REFRESH_UNMODIFIED/200</span><br><span class="line">      4 TCP_MISS/304</span><br><span class="line">      9 TCP_MEM_HIT/200</span><br><span class="line">     28 TCP_MISS/302</span><br><span class="line">     57 TCP_MISS/200</span><br><span class="line">     59 TCP_DENIED/403</span><br><span class="line">    190 TCP_TUNNEL_ABORTED/200</span><br><span class="line">    340 TCP_TUNNEL/200</span><br></pre></td></tr></table></figure>


<h2 id="四、透明代理"><a href="#四、透明代理" class="headerlink" title="四、透明代理"></a>四、透明代理</h2><p>（1）安装软件包，设置软件为开机自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y squid</span><br><span class="line">systemctl <span class="built_in">enable</span> --now squid</span><br></pre></td></tr></table></figure>
<p>（2）编辑配置文件 &#x2F;etc&#x2F;squid&#x2F;squid.conf，编辑缓存目录大小，从 100 MB 改为 1000 MB<br>http_port 字段：监听的端口<br>cache_dir 字段：磁盘缓存设置，<code>ufs</code> 是缓存的存储类型，<code>/var/spool/squid</code> 是缓存目录的路径，<code>100</code> 是缓存目录的大小，单位MB，<code>16</code> 是指定存储子目录的数量，<code>256</code> 是每个子目录中的目录数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Squid normally listens to port 3128 </span></span><br><span class="line">http_port 3128 transparent</span><br><span class="line"><span class="comment"># Uncomment and adjust the following to add a disk cache directory. </span></span><br><span class="line">cache_dir ufs /var/spool/squid 1000 16 256</span><br></pre></td></tr></table></figure>
<p>（3）编辑配置文件 &#x2F;etc&#x2F;squid&#x2F;squid.conf，添加控制访问<br>acl 字段：用于限制操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span></span><br><span class="line">acl BlockWeb dstdomain <span class="string">&quot;/etc/squid/BlockWeb.list&quot;</span></span><br><span class="line">http_access deny BlockWeb</span><br></pre></td></tr></table></figure>
<p>（4）开启 IP 转发</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward    </span><br></pre></td></tr></table></figure>
<p>（5）配置防火墙规则<br>在 internal 内网区域中，开放接收 squid 服务的数据包，将发送到本机的 80 端口数据包，转发至本机 squid 服务的 3128 端口，进行代理服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-service=squid --zone=internal --permanent</span><br><span class="line">firewall-cmd --add-forward-port=port=80:proto=tcp:toport=3128:toaddr=192.168.48.250 --per</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<p>（6）在测试机上验证<br>测试机的网关 gateway 指向该代理机，测试机的所有网络数据包发送到代理机的 80 端口进行端口转发，测试成功</p>
<hr>
<p>@ <a href="https://zybuluo.com/2303010148/note/2568518">Squid 正向代理服务器</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>文本处理三剑客</title>
    <url>/2025/01/06/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="一、sed"><a href="#一、sed" class="headerlink" title="一、sed"></a>一、sed</h2><p>SED（stream editor）命令是一种流编辑器，适用于大量的文本处理，批量处理，无需打开文本，默认不修改源文本，输入修改到临时缓冲区，需要时保存</p>
<p>SED语法：<code>sed [option] [line command] [file]</code><br><img src="/images/sed.png"></p>
<p>示例：<a href="https://www.runoob.com/linux/linux-comm-sed.html">菜鸟教程 sed</a><br>拖字符与 sed 的匹配使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;/^the/p&#x27;</span> file</span><br><span class="line">sed -n <span class="string">&#x27;/[1-9]$/p&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p>拖字符与 sed 的替换使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/^/#/g&#x27;</span> file    <span class="comment"># 开头换成 [#]</span></span><br><span class="line">sed <span class="string">&#x27;s/$/!/g&#x27;</span> file    <span class="comment"># 结尾换成 [!]</span></span><br></pre></td></tr></table></figure>
<p>取反操作，取没带 the 的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;/the/!p&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p>使用 -e 参数或者逗号 ，来连接表达式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -e <span class="string">&#x27;10s/root/titi/g&#x27;</span> -e <span class="string">&#x27;s/sbin/shell/g&#x27;</span> mypasswd | <span class="built_in">head</span> -11</span><br><span class="line">sed <span class="string">&#x27;10s/root/titi/g, s/sbin/shell/g&#x27;</span> mypasswd | <span class="built_in">head</span> -11</span><br></pre></td></tr></table></figure>
<p>改变原文件，并备份一份 <code>.bak</code> 的初始未修改原文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i.bak <span class="string">&#x27;s/root/titi/g&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p>使用 &#x3D; 来输出行号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;/lisi/=&#x27;</span> file</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="二、awk"><a href="#二、awk" class="headerlink" title="二、awk"></a>二、awk</h2><p>awk 也是一种流编辑器，逐行检索，适合于文本中行和列的处理，适合处理结构化数据比如日志信息等。</p>
<p>awk 语法：<code>awk option &#39;pattern &#123;action&#125;&#39; file</code><br>pattern 是该文件中满足该模式的行， action 是满足该模式的行需要执行的操作<br>option 参数：<br><code>-F</code> 指定分隔符，<code>-f</code> 指定包含 awk 的脚本文件，<code>-h</code> 显示帮助信息，<code>-v variable=value</code> 指定 awk 内部变量值</p>
<p>内建变量</p>
<ul>
<li><code>NR</code>：当前行号（Number of Records）。</li>
<li><code>NF</code>：当前行的字段数量（Number of Fields）。</li>
<li><code>\$0</code>：当前行的完整内容。</li>
<li><code>\$1</code>, <code>\$2</code>, …, <code>$n</code>：表示当前行的第 1 列、第 2 列、…、第 n 列。</li>
<li><code>FS</code>：字段分隔符（Field Separator），默认为空格或制表符。</li>
<li><code>OFS</code>：输出字段分隔符（Output Field Separator），默认为空格。</li>
</ul>
<p>示例：<a href="https://www.runoob.com/linux/linux-comm-awk.html">菜鸟教程 awk</a><br>指定分隔符进行打印：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F , <span class="string">&#x27;&#123;print $1,$2&#125;&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p>指定行号打印：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;NR == 2 &#123;print $0&#125;&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p>使用正则表达式匹配：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;/pattern/ &#123;print $0&#125;&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p>多条件判断：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$1 == Alice &amp;&amp; $3 &gt; 30 &#123;print $0&#125;&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p><code>BEGIN</code> 块在开始处理输入文件前执行，<code>END</code> 块在处理完所有输入行后执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN &#123; print &quot;Start of file processing&quot; &#125; &#123; print \$0 &#125; END &#123; print &quot;End of file processing&quot; &#125;&#x27;</span> file.txt</span><br></pre></td></tr></table></figure>
<p>awk 与 if-else 搭配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123; if(NF==3)&#123;print $0&#125; else &#123;print &#x27;</span>no number three<span class="string">&#x27;&#125;&#125;&#x27;</span> file</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、grep"><a href="#三、grep" class="headerlink" title="三、grep"></a>三、grep</h2><p>格式：<code>grep 选项 关键词 目标文件</code><br>选项：<br><code>-i</code> 查找时忽略大小<br><code>-c</code> 返回这个关键词出现的次数（一行多个只有效一个）<br><code>-n</code> 输出时一并输出行号<br><code>-v</code> 反选-返回没有这个关键词的行<br>特殊通配符： <code>^</code>字符——返回以这个字符开头的    字符<code>$</code>返回以这个字符结尾的</p>
<p>示例：<a href="https://www.runoob.com/linux/linux-comm-sed.html">菜鸟教程 grep</a><br>不包含 root 的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -v root /etc/passwd</span><br></pre></td></tr></table></figure>
<p>拖字符与 grep 匹配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep ^s /etc/passwd</span><br><span class="line">grep n$ /etc/passwd</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>日志</title>
    <url>/2025/01/04/%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>日志文件记录系统发生任何操作运行记录，记载了不同类型不同等级的信息。一般查询日志，用于排查故障，确保系统的正常运行日志文件记录系统发生任何操作运行记录，记载了不同类型不同等级的信息。日志等级中，数字越小，情况越严重。</p>
<h2 id="二、日志类型和日志级别"><a href="#二、日志类型和日志级别" class="headerlink" title="二、日志类型和日志级别"></a>二、日志类型和日志级别</h2><p><img src="/images/%E6%97%A5%E5%BF%971.png"><br><img src="/images/%E6%97%A5%E5%BF%972.png"></p>
<h2 id="三、rsyslog"><a href="#三、rsyslog" class="headerlink" title="三、rsyslog"></a>三、rsyslog</h2><p>主配置文件：<code>/etc/rsyslog.conf</code><br>子配置文件：<code>/etc/rsyslog.d/?.conf</code><br>子配置文件内容格式：<code>[日志类型].[日志级别]  [存放地址]</code><br>日志文件存放位置：<code>/var/log</code>下永久存储<br>日志文件存储格式：<code>[发生时间] [主机名] [程序进程名] [描述内容]</code><br>注意：若新建一个级别的所有日志，则messages公共文件不再接收此类信息</p>
<h4 id="示例：自定义将debug日志写入到指定的日志文件："><a href="#示例：自定义将debug日志写入到指定的日志文件：" class="headerlink" title="示例：自定义将debug日志写入到指定的日志文件："></a>示例：自定义将debug日志写入到指定的日志文件：</h4><p>&lt;1&gt; 编辑配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/rsyslog.d</span><br><span class="line">vim titi_debug.conf</span><br><span class="line"><span class="comment"># *.debug /var/log/titi_debug         </span></span><br><span class="line"><span class="comment"># 将所有类型的debug等级的日志信息输出到/var/log/titi_debug中</span></span><br></pre></td></tr></table></figure>
<p>&lt;2&gt; 重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart rsyslog &amp;&amp; systemctl status rsyslog</span><br></pre></td></tr></table></figure>
<p>&lt;3&gt; 查看 &#x2F;var&#x2F;log 下是否自动生成 &#x2F;var&#x2F;log&#x2F;titi_debug 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /var/log | grep titi_debug</span><br></pre></td></tr></table></figure>
<p>&lt;4&gt; 控制台新增终端，发送测试日志<br><code>ALT + F1~F6</code>：切换系统终端，示例F1则为第一个终端窗口，打开虚拟机默认使用第一个终端<br><code>logger</code> ：发送测试日志命令，常用选项：（-t给日志打标签）（-p指定类型级别）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --- [tty2] ---</span></span><br><span class="line">logger -t <span class="string">&#x27;debug-test&#x27;</span> -p user.debug <span class="string">&quot;This is a debug info&quot;</span></span><br></pre></td></tr></table></figure>
<p>&lt;5&gt; 当前终端对日志进行监听<br><code>tail -f [fileName]</code>：监控文件，追踪文件，常用于查阅正在改变的日志文件，同步当前新的消息，若有操作变化，立刻显示到屏幕中，CTRL+C可终止该行为<br><code>journalctl -f</code>：监控日志文件，追踪文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --- [tty1] ---</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/titi_debug</span><br><span class="line"><span class="comment"># Mar 27 19:56:07 localhost debug-test[1496]: This is a debug info</span></span><br><span class="line"><span class="comment"># 日志时间 日志发出主机 日志标签 日志信息</span></span><br></pre></td></tr></table></figure>





<h2 id="四、systemd-journald"><a href="#四、systemd-journald" class="headerlink" title="四、systemd-journald"></a>四、systemd-journald</h2><p>Journalctl 主要根据需求，利用子选项来查看相对应的日志。<br>Systemd-journald服务记录的日志文件比rsyslog的更加全面，包含很多rsyslog无法收集的信息，但是此服务记录的日志默认放在&#x2F;run&#x2F;log下，重启之后，日志内容就会消失，具临时性和全面性。<br>常用选项：<br><img src="/images/%E6%97%A5%E5%BF%973.png"><br>配置文件：<code>/etc/systemd/journald.conf</code><br>存放地址：<code>/run/log</code> 默认临时存放；重启失效<br>服务名&#x2F;工具名：<code>systemd-journald</code><br>命令名：<code>journalctl</code></p>
<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>1，查看 PID 为1的详细日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">journalctl _PID=1 -o verbose</span><br></pre></td></tr></table></figure>
<p>2，查看从2020-9-1 00:00:00起的所有err级别的日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">journalctl --since <span class="string">&#x27;2020-09-01 00:00:00&#x27;</span> -p err</span><br></pre></td></tr></table></figure>
<p>3，查看今天所有和sshd服务相关的日志 (–since等同于-S)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">journalctl --since today _SYSTEMD_UNIT=sshd.service</span><br><span class="line">journalctl -S today _SYSTEMD_UNIT=sshd.service</span><br></pre></td></tr></table></figure>
<p>4，永久存储systemd-journald日志，修改配置文件的Storage选项为persistent并重启服务，检查&#x2F;var&#x2F;log下生成journald文件夹，存放其日志（<strong>将有systemd-journald记录的所有日志文件防止&#x2F;var&#x2F;log下的journal文件夹，即可以随着&#x2F;var&#x2F;log永久存储</strong>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/journald.conf</span><br><span class="line"><span class="comment"># [journal]</span></span><br><span class="line"><span class="comment"># Storage=persistent</span></span><br><span class="line">systemctl restart systemd-journald &amp;&amp; systemctl is-active systemd-journald</span><br><span class="line"><span class="built_in">ls</span> /var/log | grep journal</span><br></pre></td></tr></table></figure>



<h2 id="五、日志轮替"><a href="#五、日志轮替" class="headerlink" title="五、日志轮替"></a>五、日志轮替</h2><p>Logrotate 依赖于后台程序crond，由于日志量大，占用空间大，有些重要性不高或者时间较为久远，作用意义不大的可用删除，日志轮替配置了有关操作，把旧的日志文件移动并改名，同时建立新的空日志文件，当旧日志文件超出保存的范围时就删除。<br>自定义日志轮替规则：可在&#x2F;etc&#x2F;logrotate.conf中写出相关操作，也可在&#x2F;etc&#x2F;logrotate.d下建立新的日志轮替文件，常使用第二种方法，因为当数据量大时，编写在主配置文件中可管理性差，不利于系统维护。<br>配置文件：<code>/etc/logrotate.conf</code><br>子配置文件：<code>/etc/logrotate.d</code><br><img src="/images/%E6%97%A5%E5%BF%974.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/logrotate.conf</span><br><span class="line"><span class="comment"># see &quot;man logrotate&quot; for details</span></span><br><span class="line"><span class="comment"># rotate log files weekly 每周一个轮替</span></span><br><span class="line">weekly</span><br><span class="line"><span class="comment"># keep 4 weeks worth of backlogs 最多备份四份</span></span><br><span class="line">rotate 4</span><br><span class="line"><span class="comment"># create new (empty) log files after rotating old ones 轮替掉文件后创建新文件</span></span><br><span class="line">create</span><br><span class="line"><span class="comment"># use date as a suffix of the rotated file 默认以日期作为文件后缀名</span></span><br><span class="line">dateext</span><br><span class="line"><span class="comment"># uncomment this if you want your log files compressed</span></span><br><span class="line"><span class="comment">#compress</span></span><br><span class="line"><span class="comment"># packages drop log rotation information into this directory 子配置文件路径</span></span><br><span class="line">include /etc/logrotate.d</span><br><span class="line"><span class="comment"># system-specific logs may be also be configured here.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /etc/logrotate.d</span><br><span class="line"><span class="comment"># btmp  chrony  dnf  httpd  rpm  rsyslog  samba  vsftpd  wpa_supplicant  wtmp</span></span><br><span class="line"><span class="built_in">cat</span> /etc/logrotate.d/vsftpd</span><br><span class="line"><span class="comment"># /var/log/vsftpd.log &#123;</span></span><br><span class="line"><span class="comment">#    nocompress</span></span><br><span class="line"><span class="comment">#    missingok</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>时间配置与同步</title>
    <url>/2025/01/04/%E6%97%B6%E9%97%B4%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h2 id="一、date"><a href="#一、date" class="headerlink" title="一、date"></a>一、date</h2><h4 id="1-显示当前日期和时间"><a href="#1-显示当前日期和时间" class="headerlink" title="1. 显示当前日期和时间"></a>1. 显示当前日期和时间</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span></span><br><span class="line"><span class="comment"># Fri Jan  4 14:42:03 CST 2025</span></span><br></pre></td></tr></table></figure>
<h4 id="2-自定义输出格式"><a href="#2-自定义输出格式" class="headerlink" title="2. 自定义输出格式"></a>2. 自定义输出格式</h4><p>可以通过 <code>+</code> 符号后跟格式字符串来自定义输出的日期和时间格式。常见的格式符号包括：</p>
<ul>
<li><code>%Y</code> - 年份（四位数）</li>
<li><code>%m</code> - 月份（两位数）</li>
<li><code>%d</code> - 日（两位数）</li>
<li><code>%H</code> - 小时（24小时制，两位数）</li>
<li><code>%M</code> - 分钟（两位数）</li>
<li><code>%S</code> - 秒（两位数）<br>例如，输出“年-月-日 时:分:秒”格式：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class="line"><span class="comment"># 2025-01-04 14:42:03</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-指定日期时间"><a href="#3-指定日期时间" class="headerlink" title="3. 指定日期时间"></a>3. 指定日期时间</h4><p><code>-d</code> 选项来显示指定日期</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;yesterday&quot;</span></span><br><span class="line"><span class="comment"># Thu Jan  3 14:42:03 CST 2025</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;2025-12-31&quot;</span></span><br><span class="line"><span class="comment"># Wed Dec 31 00:00:00 CST 2025</span></span><br></pre></td></tr></table></figure>
<h4 id="4-设置系统时间"><a href="#4-设置系统时间" class="headerlink" title="4. 设置系统时间"></a>4. 设置系统时间</h4><p>要修改系统日期和时间，使用 <code>date</code> 命令并指定新的日期时间。格式为：<code>sudo date MMDDhhmm[[CC]YY][.ss]</code></p>
<ul>
<li><code>MM</code>：月份（两位数）</li>
<li><code>DD</code>：日期（两位数）</li>
<li><code>hh</code>：小时（两位数，24小时制）</li>
<li><code>mm</code>：分钟（两位数）</li>
<li><code>CC</code>：世纪（两位数，默认为 20）</li>
<li><code>YY</code>：年份（两位数）</li>
<li><code>ss</code>：秒（两位数）<br>例如，要将时间设置为 2025 年 1 月 4 日 15:00：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">date</span> 010415002025</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-设置时区"><a href="#5-设置时区" class="headerlink" title="5. 设置时区"></a>5. 设置时区</h4><p>可以通过设置 <code>TZ</code> 环境变量来临时更改时区。例如，设置为纽约时区：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TZ=<span class="string">&quot;America/New_York&quot;</span> <span class="built_in">date</span></span><br></pre></td></tr></table></figure>
<h4 id="6-日期运算"><a href="#6-日期运算" class="headerlink" title="6. 日期运算"></a>6. 日期运算</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;5 days&quot;</span>    <span class="comment"># 计算 5 天后日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;next Monday&quot;</span>    <span class="comment"># 计算下周一日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;2 weeks ago&quot;</span>    <span class="comment"># 计算两周前日期</span></span><br></pre></td></tr></table></figure>



<h2 id="二、Timedatectl"><a href="#二、Timedatectl" class="headerlink" title="二、Timedatectl"></a>二、Timedatectl</h2><p>查看当前日期时间：<code>timedatectl  (status)</code><br>修改时间：<code>timedatectl set-time</code><br>修改地区：<code>timedatectl set-timezone</code><br>查看可修改的地区列表：<code>timedatectl list-timezones</code><br>搜索&#x2F;选择修改地区：<code>tzselect</code><br>开关NTP服务：<code>timedatectl set-ntp 1/0 true/false</code><br>设置硬件时间状态：<code>timedatectl set-local-rtc 1/0</code>（1：为本地时间；0：为NTC时间）</p>
<blockquote>
<p>UTC：universal time coordinated 协调世界时间<br>BTC：real-time clock &#x3D;&#x3D;&#x3D;&#x3D; BIOS 硬件时间<br>NTP: network time protocal 网络时间协议</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl</span><br><span class="line"><span class="comment">#                Local time: Sat 2025-01-04 22:48:00 CST</span></span><br><span class="line"><span class="comment">#            Universal time: Sat 2025-01-04 14:48:00 UTC</span></span><br><span class="line"><span class="comment">#                  RTC time: Sat 2025-01-04 14:52:00</span></span><br><span class="line"><span class="comment">#                 Time zone: Asia/Beijing (CST, +0800)</span></span><br><span class="line"><span class="comment"># System clock synchronized: yes</span></span><br><span class="line"><span class="comment">#               NTP service: active</span></span><br><span class="line"><span class="comment">#           RTC in local TZ: no</span></span><br></pre></td></tr></table></figure>


<h2 id="三、chrony"><a href="#三、chrony" class="headerlink" title="三、chrony"></a>三、chrony</h2><p>Chrony实现时间同步功能，让计算机保持系统时钟与时钟服务器（NTP）同步，或者自设定互联网上提供的时间源<br>守护进程：<code>chronyd</code><br>命令：<code>chronyc</code><br>配置文件：<code>/etc/chrony.conf</code><br>注意事项：需要为系统&#x2F;网卡配置DNS，配置DNS可以解析配置文件中网络源的域名<br>查看网络源情况：<code>chronyc sources -v</code><br>查看NTP信息：<code>chronyc chacking -v</code><br>强制同步系统时间： <code>chronyc -a makestep</code></p>
<h4 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h4><p>字段：pool&#x2F;server 资源池&#x2F;域名 加速</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/chrony.conf</span><br><span class="line"><span class="comment"># Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="comment"># pool pool.ntp.org iburst</span></span><br><span class="line"><span class="comment"># [pool/server] [资源池/域名] [加速]</span></span><br></pre></td></tr></table></figure>
<h4 id="2-查看网络源情况"><a href="#2-查看网络源情况" class="headerlink" title="2. 查看网络源情况"></a>2. 查看网络源情况</h4><p><code>Source mode &#39;^&#39; = server, &#39;=&#39; = peer, &#39;#&#39; = local clock.</code><br>这部分解释了不同的源模式符号。例如，<code>^</code> 表示服务器模式，<code>=</code> 表示对等模式，<code>#</code> 表示本地时钟。<br><code>Source state &#39;*&#39; = current synced, &#39;+&#39; = combined, &#39;-&#39; = not combined, &#39;?&#39; = unreachable, &#39;x&#39; = time may be in error, &#39;~&#39; = time too variable.</code><br>这部分解释了源的状态符号。<code>*</code> 表示当前同步的源，<code>+</code> 表示组合的源，<code>-</code> 表示未组合，<code>?</code> 表示无法访问，<code>x</code> 表示时间可能出错，<code>~</code> 表示时间太不稳定。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chronyc sources -v</span><br><span class="line"><span class="comment"># 210 Number of sources = 1</span></span><br><span class="line"><span class="comment">#   .-- Source mode  &#x27;^&#x27; = server, &#x27;=&#x27; = peer, &#x27;#&#x27; = local clock.</span></span><br><span class="line"><span class="comment">#  / .- Source state &#x27;*&#x27; = current synced, &#x27;+&#x27; = combined , &#x27;-&#x27; = not combined,</span></span><br><span class="line"><span class="comment"># | /   &#x27;?&#x27; = unreachable, &#x27;x&#x27; = time may be in error, &#x27;~&#x27; = time too variable.</span></span><br><span class="line"><span class="comment"># ||                                                 .- xxxx [ yyyy ] +/- zzzz</span></span><br><span class="line"><span class="comment"># ||      Reachability register (octal) -.           |  xxxx = adjusted offset,</span></span><br><span class="line"><span class="comment"># ||      Log2(Polling interval) --.      |          |  yyyy = measured offset,</span></span><br><span class="line"><span class="comment"># ||                                \     |          |  zzzz = estimated error.</span></span><br><span class="line"><span class="comment"># ||                                 |    |           \</span></span><br><span class="line"><span class="comment"># MS Name/IP address         Stratum Poll Reach LastRx Last sample</span></span><br><span class="line"><span class="comment"># ===============================================================================</span></span><br><span class="line"><span class="comment"># ^~ ntp1.aliyun.com               2   6     6   138  -240.0s[-240.0s] +/-   23ms</span></span><br></pre></td></tr></table></figure>
<h4 id="3-修改chrony配置文件-将ntp1-aliyun-com作为NTP同步时间源"><a href="#3-修改chrony配置文件-将ntp1-aliyun-com作为NTP同步时间源" class="headerlink" title="3. 修改chrony配置文件,将ntp1.aliyun.com作为NTP同步时间源"></a>3. 修改chrony配置文件,将ntp1.aliyun.com作为NTP同步时间源</h4><p>步骤：修改配置文件，取消原有系统自带，按照格式添加需要的时间源；重启chronyd服务，开启NTP服务，开启chronyd服务开机自启，确认NTP同步成功——连接成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/chrony.conf | grep aliyun</span><br><span class="line"><span class="comment"># server ntp1.aliyun.com iburst</span></span><br><span class="line">systemctl restart chronyd &amp;&amp; systemctl status chronyd &amp;&amp; systemctl <span class="built_in">enable</span> --now chronyd</span><br><span class="line">timedatectl</span><br><span class="line"><span class="comment">#                Local time: Sat 2025-01-04 22:48:00 CST</span></span><br><span class="line"><span class="comment">#            Universal time: Sat 2025-01-04 14:48:00 UTC</span></span><br><span class="line"><span class="comment">#                  RTC time: Sat 2025-01-04 14:52:00</span></span><br><span class="line"><span class="comment">#                 Time zone: Asia/Beijing (CST, +0800)</span></span><br><span class="line"><span class="comment"># System clock synchronized: yes</span></span><br><span class="line"><span class="comment">#               NTP service: active    # 确保NTP开启且连接成功</span></span><br><span class="line"><span class="comment">#           RTC in local TZ: no</span></span><br><span class="line">chronyc sources -v</span><br><span class="line"><span class="comment"># 210 Number of sources = 1</span></span><br><span class="line"><span class="comment">#   .-- Source mode  &#x27;^&#x27; = server, &#x27;=&#x27; = peer, &#x27;#&#x27; = local clock.</span></span><br><span class="line"><span class="comment">#  / .- Source state &#x27;*&#x27; = current synced, &#x27;+&#x27; = combined , &#x27;-&#x27; = not combined,</span></span><br><span class="line"><span class="comment"># | /   &#x27;?&#x27; = unreachable, &#x27;x&#x27; = time may be in error, &#x27;~&#x27; = time too variable.</span></span><br><span class="line"><span class="comment"># ||                                                 .- xxxx [ yyyy ] +/- zzzz</span></span><br><span class="line"><span class="comment"># ||      Reachability register (octal) -.           |  xxxx = adjusted offset,</span></span><br><span class="line"><span class="comment"># ||      Log2(Polling interval) --.      |          |  yyyy = measured offset,</span></span><br><span class="line"><span class="comment"># ||                                \     |          |  zzzz = estimated error.</span></span><br><span class="line"><span class="comment"># ||                                 |    |           \</span></span><br><span class="line"><span class="comment"># MS Name/IP address         Stratum Poll Reach LastRx Last sample</span></span><br><span class="line"><span class="comment"># ===============================================================================</span></span><br><span class="line"><span class="comment"># ^~ ntp1.aliyun.com               2   6     6   138  -240.0s[-240.0s] +/-   23ms</span></span><br><span class="line">chronyc -a makestep</span><br><span class="line">chronyc sources -v    <span class="comment"># 可以使用强制同步，或者稍作等待再重新查看，因为chronyd具有一定延迟性</span></span><br><span class="line"><span class="comment"># 210 Number of sources = 1</span></span><br><span class="line"><span class="comment">#   .-- Source mode  &#x27;^&#x27; = server, &#x27;=&#x27; = peer, &#x27;#&#x27; = local clock.</span></span><br><span class="line"><span class="comment">#  / .- Source state &#x27;*&#x27; = current synced, &#x27;+&#x27; = combined , &#x27;-&#x27; = not combined,</span></span><br><span class="line"><span class="comment"># | /   &#x27;?&#x27; = unreachable, &#x27;x&#x27; = time may be in error, &#x27;~&#x27; = time too variable.</span></span><br><span class="line"><span class="comment"># ||                                                 .- xxxx [ yyyy ] +/- zzzz</span></span><br><span class="line"><span class="comment"># ||      Reachability register (octal) -.           |  xxxx = adjusted offset,</span></span><br><span class="line"><span class="comment"># ||      Log2(Polling interval) --.      |          |  yyyy = measured offset,</span></span><br><span class="line"><span class="comment"># ||                                \     |          |  zzzz = estimated error.</span></span><br><span class="line"><span class="comment"># ||                                 |    |           \</span></span><br><span class="line"><span class="comment"># MS Name/IP address         Stratum Poll Reach LastRx Last sample</span></span><br><span class="line"><span class="comment"># ===============================================================================</span></span><br><span class="line"><span class="comment"># ^* ntp1.aliyun.com               2   6     6   138  -240.0s[-240.0s] +/-   23ms</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>环境变量</title>
    <url>/2025/01/06/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<ol>
<li><strong>环境变量设置的三个分类：</strong> 临时性设置，单用户层面永久性设置，系统多用户层面永久性配置</li>
<li><strong>环境配置相关文件</strong>：<br>系统：<code>/etc/profile</code>（登陆shell时执行）；<code>/etc/bashrc</code>；<br>用户：<code>~/.bash_profile</code>（登陆shell时执行）；<code>~/ .bashrc</code>；</li>
<li><strong>相关命令：</strong><br>查看当前用户全部环境变量：<code>env</code>  <code>export</code><br>清除环境变量：<code>unset</code><br>使脚本文件生效：<code>source</code><br>显示指定变量对应的值：<code>echo $变量名</code> <code>printenv 变量名</code></li>
<li><strong>相关环境变量值</strong>： PATH：可执行程序的搜索目录；SHELL：用户shell信息…</li>
</ol>
<p><img src="/images/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>磁盘配置</title>
    <url>/2025/01/05/%E7%A3%81%E7%9B%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="一、基础介绍"><a href="#一、基础介绍" class="headerlink" title="一、基础介绍"></a>一、基础介绍</h2><h3 id="磁盘分区两种方式：MBR和GPT"><a href="#磁盘分区两种方式：MBR和GPT" class="headerlink" title="&lt;1&gt; 磁盘分区两种方式：MBR和GPT"></a>&lt;1&gt; 磁盘分区两种方式：MBR和GPT</h3><h4 id="MBR（master-boot-record主引导记录）-msdos-dos"><a href="#MBR（master-boot-record主引导记录）-msdos-dos" class="headerlink" title="MBR（master boot record主引导记录）&#x2F;msdos&#x2F;dos"></a><strong>MBR（master boot record主引导记录）&#x2F;msdos&#x2F;dos</strong></h4><p>MBR分为四个主分区（三个主分区和一个扩展分区），扩展分区无法直接使用，需要再扩展分区的基础上建立逻辑分区才可正常使用，逻辑分区由第五个开始，支持2TB以内的磁盘分区，常用分区工具：<code>fdisk</code> &#x2F; <code>parted</code><br>MBR 引导扇区结构，总共占据 512 个字节，其中主引导程序占据 446 个字节，分区表占据 64 个字节， MBR 标志占据 2 个字节<br><img src="/images/%E7%A3%81%E7%9B%981.png"></p>
<h4 id="GPT（GUID-Partition-Table全局唯一标识磁盘）"><a href="#GPT（GUID-Partition-Table全局唯一标识磁盘）" class="headerlink" title="GPT（GUID Partition Table全局唯一标识磁盘）"></a><strong>GPT（GUID Partition Table全局唯一标识磁盘）</strong></h4><p>最多支持18EB大小磁盘分区，对磁盘分区不限制数量，无主分区和扩展分区之分，常用分区管理工具：<code>gdisk</code> &#x2F; <code>parted</code><br><img src="/images/%E7%A3%81%E7%9B%982.png"></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="&lt;2&gt; 其他"></a>&lt;2&gt; 其他</h3><ul>
<li><strong>分区单位</strong><br>fdisk 默认单位是 sectors，parted 默认单位是 compact</li>
<li><strong>文件系统类型</strong><br>ext2 是 linux 内核的文件系统<br>ext3 是 linux 日志的文件系统<br>ext4 兼容 ext2 和 ext3</li>
<li><strong>映射文件</strong><br><code>/dev/mapper/ ... dm-0</code>，<code>/dev/mapper/ ... dm-1</code> 等以 dm 为结尾的是 mapper 设备映射文件，linux 也是使用该机制创建的虚拟卷</li>
<li><strong>存储关系</strong><br><img src="/images/%E7%A3%81%E7%9B%983.png"></li>
</ul>
<h2 id="二、常用磁盘管理命令"><a href="#二、常用磁盘管理命令" class="headerlink" title="二、常用磁盘管理命令"></a>二、常用磁盘管理命令</h2><h3 id="支持MBR分区GPT分区的命令工具"><a href="#支持MBR分区GPT分区的命令工具" class="headerlink" title="&lt;1&gt; 支持MBR分区GPT分区的命令工具"></a>&lt;1&gt; 支持MBR分区GPT分区的命令工具</h3><p>支持MBR分区的命令工具：<code>fdisk</code> &#x2F; <code>parted</code>；支持GPT分区的命令工具：<code>gdisk</code> &#x2F; <code>parted</code></p>
<h3 id="parted交互模式"><a href="#parted交互模式" class="headerlink" title="&lt;2&gt; parted交互模式"></a>&lt;2&gt; parted交互模式</h3><p><code>parted [硬盘路径]</code> 进入交互模式<br>常用子命令：<code>print/p</code> 打印分区表；<code>mklabel</code> 分区标签；<code>mkpart</code> 创建分区；<code>unit</code> 设置显示单位；<code>set</code> 设置分区标记；<code>rm</code> 删除分区；<code>quit</code> 退出交互式模式</p>
<h3 id="parted命令行模式："><a href="#parted命令行模式：" class="headerlink" title="&lt;3&gt; parted命令行模式："></a>&lt;3&gt; parted命令行模式：</h3><p><code>parted [硬盘路径] [parted二级命令] [子选项]</code><br>常用形式：命令行模式设置硬盘标签：<code>parted [硬盘路径] mklabel msdos/gpt</code><br>命令行模式为硬盘分区<code>[gpt]</code>：<code>parted [硬盘路径] mkpart [分区名] [文件系统类型] [起始位置] [终点位置]</code><br>命令行模式为硬盘分区<code>[msdos]</code>：<code>parted [硬盘路径] mkpart [主/扩展分区] [文件系统类型] [起始位置] [终点位置]</code><br>磁盘分区是否对齐：<code>parted [设备] align-check optimal 1-100%</code>，返回 <code>1 aligned</code> 表示已对齐，返回 <code>1 not aligned</code> 表示未对齐，<code>optimal</code> 表示最优的</p>
<h3 id="开启关闭交换分区对内存空间的变化"><a href="#开启关闭交换分区对内存空间的变化" class="headerlink" title="&lt;4&gt; 开启关闭交换分区对内存空间的变化"></a>&lt;4&gt; 开启关闭交换分区对内存空间的变化</h3><ul>
<li><code>mkswap</code>  初始化交换分区</li>
<li><code>swapon</code>  <code>-a</code> 激活所有交换分区；<code>-p</code> 指定优先级；<code>-s</code>&#x3D;<code>--show</code> 查看当前设置；<code>-v</code>查看当前设置</li>
<li><code>swapoff</code>  关闭交换分区； <code>-a</code>临时关闭，永久关闭需要修改配置文件<br>设置交换分区优先级：<code>swapon -p</code>，<code>vim /etc/fstab ---&gt; pri=value</code>，优先级默认值为 -1，pri 值越大，优先级级别越高，设置后需要 swapoff 关闭后在 swapon 开启才生效</li>
<li><code>free</code> 查看内存可用空间<br><code>-h</code> 自动单位，<code>-k</code> 以 KB 为单位，<code>-m</code> 以 MB 为单位， <code>-g</code> 以 GB 为单位，<code>-b</code> 以 byte 为单位，<code>-s ?</code> 以 ? 秒为间隔更新查看剩余空间，<code>-t</code> total 显示总和</li>
</ul>
<h3 id="磁盘格式化与检查"><a href="#磁盘格式化与检查" class="headerlink" title="&lt;5&gt; 磁盘格式化与检查"></a>&lt;5&gt; 磁盘格式化与检查</h3><p>格式化分区：<code>mkfs -t [文件系统类型] [磁盘/分区路径]</code>，<code>mkfs.[文件系统类型] [磁盘/分区路径]</code></p>
<table>
<thead>
<tr>
<th>-</th>
<th>同步更新文件系统</th>
<th>对文件系统进行检查修复</th>
<th>VDO格式化时丢弃为0的数据块</th>
</tr>
</thead>
<tbody><tr>
<td>ext系列</td>
<td>resize2fs</td>
<td>fsck.ext4</td>
<td>mkfs.ext4 -E nodiscard</td>
</tr>
<tr>
<td>xfs系列</td>
<td>xfs_growfs</td>
<td>xfs_repair</td>
<td>mkfs.xfs -k</td>
</tr>
</tbody></table>
<p>@：ext4 磁盘：未挂载时，使用 <code>e2fsck</code> 对磁盘进行检查，挂载后，使用 <code>fsck</code> 对磁盘进行检查</p>
<h3 id="查看磁盘相关命令"><a href="#查看磁盘相关命令" class="headerlink" title="&lt;6&gt; 查看磁盘相关命令"></a>&lt;6&gt; 查看磁盘相关命令</h3><p><code>lsblk</code>：块设备名；主次设备号；可否移动；大小；是否只读；块类型；挂载点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME               MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda                  8:0    0   20G  0 disk</span><br><span class="line">├─sda1               8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2               8:2    0   19G  0 part</span><br><span class="line">  ├─openeuler-root 253:0    0   17G  0 lvm  /</span><br><span class="line">  └─openeuler-swap 253:1    0    2G  0 lvm  [SWAP]</span><br><span class="line">sr0                 11:0    1 1024M  0 rom</span><br></pre></td></tr></table></figure>
<p><code>fdisk -l</code>：块设备名；启动盘；开始扇区；结束扇区；总扇区数；大小；ID；块类型</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>代表类型</th>
</tr>
</thead>
<tbody><tr>
<td>82</td>
<td>ext3, ext4 分区</td>
</tr>
<tr>
<td>83</td>
<td>swap 交换分区</td>
</tr>
<tr>
<td>8e</td>
<td>LVM, RAID 分区</td>
</tr>
<tr>
<td>05</td>
<td>extend 扩展分区</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Device     Boot   Start      End  Sectors Size Id Type</span><br><span class="line">/dev/sda1  *       2048  2099199  2097152   1G 83 Linux</span><br><span class="line">/dev/sda2       2099200 41943039 39843840  19G 8e Linux LVM</span><br></pre></td></tr></table></figure>
<p><code>df -Th</code>：块设备名；类型；大小；已使用量；可使用量；挂载点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Filesystem                 Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                   devtmpfs  712M     0  712M   0% /dev</span><br><span class="line">tmpfs                      tmpfs     728M     0  728M   0% /dev/shm</span><br><span class="line">tmpfs                      tmpfs     728M  760K  727M   1% /run</span><br><span class="line">tmpfs                      tmpfs     728M     0  728M   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/openeuler-root ext4       17G  5.7G   11G  36% /</span><br><span class="line">tmpfs                      tmpfs     728M     0  728M   0% /tmp</span><br><span class="line">/dev/sda1                  ext4      974M  125M  783M  14% /boot</span><br><span class="line">tmpfs                      tmpfs     146M     0  146M   0% /run/user/0</span><br></pre></td></tr></table></figure>

<h3 id="手动刷新-SCSI-总线"><a href="#手动刷新-SCSI-总线" class="headerlink" title="&lt;7&gt; 手动刷新 SCSI 总线"></a>&lt;7&gt; 手动刷新 SCSI 总线</h3><p><code>host?</code> 中，<code>?</code> 代表主机序号，<code>‘- - -’</code>是通配符，告诉 SCSI 需要扫描所有控制器和通道</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;- - -&#x27;</span> &gt; /sys/class/scsi_host/host0/scan</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;- - -&#x27;</span> &gt; /sys/class/scsi_host/host1/scan</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;- - -&#x27;</span> &gt; /sys/class/scsi_host/host2/scan</span><br></pre></td></tr></table></figure>

<h3 id="挂载与卸载"><a href="#挂载与卸载" class="headerlink" title="&lt;8&gt; 挂载与卸载"></a>&lt;8&gt; 挂载与卸载</h3><p>查看挂载信息：<code>df -Th</code>，<code>mount</code>，<code>findmnt</code>，<code>cat /proc/mounts</code><br>查看 UUID：<code>blkid</code>，<code>fdisk -f</code><br>重读挂载文件：<code>mount -a</code> 重新加载 &#x2F;etc&#x2F;fstab 配置文件，挂载点必须为空，不允许循环挂载，一个设备可以挂载到多个挂载点，但是一个挂载点只供一个设备挂载，设备和挂载点之间是一对多的关系<br>重挂载为可读：<code>mount -o remount</code> 挂载点必须为可读才能使用，设置可读 <code>mount -o remount,rw [mounted-point]</code>，查看是否可读 <code>findmnt | grep [mounted-point]</code></p>
<h3 id="dd-命令，磁盘操作"><a href="#dd-命令，磁盘操作" class="headerlink" title="&lt;9&gt; dd 命令，磁盘操作"></a>&lt;9&gt; dd 命令，磁盘操作</h3><p>格式：<code>dd if=? of=? count=? bs=? conv=?</code><br>if &#x3D; input file，of &#x3D; output file， count 多少个 block，bs 是块大小 block size，最多 512，可自行更改，conv &#x3D; lcase 是转小写 lower case，conv &#x3D; ucase 是转大写 upper case<br>磁盘分区备份：<code>dd if=/dev/sdb of=/tmp/dd/backup conv=noerror</code><br>创建磁盘镜像：<code>dd if=/dev/sdb of=/tmp/dd/backup.iso</code><br>恢复磁盘：<code>dd if=/tmp/dd/backup.iso of=/dev/sdb</code><br>清除磁盘数据：<code>dd if=/dev/zero of=/dev/sdb</code><br>使用文件作为 swap 分区：<code>dd if=/dev/zero of=/dev/swapfile bs=1k count=2048000</code>，<code>mkswap</code>，<code>swapon</code></p>
<h3 id="磁盘配额"><a href="#磁盘配额" class="headerlink" title="&lt;10&gt; 磁盘配额"></a>&lt;10&gt; 磁盘配额</h3><p>磁盘配额是一种用于限制和管理文件系统中磁盘空间使用的机制，尤其是在多用户环境中。它通过限制用户或组使用的磁盘空间，帮助防止单个用户占用过多磁盘资源，从而影响其他用户的使用</p>
<ul>
<li><strong>硬限制</strong>：绝对限制，超过限制将无法写入数据。</li>
<li><strong>软限制</strong>：警告用户已经超过限制，但暂时不会阻止数据写入，通常会设定一个宽限期，过期后会强制执行硬限制。</li>
<li>xfs 文件系统使用 xfs_quota 命令，ext 文件系统使用 quota 命令<br>配置格式：<code>xfs_quota -x -c &#39;limit bsoft=100M bhard=120M isoft=3 ihard=6 -u titi&#39; /mnt/data</code><br>-x 表示专家模式，-c 表示接子命令，limit 表示配置，bsoft 表示软限制磁盘， bhard 表示硬限制磁盘，isoft 表示文件软件数，ihard 表示文件硬件数，-u 指定用户，&#x2F;mnt&#x2F;data 是挂载点<br>显示配额：<code>xfs_quota -x -c &#39;report&#39; /mount/point</code><br>激活&#x2F;关闭格式：<code>xfs_quota -x -c &#39;enable/disable&#39; /mount/point</code><br>完全关闭配额：<code>xfs_quota -x -c &#39;off&#39; /mount/point</code></li>
</ul>
<h2 id="三、-etc-fstab-配置文件"><a href="#三、-etc-fstab-配置文件" class="headerlink" title="三、&#x2F;etc&#x2F;fstab 配置文件"></a>三、&#x2F;etc&#x2F;fstab 配置文件</h2><p>第一字段：分区设备文件名或UUID（硬件通用唯一识别码）<br>第二字段：挂载点<br>第三字段：文件系统名称<br>第四字段：挂载参数<br>第五字段：指定分区是否被 <code>dump</code> 备份，<code>0</code>代表不备份，<code>1</code>代表每天备份，<code>2</code>代表不定期备份<br>第六字段：指定分区是否被 <code>fsck</code> 检测，<code>0</code>代表不检测，<code>1</code>代表最先检测，<code>2</code>代表稍后检测</p>
<blockquote>
<p><code>Defaults</code>：rw, suid, dev, exec, auto, nouser, async, 和 relatime<br><code>Suid</code>: 执行文件时，以文件所有者或者文件所属组的身份运行，具有更高权限<br><code>Nouser</code>：不允许普通用户挂载该文件系统<br><code>Exec</code>：允许执行二进制文件<br><code>Dev</code>：允许解析设备文件<br><code>Async</code>：异步<br><code>Sync</code>：同步</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Tue Feb 27 12:52:16 2024</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk/&#x27;.</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># After editing this file, run &#x27;systemctl daemon-reload&#x27; to update systemd</span></span><br><span class="line"><span class="comment"># units generated from this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">/dev/mapper/openeuler-root /                       ext4    defaults        1 1</span><br><span class="line">UUID=5ceb471f-5aa4-4e43-ba9c-4f51c0ef23fc /boot                   ext4    defaults        1 2</span><br><span class="line">/dev/mapper/openeuler-swap none                    swap    defaults        0 0</span><br></pre></td></tr></table></figure>


<h2 id="四、parted"><a href="#四、parted" class="headerlink" title="四、parted"></a>四、parted</h2><p><img src="/images/%E7%A3%81%E7%9B%984.png"></p>
<h3 id="4-1-示例一：parted-交互式新增-xfs-文件系统类型的分区"><a href="#4-1-示例一：parted-交互式新增-xfs-文件系统类型的分区" class="headerlink" title="4.1 示例一：parted 交互式新增 xfs 文件系统类型的分区"></a>4.1 示例一：parted 交互式新增 xfs 文件系统类型的分区</h3><p>1，采用 parted 给新盘 &#x2F;dev&#x2F;sdb 添加一块 2G 大小的主分区，类型为 msdos</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# parted /dev/sdb</span><br><span class="line">GNU Parted 3.3</span><br><span class="line">Using /dev/sdb</span><br><span class="line">Welcome to GNU Parted! Type <span class="string">&#x27;help&#x27;</span> to view a list of commands.</span><br><span class="line">(parted) mklabel    <span class="comment"># 使用 [mklabel] 对磁盘打标记</span></span><br><span class="line">New disk label <span class="built_in">type</span>? msdos</span><br><span class="line">(parted) mkpart     <span class="comment"># 使用 [mkpart] 对磁盘进行分区</span></span><br><span class="line">Partition <span class="built_in">type</span>?  primary/extended? p    <span class="comment"># 选择创建 [primary/p] 主分区</span></span><br><span class="line">File system <span class="built_in">type</span>?  [ext2]? xfs          <span class="comment"># 选择分区文件系统 [xfs]</span></span><br><span class="line">Start? 2048s        <span class="comment"># 分区起点</span></span><br><span class="line">End? 2001mb         <span class="comment"># 分区终点</span></span><br><span class="line">(parted) <span class="built_in">print</span>      <span class="comment"># 打印分区表</span></span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    Type     File system  Flags</span><br><span class="line"> 1      1049kB  2001MB  2000MB  primary  xfs          lba</span><br><span class="line"></span><br><span class="line">(parted) quit       <span class="comment"># 退出交互式</span></span><br><span class="line">Information: You may need to update /etc/fstab.</span><br></pre></td></tr></table></figure>
<p>2，udevadm settle 命令检测新分区和创建关联文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# udevadm settle</span><br></pre></td></tr></table></figure>
<p>3，对分区进行格式化处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkfs.xfs /dev/sdb1</span><br><span class="line">meta-data=/dev/sdb1              isize=512    agcount=4, agsize=122048 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class="line">         =                       reflink=1</span><br><span class="line">data     =                       bsize=4096   blocks=488192, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class="line"><span class="built_in">log</span>      =internal <span class="built_in">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>
<p>4，挂载新分区到&#x2F;mnt下的自建目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> /mnt/sdb1</span><br><span class="line">[root@localhost ~]# mount /dev/sdb1 /mnt/sdb1</span><br><span class="line">[root@localhost ~]# findmnt | grep sdb1</span><br><span class="line">└─/mnt/sdb1                           /dev/sdb1                  xfs        rw,relatime,attr2,inode64,noquota</span><br></pre></td></tr></table></figure>


<h3 id="4-2-示例二：采用parted给磁盘创建一个swap分区并设置开机自动启动"><a href="#4-2-示例二：采用parted给磁盘创建一个swap分区并设置开机自动启动" class="headerlink" title="4.2 示例二：采用parted给磁盘创建一个swap分区并设置开机自动启动"></a>4.2 示例二：采用parted给磁盘创建一个swap分区并设置开机自动启动</h3><p>1，采用parted给新盘添加一块1G大小的分区，类型为linux-swap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# parted /dev/sdb</span><br><span class="line">GNU Parted 3.3</span><br><span class="line">Using /dev/sdb</span><br><span class="line">Welcome to GNU Parted! Type <span class="string">&#x27;help&#x27;</span> to view a list of commands.</span><br><span class="line">(parted) p    <span class="comment"># 使用 [p/print] 查看磁盘当前的分区情况</span></span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    File system  Name        Flags</span><br><span class="line"> 1      1049kB  2147MB  2146MB  ext4         titi_part1    <span class="comment"># 分区终点：2147MB</span></span><br><span class="line"></span><br><span class="line">(parted) mkpart    <span class="comment"># 使用 [mkpart] 新增分区</span></span><br><span class="line">Partition name?  []? swap1    <span class="comment"># 指定新增分区名字 [swap1]</span></span><br><span class="line">File system <span class="built_in">type</span>?  [ext2]? linux-swap    <span class="comment"># 指定分区系统文件类型：[linux-swap]</span></span><br><span class="line">Start? 2147mb    <span class="comment"># 指定分区起点</span></span><br><span class="line">End? 3147mb      <span class="comment"># 指定分区终点</span></span><br><span class="line">Warning: The resulting partition is not properly aligned <span class="keyword">for</span> best performance: 4194305s % 2048s != 0s</span><br><span class="line">Ignore/Cancel? i</span><br><span class="line">(parted) p       <span class="comment"># 查看新增后的分区情况</span></span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    File system     Name        Flags</span><br><span class="line"> 1      1049kB  2147MB  2146MB  ext4            titi_part1</span><br><span class="line"> 2      2147MB  3147MB  1000MB  linux-swap(v1)  swap1</span><br></pre></td></tr></table></figure>
<p>2，Udevadm settle命令检测新分区和创建关联文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# udevadm settle</span><br></pre></td></tr></table></figure>
<p>3，初始化交换分区并激活</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkswap /dev/sdb2    <span class="comment"># [初始化]交换分区</span></span><br><span class="line">Setting up swapspace version 1, size = 953.2 MiB (999510016 bytes)</span><br><span class="line">no label, UUID=ebcf7cd5-4c1e-4fbe-80bd-d790a5e472fb</span><br><span class="line">[root@localhost ~]# swapon /dev/sdb2    <span class="comment"># [开启]交换分区</span></span><br><span class="line">[root@localhost ~]# swapon -s           <span class="comment"># 查看所有交换分区的状态</span></span><br><span class="line">Filename                                Type            Size    Used    Priority</span><br><span class="line">/dev/dm-1                               partition       2097148 0       -2</span><br><span class="line">/dev/sdb2                               partition       976084  0       -3</span><br><span class="line">[root@48zbx ~]# lsblk /dev/sdb2 </span><br><span class="line">NAME MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sdb2   8:18   0 953.2M  0 part [SWAP]</span><br></pre></td></tr></table></figure>
<p>4，开关交换分区对内存的影响</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# swapoff /dev/sdb2    <span class="comment"># 关闭交换分区，此时swap分区总共1个</span></span><br><span class="line">[root@localhost ~]# free -g</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:              1           0           0           0           0           1</span><br><span class="line">Swap:             1           0           1</span><br><span class="line">[root@localhost ~]# swapon /dev/sdb2    <span class="comment"># 开启交换分区，此时swap分区总共2个</span></span><br><span class="line">[root@localhost ~]# free -g</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:              1           0           0           0           0           1</span><br><span class="line">Swap:             2           0           2</span><br></pre></td></tr></table></figure>
<p>5，初始化交换分区并激活<br>@：交换分区在 &#x2F;etc&#x2F;fstab 中的配置：<code>[交换分区地址] [挂载点：swap/none] [文件系统格式：swap] [默认/优先级] [是否备份] [是否检查]</code><br>@：交换分区无挂载点，所以挂载点填写 swap 或者 none 都无影响<br>@：<code>mount -a</code> 会把 <code>/etc/fstab</code> 中的所有配置再加载一遍，检验是否出错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed -i <span class="string">&#x27;$a\/dev/sdb2 swap swap defaults 0 0&#x27;</span> /etc/fstab</span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /etc/fstab | grep -v <span class="string">&#x27;^#&#x27;</span></span><br><span class="line"></span><br><span class="line">/dev/mapper/openeuler-root /                       ext4    defaults        1 1</span><br><span class="line">UUID=5ceb471f-5aa4-4e43-ba9c-4f51c0ef23fc /boot                   ext4    defaults        1 2</span><br><span class="line">/dev/mapper/openeuler-swap none                    swap    defaults        0 0</span><br><span class="line">/dev/sdb2 swap swap defaults 0 0</span><br><span class="line">[root@localhost ~]# mount -a</span><br></pre></td></tr></table></figure>


<h3 id="4-3-示例三：使用-parted-免交互进行配置"><a href="#4-3-示例三：使用-parted-免交互进行配置" class="headerlink" title="4.3 示例三：使用 parted 免交互进行配置"></a>4.3 示例三：使用 parted 免交互进行配置</h3><p>1，新添加一个gpt分区，名称为 titi_part2，大小为1GB，文件类型为xfs，注意分区连续性<br>@：分区连续性：以上一个分区的终点为新分区的起点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# parted /dev/sdb <span class="built_in">rm</span> 3</span><br><span class="line">[root@localhost ~]# parted /dev/sdb p</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line">Number  Start   End     Size    File system     Name        Flags</span><br><span class="line"> 1      1049kB  2147MB  2146MB  ext4            titi_part1</span><br><span class="line"> 2      2147MB  3147MB  1000MB  linux-swap(v1)  swap1       swap</span><br><span class="line">[root@localhost ~]# parted /dev/sdb mkpart titi_part2 xfs 3148 4148</span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line">[root@localhost ~]# parted /dev/sdb p</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line">Number  Start   End     Size    File system     Name        Flags</span><br><span class="line"> 1      1049kB  2147MB  2146MB  ext4            titi_part1</span><br><span class="line"> 2      2147MB  3147MB  1000MB  linux-swap(v1)  swap1       swap</span><br><span class="line"> 3      3148MB  4148MB  1000MB                  titi_part2</span><br></pre></td></tr></table></figure>
<p>2，再添加一个swap分区，名称为swap2,大小为1G,注意分区连续性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# parted /dev/sdb mkpart swap2 linux-swap 4148 5148</span><br><span class="line">Information: You may need to update /etc/fstab.</span><br></pre></td></tr></table></figure>
<p>3，再添加一个gpt分区，名称为zbx_part3,大小用到磁盘总大小的60%,文件类型为ext4,注意分区连续性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# parted /dev/sdb mkpart titi_part3 ext4 5149 60%</span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# parted /dev/sdb unit % <span class="built_in">print</span>    <span class="comment"># [unit %] 指定单位进行展示</span></span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 100%</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line">Number  Start  End    Size   File system     Name        Flags</span><br><span class="line"> 1      0.01%  20.0%  20.0%  ext4            titi_part1</span><br><span class="line"> 2      20.0%  29.3%  9.31%  linux-swap(v1)  swap1       swap</span><br><span class="line"> 3      29.3%  38.6%  9.32%                  titi_part2</span><br><span class="line"> 4      38.6%  47.9%  9.31%                  swap2       swap</span><br><span class="line"> 5      47.9%  60.0%  12.1%                  titi_part3</span><br></pre></td></tr></table></figure>
<p>4，再添加一个分区，名称 titi_part4，把所有剩余空间都用尽，文件类型为ext4，并设置标记为lvm，注意分区连续性<br>@：set 设置分区标签：<code>set [number] [flag] [status]</code><br>@：方法一，使用 100%</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# parted /dev/sdb mkpart titi_part4 ext4 6442 100% <span class="built_in">set</span> 6 lvm on</span><br><span class="line">[root@localhost ~]# parted /dev/sdb u % p</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 100%</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line">Number  Start  End    Size   File system     Name        Flags</span><br><span class="line"> 1      0.01%  20.0%  20.0%  ext4            titi_part1</span><br><span class="line"> 2      20.0%  29.3%  9.31%  linux-swap(v1)  swap1       swap</span><br><span class="line"> 3      29.3%  38.6%  9.32%                  titi_part2</span><br><span class="line"> 4      38.6%  47.9%  9.31%                  swap2       swap</span><br><span class="line"> 5      47.9%  60.0%  12.1%                  titi_part3</span><br><span class="line"> 6      60.0%  100%   40.0%                  titi_part4  lvm</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# parted /dev/sdb u compact p</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line">Number  Start   End     Size    File system     Name        Flags</span><br><span class="line"> 1      1049kB  2147MB  2146MB  ext4            titi_part1</span><br><span class="line"> 2      2147MB  3147MB  1000MB  linux-swap(v1)  swap1       swap</span><br><span class="line"> 3      3148MB  4148MB  1000MB                  titi_part2</span><br><span class="line"> 4      4148MB  5148MB  1000MB                  swap2       swap</span><br><span class="line"> 5      5149MB  6442MB  1294MB                  titi_part3</span><br><span class="line"> 6      6442MB  10.7GB  4294MB                  titi_part4  lvm</span><br></pre></td></tr></table></figure>
<p>@：方法二：使用 -1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# parted /dev/sdb <span class="built_in">rm</span> 6</span><br><span class="line">[root@localhost ~]# parted /dev/sdb <span class="string">&#x27;mkpart titi_part4 ext4 6442 -1s&#x27;</span> <span class="built_in">set</span> 6 lvm on</span><br></pre></td></tr></table></figure>
<p>5，检查磁盘分区对齐情况，并对分区进行格式化，初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# parted /dev/sdb align-check optimal 1-100%</span><br><span class="line">1 aligned</span><br><span class="line">[root@localhost ~]# udevadm settle</span><br><span class="line">[root@localhost ~]# mkfs.xfs /dev/sdb3</span><br><span class="line">[root@localhost ~]# mkfs -t ext4 /dev/sdb5</span><br><span class="line">[root@localhost ~]# mkfs -t ext4 /dev/sdb6</span><br><span class="line">[root@localhost ~]# mkswap /dev/sdb4</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# parted /dev/sdb p</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line">Number  Start   End     Size    File system     Name        Flags</span><br><span class="line"> 1      1049kB  2147MB  2146MB  ext4            titi_part1</span><br><span class="line"> 2      2147MB  3147MB  1000MB  linux-swap(v1)  swap1       swap</span><br><span class="line"> 3      3148MB  4148MB  1000MB  xfs             titi_part2</span><br><span class="line"> 4      4148MB  5148MB  1000MB  linux-swap(v1)  swap2       swap</span><br><span class="line"> 5      5149MB  6442MB  1294MB  ext4            titi_part3</span><br><span class="line"> 6      6442MB  10.7GB  4295MB  ext4            titi_part4</span><br></pre></td></tr></table></figure>
<p>6，设置 &#x2F;dev&#x2F;sdb 开机自动启动，并设置交换分区 swap2 的优先级高于 swap1<br>@：&#x2F;etc&#x2F;fstab 中，第四个字段是挂载配置，可以设置挂载优先级 priority，默认值为 -1，值越大，优先级越高</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /etc/fstab | grep -v <span class="string">&#x27;^#&#x27;</span></span><br><span class="line">/dev/mapper/openeuler-root /                       ext4    defaults        1 1</span><br><span class="line">UUID=5ceb471f-5aa4-4e43-ba9c-4f51c0ef23fc /boot                   ext4    defaults        1 2</span><br><span class="line">/dev/mapper/openeuler-swap none                    swap    defaults        0 0</span><br><span class="line">/dev/sdb2       swap    swap    pri=10  0       0</span><br><span class="line">/dev/sdb4       none    swap    pri=20  0       0</span><br><span class="line">/dev/sdb3       /mnt/sdb3       xfs     defaults        0       0</span><br><span class="line">/dev/sdb5       /mnt/sdb5       ext4    defaults        0       0</span><br><span class="line">/dev/sdb6       /mnt/sdb6       ext4    defaults        0       0</span><br><span class="line">[root@localhost ~]# mount -a</span><br></pre></td></tr></table></figure>


<h2 id="五、fdisk"><a href="#五、fdisk" class="headerlink" title="五、fdisk"></a>五、fdisk</h2><p><img src="/images/%E7%A3%81%E7%9B%985.png"><br>1，使用 fdisk 进行分区新增</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# fdisk /dev/sdb</span><br><span class="line">Welcome to fdisk (util-linux 2.35.2).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, <span class="keyword">until</span> you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">Created a new DOS disklabel with disk identifier 0xffda35ee.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n    <span class="comment"># 新增一个新分区 [add a new partition]</span></span><br><span class="line">Partition <span class="built_in">type</span></span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): p    <span class="comment"># 分区类型和分区号 [primary, 1]</span></span><br><span class="line">Partition number (1-4, default 1): 1</span><br><span class="line">First sector (2048-20971519, default 2048):    <span class="comment"># 分区起始 [enter 默认]</span></span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-20971519, default 20971519): +2g    <span class="comment"># 分区结尾 [新增2个gb]</span></span><br><span class="line"></span><br><span class="line">Created a new partition 1 of <span class="built_in">type</span> <span class="string">&#x27;Linux&#x27;</span> and of size 2 GiB.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w    <span class="comment"># 写入分区表保存 [write]</span></span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# lsblk /dev/sdb</span><br><span class="line">NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sdb      8:16   0  10G  0 disk</span><br><span class="line">└─sdb1   8:17   0   2G  0 part /mnt/sdb1</span><br></pre></td></tr></table></figure>
<p>2，使用 partprobe 重写分区表，格式化分区，挂载分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# partprobe</span><br><span class="line">[root@localhost ~]# mkfs -t ext4 /dev/sdb1</span><br><span class="line">[root@localhost ~]# mount /dev/sdb1 /mnt/sdb1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>权限</title>
    <url>/2025/01/04/%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h2 id="一、一般权限"><a href="#一、一般权限" class="headerlink" title="一、一般权限"></a>一、一般权限</h2><p><strong>1. chmod修改权限—chown修改所有者—chgrp修改所属组</strong><br><strong>2. 权限位-硬链接数-属主-属组-大小-最后修改时间-文件或目录名称</strong></p>
<p><strong>3. 文件权限的四种状态</strong><br>读权限<code>read</code>：允许用户读取文件内容，查看文件的属性内容信息—【<code>r</code>】<br>写权限<code>write</code>：允许用户对文件进行创建&#x2F;修改&#x2F;移动&#x2F;重命名等操作—【<code>w</code>】<br>执行权限<code>execute</code>：允许用户运行文件，执行脚本—【<code>x</code>】—对于文件属于执行模式 对于目录属于访问模式<br>无权限：用户对此文件目录无任何权限—【<code>-</code>】<br>权限只限制普通用户，限制不了超级用户root</p>
<p><strong>4. 文件的归属关系</strong><br>所有者<code>user</code>：拥有此文件&#x2F;目录的用户【<code>u</code>】<br>所属组<code>group</code>：拥有此文件&#x2F;目录的用户组【<code>g</code>】<br>其他用户<code>other</code>：除去所有者和所属组之外的第三方用户【<code>o</code>】<br>所有用户<code>all</code>：包含以上三种用户【<code>a</code>】<br>优先级别：所有者 &gt; 所属组 &gt; 其他用户</p>
<p><strong>5. 权限位的组成-字符模式</strong><br>权限位共有十个字符，共分成四组，第一组为文件类型，第二三四组分别各有三个字符位，二三四组代表所有	者权限&#x2F;所属组权限&#x2F;其他用户权限，其中文件类型：<br>-表示普通文件；b表示块设备文件通常位于&#x2F;dev目录下；d表示目录文件；s表示套接口文件；l表示软链接	文件例快捷方式等；p为管道文件用于通信；c为字符设备文件例键盘显示器文件等；<br><img src="/images/%E6%9D%83%E9%99%901.png"><br><img src="/images/%E6%9D%83%E9%99%902.png"></p>
<p><strong>6. 权限位的组成-数字模式</strong><br>权限位由八进制的数字表示，r对应4，w对应2，x对应1，配置时需要求和使用<br><img src="/images/%E6%9D%83%E9%99%903.png"></p>
<p><strong>7. chmod 更改文件目录权限</strong><br>英文全名：change the permissions mode of a file（更改文件的权限模式）<br>命令所在路径：&#x2F;bin&#x2F;chmod<br>功能描述：更改文件&#x2F;目录权限<br>命令格式：<code>chmod [ugoa] [+-=] [rwx]</code> 文件名（ugoa代表具体用户 +-&#x3D;代表加&#x2F;减&#x2F;赋值权限 rwx表示具体权限内容）<br>          <code>chmod [nnn] 文件名</code> （需要输入三个数字代表三种用户的权限）<br>常用命令选项：-R 递归修改文件权限</p>
<p><strong>8. chown 更改文件目录所有者</strong><br>英文全名：change file ownership（更改权限所有者）<br>命令所在路径：&#x2F;bin&#x2F;chown<br>功能描述：更改文件&#x2F;目录的所有者<br>命令格式：<code>chown [-R] 用户 文件或目录</code><br>          <code>chown [-R] 用户:用户组 文件或目录</code><br>          <code>chown [-R] :用户组 文件或目录</code><br>常用命令选项：-R 递归修改文件权限<br>               -c 在更改时显示详细报告</p>
<p><strong>9. chgrp 更改文件目录所属组</strong><br>英文全名：change file group ownership<br>命令所在路径：&#x2F;bin&#x2F;chgrp<br>功能描述：改变文件&#x2F;目录的所属组<br>命令格式：<code>chgrp 用户组 文件/目录</code></p>
<h2 id="二、特殊权限"><a href="#二、特殊权限" class="headerlink" title="二、特殊权限"></a>二、特殊权限</h2><p><img src="/images/%E6%9D%83%E9%99%904.png"><br><img src="/images/%E6%9D%83%E9%99%905.png"></p>
<p><strong>1.  命令名称：SUID</strong><br>占位：占用所有者的x位，所有者的 x 权限标识会变成 s<br>格式：字符法：<code>chmod u+s 文件名</code>   <code>chmod u-s 文件名</code><br>       数字法：<code>chmod 4[原有权限三位] 文件名</code>   <code>chmod 0[原有权限三位] 文件名</code><br>意义：对于一个可执行的文件用了SUID权限后，执行者会临时拥有所有者的权限，执行后则恢复原有身份，这个	  过程只是为了提高效率<br>范围：仅对可执行文件(命令)有意义<br>注意：使用数字修改SUID时，在原权限前加上SUID的数字表示法“4”即可，后接原有的权限三位数字<br>示例：passwd命令文件的属主执行位为s，普通用户(执行者)在使用此命令时拥有和属主root同等权力，可以修改密码</p>
<p><strong>2. 命令名称：SGID</strong><br>占位：占用所属组的x位，所属组的 x 权限标识会变成 s<br>格式：<code>chmod g+s 文件名</code>  <code>chmod g-s 文件名</code><br>      <code>chmod 2[原有权限三位] 文件名</code>  <code>无删除SGID的数字表示法</code><br>意义：对文件传递所属组的身份；对目录任何用户在此目录下创建的文件都具有和该目录所属的组相同的组<br>范围：对文件和目录都生效</p>
<p><strong>3. 命令名称：Sticky Bit</strong><br>占位：占用其他用户的x位，其他用户的 x 权限标识会变成 s<br>格式：字符法：<code>chmod o+t 文件名</code>  <code>chmod o-t 文件名</code><br>      数字法：<code>chmod 1[原有权限三位] 文件名</code>  <code>无删除Sticky Bit的数字表示法</code><br>意义：一个文件添加了STIB权限后，仅有root和文件所有者可以对所有文件作删除，其余用户就算拥有rwx权限，	  也只能删除自己的文件，无法对别的用户创建的文件作修改&#x2F;重命名&#x2F;删除等操作。<br>功能：防止误删，限制除root和文件拥有者外的其他用户的删除权力，此命令限制不了root和文件拥有者</p>
<h2 id="三、其他权限"><a href="#三、其他权限" class="headerlink" title="三、其他权限"></a>三、其他权限</h2><h2 id="1-ACL"><a href="#1-ACL" class="headerlink" title="1. ACL"></a>1. ACL</h2><p>英文全称：FACL（file access control list）文件访问控制列表权限<br>用途：FACL用于设定用户或组针对文件的权限<br>注意：若某文件或目录设置了ACL权限，那么整个文件或目录的最终权限是取文件的用户 rwx 权限和 ACL 权限的交集</p>
<p><strong>命令一：setfacl</strong><br>-m 对用户或组设置facl权限（<code>setfacl -m [u/g]:[用户名/组名]:[字符式权限] 文件/目录</code>）（注：不能使用数字法）<br>-b 删除所有FACL权限（<code>setfacl -b 文件/目录</code>）<br>-x 删除指定FACL权限（<code>setfacl -x 用户名/组名 文件/目录</code>）<br>-k 移除默认FACL 权限<br>-R 设置目录FACL权限（则是递归设置，目录中的所有子文件都随之改变）<br>-d 设置默认FACL权限（仅对目录生效，目录中新建的文件会拥有此默认权限）<br>-R 递归设置FACL权限</p>
<p><strong>命令二：getfacl</strong><br>-a 展示所有FACL权限及其注释信息（注释信息为：文件路径；所有者；所属组）<br>-c 只显示FACL权限，不显示注释内容<br>-d 只显示注释内容，不显示FACL权限<br>-R 以列表显示目录下所有文件的FACL权限及其信息</p>
<h3 id="2-umask"><a href="#2-umask" class="headerlink" title="2. umask"></a>2. umask</h3><p>显示四位：第一位 <code>SUID；SGID；Sticky Bit</code><br>      第二位 <code>User</code><br>      第三位 <code>Group</code><br>      第四位 <code>Other</code><br>查看方式：<code>umask -p</code> 查看默认权限掩码数字版；<code>umask -S</code> 查看默认权限的字符模式<br>临时修改默认权限：<code>umask [ugoa][+-=][rwx]</code>（重启即失效）  <code>umask [数字掩码]</code><br>永久修改默认权限：umask的配置文件是&#x2F;etc&#x2F;bashrc，所以 vim &#x2F;etc&#x2F;bashrc，把最后的umask值修改即可（重启即生效）</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>用户和组</title>
    <url>/2025/01/04/%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84/</url>
    <content><![CDATA[<h2 id="一、预备知识"><a href="#一、预备知识" class="headerlink" title="一、预备知识"></a>一、预备知识</h2><h3 id="1-配置文件、UID与shell"><a href="#1-配置文件、UID与shell" class="headerlink" title="1. 配置文件、UID与shell"></a>1. 配置文件、UID与shell</h3><p>用户配置文件：<code>/etc/passwd</code>   其影子文件：<code>/etc/shadow</code><br>组配置文件：<code>/etc/group</code>   其影子文件：<code>/etc/gshadow</code><br>UID 分配：其中root的UID默认为0，系统用户UID为1-999，普通用户UID以1000开始命名<br>shell 选择：普通用户 <code>/bin/bash</code>，系统用户不可登录控制台 <code>/sbin/nologin</code></p>
<h3 id="2-相关命令与权限"><a href="#2-相关命令与权限" class="headerlink" title="2. 相关命令与权限"></a>2. 相关命令与权限</h3><p>&lt;1&gt; <code>su - 用户名称</code>，切换用户，加 - 表示整个 shell 环境一起切换，保留权限等信息， su 用户，不加 - 表示开启新的 shell 环境<br>&lt;2&gt; &#x2F;etc&#x2F;passwd 存放用户信息，密码加密，真正的密码放于影子文件中，&#x2F;etc&#x2F;shadow 是&#x2F;etc&#x2F;passwd的影子文件用于存放密码<br>&lt;3&gt; 普通用户无法查看影子文件</p>
<h2 id="二、用户相关配置文件与命令"><a href="#二、用户相关配置文件与命令" class="headerlink" title="二、用户相关配置文件与命令"></a>二、用户相关配置文件与命令</h2><h3 id="1-etc-passwd"><a href="#1-etc-passwd" class="headerlink" title="1. &#x2F;etc&#x2F;passwd"></a>1. &#x2F;etc&#x2F;passwd</h3><p>用户名：加密密码：UID：GID：描述说明信息：主目录：命令解释器shell信息</p>
<h3 id="2-etc-shadow"><a href="#2-etc-shadow" class="headerlink" title="2. &#x2F;etc&#x2F;shadow"></a>2. &#x2F;etc&#x2F;shadow</h3><p>用户名：经过算法加密后的口令：从1970.1.1到现在最近一次修改密码的时间：用更改密码后至少需要多少天才能第二次修改：用更改密码后至少需要多少天必须修改密码否则过期：密码过期几天后被禁用：被禁用的具体日期：其他</p>
<h3 id="3-创建用户"><a href="#3-创建用户" class="headerlink" title="3. 创建用户"></a>3. 创建用户</h3><p><strong>创建添加用户</strong>：   <code>useradd 用户名</code><br><strong>创建用户并修改其UID标识码</strong>：  <code>useradd -u UID 用户名</code><br><strong>创建用户并修改其GID标识码即是主组</strong>：  <code>useradd -g GID 用户名</code><br><strong>创建用户并修改创建附加组</strong>：  <code>useradd -G 自定义附加组名 用户名</code><br><strong>创建用户并转移主目录 不放于默认目录home</strong>： <code> useradd -d 目标目录 用户名</code><br><strong>设置密码</strong>：<br>a.交互式（不回显式）：<code>passwd 用户名</code><br>确认后需要输入两次密码进行确认：New password: 和Retype new password:<br>若没有加用户名直接执行passwd命令，则默认对当下用户进行修改密码操作<br>root是超级用户，有权限可以任意修改密码，普通用户修改密码需要遵守linux密码规则，例如包含大小写、数字字符等<br>b.免交互式（回显式）：<code>echo 新密码 | passwd --stdin 用户</code><br>（stdin表示数据重定向-输入重定向和输出重定向）<br>示例：使用免交互式将lisi02密码设置为lywlyw20050923：      echo lywlyw20050923 | passwd –stdin lisi02<br>echo可以输出内容至屏幕上，|管道符将密码输出到用户上，–stdin接收密码<br>好处：可以看到密码以免输错   坏处：安全度不高 公共场合不适用 history可以查到<br>c.查看用户是否设置密码：<code>passwd -S 用户</code><br>已设置密码：password set<br>未设置密码：password locked</p>
<h3 id="4-修改用户"><a href="#4-修改用户" class="headerlink" title="4. 修改用户"></a>4. 修改用户</h3><p><strong>修改用户的主组</strong>：  <code>usermod -g 更改的新主组 用户名</code><br><strong>修改用户的UID标识码</strong>：  <code>usermod -u 更新的UID码 用户名</code><br><strong>修改其用户名&#x2F;登录名</strong>：  <code>usermod -l 新的用户名称 原本的用户名称（处理的对象）</code><br><strong>用户有效期</strong>：<br>查看用户有效期： <code>chage -l 用户名</code><br>设置用户有效期(方法一)：<code>usermod -e 时间 用户名</code>（时间年月日用-分隔）<br>设置用户有效期(方法二)：<code>chage -E 时间 用户名</code>（时间年月日用-分隔）<br>把有效期改为永久有效永不失效(方法一)：<code>usermod -e -1 用户名</code><br>把有效期改为永久有效永不失效(方法二)：<code>chage -E -1 用户名</code></p>
<h3 id="5-查看和删除用户"><a href="#5-查看和删除用户" class="headerlink" title="5. 查看和删除用户"></a>5. 查看和删除用户</h3><p><strong>查看用户信息</strong>： <code>id 用户名</code><br><strong>删除用户</strong>： <code>userdel 用户名</code>（-r 删除用户目录）<br><strong>封禁账号</strong>：<br>a.更改shell命令解释器：<code>usermod -s /sbin/nologin 用户名</code><br>b.使用passwd进行用户锁定：<code>passwd -l 用户</code><br>c.使用usermod进行用户锁定：<code>usermod -L 用户</code><br>d.对所有普通用户进行封禁：<code>touch /etc/nologin</code></p>
<h2 id="三、组相关配置文件与命令"><a href="#三、组相关配置文件与命令" class="headerlink" title="三、组相关配置文件与命令"></a>三、组相关配置文件与命令</h2><h3 id="1-创建组"><a href="#1-创建组" class="headerlink" title="1. 创建组"></a>1. 创建组</h3><p><strong>创建组指定GID</strong>：  <code>groupadd -g 指定的GID 组名</code></p>
<h3 id="2-修改组"><a href="#2-修改组" class="headerlink" title="2. 修改组"></a>2. 修改组</h3><p><strong>修改组名并修改组GID</strong>：   <code>groupmod -g 新GID -n 新组名 组名</code><br><strong>设置组密码</strong>：   <code>gpasswd 组名</code><br><strong>给组设置管理员</strong>：   <code>gpasswd -A 管理员 组名</code><br><strong>给组添加成员</strong>：   <code>gpasswd -a 用户 组名</code><br><strong>批量添加用户</strong>：  <code>gpasswd -M 组用户 组名</code>（组用户间用逗号隔开）</p>
<h3 id="3-查看和删除"><a href="#3-查看和删除" class="headerlink" title="3. 查看和删除"></a>3. 查看和删除</h3><p><strong>查询用户属于哪个组，有多少个组</strong>：   <code>groups 用户</code><br><strong>切换组</strong>：   <code>newgrp 组名</code><br><strong>查看当前所在(生效)的组</strong>：   <code>id -gn</code><br><strong>删除组密码</strong>：   <code>gpasswd -r 组名</code><br><strong>删除组用户</strong>：   <code>gpasswd -d 组用户 组名</code><br><strong>删除组</strong>：   <code>groupdel 组名</code><br><strong>强删主组</strong>：   <code>groupdel -f 组名</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>系统查询与调节</title>
    <url>/2025/01/06/%E7%B3%BB%E7%BB%9F%E6%9F%A5%E8%AF%A2%E4%B8%8E%E8%B0%83%E8%8A%82/</url>
    <content><![CDATA[<h2 id="一、系统方面"><a href="#一、系统方面" class="headerlink" title="一、系统方面"></a>一、系统方面</h2><h4 id="1-查看硬盘分区管理信息"><a href="#1-查看硬盘分区管理信息" class="headerlink" title="1. 查看硬盘分区管理信息"></a>1. 查看硬盘分区管理信息</h4><p>fdisk -l</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@2303010148 ~]# fdisk -l</span><br><span class="line">Disk /dev/nvme0n1：20 GiB，21474836480 字节，41943040 个扇区</span><br><span class="line">磁盘型号：VMware Virtual NVMe Disk</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x1354d7aa</span><br><span class="line">设备           启动    起点     末尾     扇区 大小 Id 类型</span><br><span class="line">/dev/nvme0n1p1 *       2048  2099199  2097152   1G 83 Linux</span><br><span class="line">/dev/nvme0n1p2      2099200 41943039 39843840  19G 8e Linux LVM</span><br></pre></td></tr></table></figure>
<h4 id="2-查看开机自动挂载信息"><a href="#2-查看开机自动挂载信息" class="headerlink" title="2. 查看开机自动挂载信息"></a>2. 查看开机自动挂载信息</h4><p>cat &#x2F;etc&#x2F;fstab </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@2303010148 ~]# cat /etc/fstab</span><br><span class="line">/dev/mapper/klas-root   /                       xfs     defaults        0 0</span><br><span class="line">UUID=1aa10ebb-84dc-4732-ac41-f339df31c68a /boot                   xfs     defaults        0 0</span><br><span class="line">/dev/mapper/klas-home   /home                   xfs     defaults        0 0</span><br><span class="line">/dev/mapper/klas-swap   none                    swap    defaults        0 0</span><br></pre></td></tr></table></figure>
<h4 id="3-显示磁盘空间使用情况"><a href="#3-显示磁盘空间使用情况" class="headerlink" title="3. 显示磁盘空间使用情况"></a>3. 显示磁盘空间使用情况</h4><p>df -Th</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@2303010148 ~]# df -Th</span><br><span class="line">文件系统              类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs              devtmpfs  451M     0  451M    0% /dev</span><br><span class="line">tmpfs                 tmpfs     467M   12K  467M    1% /dev/shm</span><br><span class="line">tmpfs                 tmpfs     467M   13M  454M    3% /run</span><br><span class="line">tmpfs                 tmpfs     467M     0  467M    0% /sys/fs/cgroup</span><br></pre></td></tr></table></figure>
<h4 id="4-查看-CPU-信息："><a href="#4-查看-CPU-信息：" class="headerlink" title="4. 查看 CPU 信息："></a>4. 查看 CPU 信息：</h4><p>lscpu<br>cat &#x2F;proc&#x2F;cpuinfo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@2303010148 ~]# lscpu</span><br><span class="line">架构：                           x86_64</span><br><span class="line">CPU 运行模式：                   32-bit, 64-bit</span><br><span class="line">字节序：                         Little Endian</span><br><span class="line">Address sizes:                   45 bits physical, 48 bits virtual</span><br><span class="line">CPU:                             1</span><br><span class="line">在线 CPU 列表：                  0</span><br><span class="line">每个核的线程数：                 1</span><br></pre></td></tr></table></figure>
<h4 id="5-查看内存信息："><a href="#5-查看内存信息：" class="headerlink" title="5. 查看内存信息："></a>5. 查看内存信息：</h4><p>free -h<br>cat &#x2F;proc&#x2F;meminfo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@2303010148 ~]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          932Mi       519Mi        94Mi        12Mi       317Mi       258Mi</span><br><span class="line">Swap:         2.0Gi       4.0Mi       2.0Gi</span><br><span class="line">[root@2303010148 ~]# cat /proc/meminfo</span><br><span class="line">MemTotal:         954496 kB</span><br><span class="line">MemFree:           96400 kB</span><br><span class="line">MemAvailable:     263656 kB</span><br><span class="line">Buffers:            2080 kB</span><br></pre></td></tr></table></figure>
<h4 id="6-查看系统版本："><a href="#6-查看系统版本：" class="headerlink" title="6. 查看系统版本："></a>6. 查看系统版本：</h4><p>cat &#x2F;etc&#x2F;os-release<br>cat &#x2F;etc&#x2F;redhat-release</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@2303010148 ~]# cat /etc/os-release</span><br><span class="line">NAME=&quot;Kylin Linux Advanced Server&quot;</span><br><span class="line">VERSION=&quot;V10 (Lance)&quot;</span><br><span class="line">ID=&quot;kylin&quot;</span><br><span class="line">VERSION_ID=&quot;V10&quot;</span><br><span class="line">PRETTY_NAME=&quot;Kylin Linux Advanced Server V10 (Lance)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br></pre></td></tr></table></figure>
<h4 id="7-查看内核版本："><a href="#7-查看内核版本：" class="headerlink" title="7. 查看内核版本："></a>7. 查看内核版本：</h4><p>uname -a</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@2303010148 ~]# uname -a</span><br><span class="line">Linux 2303010148 4.19.90-52.22.v2207.ky10.x86_64 #1 SMP Tue Mar 14 12:19:10 CST 2023 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>
<h4 id="8-关机"><a href="#8-关机" class="headerlink" title="8. 关机"></a>8. 关机</h4><p>reboot<br>shutdown -r ?minute</p>
<h4 id="9-切换默认用户界面"><a href="#9-切换默认用户界面" class="headerlink" title="9. 切换默认用户界面"></a>9. 切换默认用户界面</h4><p>systemctl isolate graphical.target&#x2F;multi-user.target</p>
<hr>
<h2 id="二、进程"><a href="#二、进程" class="headerlink" title="二、进程"></a>二、进程</h2><h3 id="1-静态查看进程-ps"><a href="#1-静态查看进程-ps" class="headerlink" title="1. 静态查看进程 ps"></a>1. 静态查看进程 ps</h3><p>定义与对进程的理解：在这一个时间片之前所有进程的一个快照，不论进程状态死活，统一做一个大汇报<br>使用搭配：pipe管道+ more分页查看，pipe管道+ grep过滤查找</p>
<p><strong>常用命令：</strong><br>（1）<strong>查看cpu内存使用占用情况</strong>：<code>ps -aux</code>【a-all；u-user；x-不区分终端】<br>（2）<strong>查看父进程ID信息</strong>：<code>ps -ef</code>  【e-展示使用的环境变量；f-全格式显示】</p>
<p>@：使用ps命令时，TTY一列表示终端，分类一：伪终端PTS，由操作系统模拟创建，常用于进程间通信，例如网络连接，远程登陆等；分类二：控制台终端TTY，选择范围在1-6，可使用alt键加f？进行切换，示例：ALT+F1切换一号终端；分类三：？使用问号表示，是一个后台程序，无占用终端<br>@：使用ps命令时：TIME表示的是cpu的使用时间，注意这里可能是多线程的一种进程</p>
<h4 id="ps-aux"><a href="#ps-aux" class="headerlink" title="ps -aux"></a>ps -aux</h4><blockquote>
<p>[USER]  [PID]  [%CPU]  [%MEM]  [VSZ]  [RSS]  [TTY]  [STAT]  [START]  [TIME]  [COMMAND]<br>用户名，  进程号，  CPU占比，  内存占比，  虚拟占用内存，  实际占用内存，  终端，  进程状态，  进程开始时间，  cpu使用时间，  创建进程的命令</p>
</blockquote>
<p><img src="/images/%E7%B3%BB%E7%BB%9F1.png"></p>
<p>虚拟内存大小：VSZ——[visual set size]<br>实际专用内存：RSS——[resident set size]</p>
<h4 id="ps-ef"><a href="#ps-ef" class="headerlink" title="ps -ef"></a>ps -ef</h4><blockquote>
<p>[UID]  [PID]  [PPID]  [C]  [STIME]  [TTY]  [TIME]  [CMD]<br>用户名， 进程号， 父进程， CPU累积使用时间， 进程启动时间， 终端， CPU占用时间， 创建进程的命令</p>
</blockquote>
<p><img src="/images/%E7%B3%BB%E7%BB%9F2.png"></p>
<h3 id="2-动态查看进程-top"><a href="#2-动态查看进程-top" class="headerlink" title="2. 动态查看进程 top"></a>2. 动态查看进程 top</h3><p><strong>常用命令：</strong><br>（1）大写P：对进程进行CPU排序<br>（2）大写M：对内存memory进行排序<br>（3）小写c：对command命令行做具体查看，显示其命令路径<br>（4）小写h：对top的一个信息汇总<br>（5）小写q：退出动态监控</p>
<p><strong>常用搭配查看系统信息：</strong><br>（1）w：当前登录用户<br>（2）uptime：显示系统总共运行了多长时间和系统的平均负载<br>（3）lscpu：cpu的详细使用信息<br>（4）lsmem：内存的详细使用信息<br>（5）free：查看内存使用情况</p>
<blockquote>
<p>[PID]  [USER]  [PR]  [NI]  [VIRT]  [RES]  [SHR]  [S]  [%CPU]  [%MEM]  [TIME+]  [COMMAND]<br>进程号，  用户名，  优先级，  nice值，  虚拟占用内存，  实际占用内存，  共享内存，  进程状态，  cpu占用比，  内存占用比，  CPU使用时间，  创建进程的命令，</p>
</blockquote>
<p><img src="/images/%E7%B3%BB%E7%BB%9F3.png"></p>
<h3 id="3-kill-杀死进程"><a href="#3-kill-杀死进程" class="headerlink" title="3. kill 杀死进程"></a>3. kill 杀死进程</h3><p>（1）<code>kill</code>：以“进程号”“作业号”杀死进程<br>（2）<code>killall</code>：以 “进程名字” + “精确匹配” 杀死进程<br>若使用 <code>killall -9 vi</code>，则精确匹配杀掉所有进程中使用 vi 命令开展的进程，而不会影响到 vim 命令开展的进程<br>（3）<code>pkill</code>：以 “进程名字” + “模糊查找” 杀死进程<br>若使用 <code>pkill -9 vi</code>，则磨合匹配所有 vi 和 vim 开展的进程并杀死<br>@：-9 向进程发送一个 SIGKILL 信号，用于强制终止目标进程。例如，进程可能被某些资源锁死，或正在处理无法中断的操作，这时发送 <code>SIGKILL</code> 可以强制结束进程。-9 只是一个信号编号，示例 <code>kill -15</code>（SIGTERM）信号，它会优雅地要求进程终止，并给进程时间进行资源清理。</p>
<h3 id="4-前后台切换"><a href="#4-前后台切换" class="headerlink" title="4. 前后台切换"></a>4. 前后台切换</h3><ul>
<li><p><strong>进程从前台转后台运行</strong><br>方法一：<code>command &amp;</code><br>方法二：<code>command</code>-&gt;<code>ctrl+z</code>-&gt;<code>bg %作业号</code> （bg %作业号，可以将该作业进程转到后台执行）</p>
</li>
<li><p><strong>进程从后台转到前台暂停</strong><br>方法一：<code>fg  %作业号</code></p>
</li>
<li><p><strong>jobs 命令</strong><br>查看任务汇总，只能查看用户层面的自定义提交进程，无法查看到系统层面的任务。<br>常使用搭配：<code>jobs -l</code>任务列表；<code>jobs -r</code>正在running的任务；<code>jobs -s</code> [stopped]</p>
</li>
<li><p><strong>bg &#x2F; fg 命令</strong><br>分别代表background和frontground前台和后台，<br>命令使用格式：转前台：<code>fg [%作业号]</code> ；转后台：<code>bg [%作业号]</code><br>@：在使用bg或者fg命令将进程进行前后台转换时，可以缺省作业号前面的%百分号，但是在使用作业号kill进程时，不可省略%，这样会混淆PID与作业号，若想删除%1，后缺省%，删除了PID为1的总父进程systemd，则系统重启。</p>
</li>
<li><p><strong>python 命令</strong><br>命令格式：<code>python [python脚本]</code><br>相当于一个python解释器，在输入python命令后，后接一个python脚本文件，自动打开解释器进行执行。否则使用相对路径或者加入环境变量还需要配置它的执行权限。</p>
</li>
</ul>
<hr>
<h2 id="三、crontab-定时操作"><a href="#三、crontab-定时操作" class="headerlink" title="三、crontab 定时操作"></a>三、crontab 定时操作</h2><p>作用：定时操作，周期计划表<br>守护进程：<strong>crond</strong><br>配置文件：<br>（1）用户层面： <strong>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;user_name</strong>     <br>（2）系统层面： <strong>&#x2F;etc&#x2F;crontab</strong>    <br>（3）系统子配置文件： <strong>&#x2F;etc&#x2F;cron.d&#x2F;crontab脚本文件</strong></p>
<p>常用选项：<code>-l</code>查看定时任务列表；<code>-e</code>编辑定时任务列表；<code>-u</code>指定用户；<code>-r</code>删除清空任务列表<br>@：使用 <code>crontab -e</code> 命令等于编辑 <code>/var/spool/cron/user_name</code> 文件进行配置，crontab -e 就是打开该用户的 crontab 文件</p>
<p>配置文件内部，每一行表示一个定时任务，具体配置如下：</p>
<blockquote>
<p>[分钟]  [小时]  [几号]  [月份]  [周几]  [命令]<br>[0-59]  [0-23]  [1-31]  [1-12]  [0-7]  [command]</p>
</blockquote>
<p>可以使用通配符进行匹配：<br><code>[*]</code>：星号表示所有<br><code>[,]</code>：逗号表示不连续范围<br><code>[-]</code>：短横线表示连续范围<br><code>[/]</code>：斜杠表示频率，每隔多久做某事</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">30    21    *    *    *    systemctl restart network        <span class="comment"># 每晚的21:30重启network。</span></span><br><span class="line">45    4    1,10,22    *    *    systemctl restart network   <span class="comment"># 每月1、10、22日的4:45重启network。</span></span><br><span class="line">10    1    *    *    6,7    systemctl restart network       <span class="comment"># 每周六、周日的1:10重启network。</span></span><br><span class="line">*/30    18-23    *    *    *    systemctl restart network   <span class="comment"># 每天18:00至23:00之间每隔30分钟重启network。</span></span><br><span class="line">00    23    *    *    6    systemctl restart network        <span class="comment"># 每星期六晚上的23:00 pm重启network。</span></span><br><span class="line">00    */1    *    *    *    systemctl restart network       <span class="comment"># 每一小时重启network。</span></span><br><span class="line">00    0-7,23    *    *    *    systemctl restart network    <span class="comment"># 晚上11点到早上7点之间，每隔一小时重启network。</span></span><br><span class="line">00    11    4    *    1-3    systemctl restart network      <span class="comment"># 每月的4号与每周一到周三的11点重启network。</span></span><br></pre></td></tr></table></figure>


<p>@ 版本问题：<br>在redhat版本中，超级管理员root和普通用户都有权利编辑自己的crontab文件；但是在OpenEuler中，<strong>默认仅允许root可以编辑crontab文件</strong>，普通用户无权编辑自己的crontab文件，使用crontab -e提示“you(username) are not allowed to use this program(crontab)”，也默认无法进入**&#x2F;var&#x2F;spool&#x2F;cron（默认权限700）<strong>中，修改目录权限进入后，使用vi编辑也出现提示信息“Permission Denied”，固得知OpenEuler系统对此方面要求严格，若想让普通用户也有权利编辑自己的crontab文件，可以使用root用户编辑crond服务的白名单文件</strong>&#x2F;etc&#x2F;cron.allow<strong>，</strong>一行表明一个用户**，将普通用户增加到白名单中，即可让普通用户拥有权力</p>
<p>@ 易错点：<br>（1）在配置跨天的时间<br>示例晚上11点到隔天早上7点，请勿写成23-7，这种跨时间域的方式crontab无法识别，需要将其“分开写”+“按顺序写”，改写成0-7，23即可<br>（2）在配置每隔？小时执行一次时候<br>配置字段前两部分需要写成：<code>00  */?次数</code>，而不是 <code>*  */?次数</code>，这样设置后面的小时就无意义了，主要还是依靠前头的每分钟一次做决定，这样就变成每分钟执行一次</p>
<hr>
<h2 id="四、优先级"><a href="#四、优先级" class="headerlink" title="四、优先级"></a>四、优先级</h2><p><strong>定义：</strong><br>进程的优先级直接影响到 CPU 资源的分配。当多个进程具有相同优先级时，CPU 资源通常会被平均分配。若系统负载较轻且 CPU 资源充足，调度器可能会公平地为所有进程分配时间片，而不考虑优先级的差异。这种机制确保了在资源富裕的情况下，每个进程都有机会获得 CPU 的处理时间。<br>@：相关命令 &lt;查看cpu信息&gt; ：lscpu, cat &#x2F;proc&#x2F;cpuinfo<br>@：总核数 &#x3D; 物理CPU个数 x 每颗物理CPU的核数<br>@：逻辑CPU个数 &#x3D; 物理CPU个数 x 每颗物理CPU的核数 x 超线程数</p>
<p><strong>基础介绍：</strong><br>1. 对于PR（priority值）和NI（nice值）来说，<strong>若数值越大，优先级越低，数值越小，优先级越高</strong><br>2. <strong>NICE值取值范围在 [ -20, +19 ] 之间，映射到priority优先级的“100 - 139”级别做静态优先级字段</strong><br>3. PR值一般是内核动态调整的，NI值影响内核分配给进程的CPU时间片，%nice影响cpu占用百分比，PRI（新）&#x3D;PRI（旧）+NI值</p>
<p><img src="/images/%E7%B3%BB%E7%BB%9F4.png"></p>
<p><strong>命令：</strong><br><strong>1.</strong> <strong>提交命令转后台时 设置优先级：</strong> <code>nice -n [优先级] [命令]</code><br><strong>2. 将已经提交的命令优先级进行二次设置：</strong><code>renice -n &lt;nice优先级&gt; -p &lt;PID&gt; -g &lt;PGID&gt; -u &lt;user&gt;</code><br><strong>3. 使用top二级命令：</strong> <code>top -&gt; r键 -&gt; 输入PID -&gt; 输入优先级</code><br><strong>4. 设置进程的调度策略和优先级PR值字段：</strong> <code>chrt -p &lt;priority&gt; &lt;PID&gt;</code></p>
<p><strong>注意事项：</strong><br>@：不使用nice命令直接将命令运行到后台，默认优先级为0<br>@：使用nice命令缺省 [-n 优先级] 字段，则默认优先级为10<br>@：普通用户无法提高自己的优先级，只能对自己的优先级进行降低行为，也可以kill掉自己的进程<br>@：在实际运用中，多使用-u调节用户进程优先级，少用-p指定PID，进程过多，操作不现实</p>
<hr>
<h2 id="五、tuned-系统调优"><a href="#五、tuned-系统调优" class="headerlink" title="五、tuned 系统调优"></a>五、tuned 系统调优</h2><p><strong>定义：自动调节调优linux系统性能的工具，服务在后台运行，时刻监控进程状态进行调优，使用系统预设的或是用户自定义的配置文件来调节系统参数，来满足性能需求</strong><br><strong>服务</strong>：tuned.service<br><strong>命令</strong>：tuned-adm<br><strong>主配置文件</strong>：&#x2F;etc&#x2F;tuned<br><strong>子配置文件集：</strong>&#x2F;usr&#x2F;lib&#x2F;tuned&#x2F;[方案名]&#x2F;tuned.conf<br><strong>日志文件</strong>：&#x2F;var&#x2F;log&#x2F;tuned&#x2F;tuned.log</p>
<p><img src="/images/%E7%B3%BB%E7%BB%9F5.png"><br><img src="/images/%E7%B3%BB%E7%BB%9F6.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>防火墙</title>
    <url>/2025/01/04/%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<h2 id="一、防火墙内核Netfilte："><a href="#一、防火墙内核Netfilte：" class="headerlink" title="一、防火墙内核Netfilte："></a>一、防火墙内核Netfilte：</h2><p>防火墙是位于内部网络和外部网络之间的一道安全管控系统，依照规则对于数据包的进出进行放行&#x2F;拦截操作，而netfilter是linux内核数据包处理模块，属于“内核态”防火墙框架，对网络流量的处理和操作，它可以提供数据包的过滤、转发、地址转换NAT功能。是位于网卡和内核协议栈之间的一堵墙，是linux内核的一组钩子，内核模块向网络堆栈注册回调函数，每个经过网络堆栈钩子的数据包都会回调已注册的回调函数<br><img src="/images/%E9%98%B2%E7%81%AB%E5%A2%991.png"></p>
<h2 id="二、防火墙工具"><a href="#二、防火墙工具" class="headerlink" title="二、防火墙工具"></a>二、防火墙工具</h2><p>Iptables, nftables, firewalld是在NETFILTER框架之上构建的用户空间工具，配置与管理防火墙规则，属于“用户态”的防火墙管理体系</p>
<h3 id="2-1-iptables"><a href="#2-1-iptables" class="headerlink" title="2.1 iptables"></a>2.1 iptables</h3><p>最早的基于netfilter的管理工具，<strong>四表五链</strong>，使用一系列的表（tables）、链（chains）、规则（rules）和匹配（matches）来实现数据包过滤和转发,通过向 Netfilter 的挂载点上注册钩子函数来实现对数据包过滤的<br>语法结构：<code>iptables [-t 表名] 选项&amp;参数 [链名][匹配条件][-j 动作控制类型]</code><br><img src="/images/%E9%98%B2%E7%81%AB%E5%A2%992.png"></p>
<h3 id="2-2-firewalld-cmd"><a href="#2-2-firewalld-cmd" class="headerlink" title="2.2 firewalld-cmd"></a>2.2 firewalld-cmd</h3><p>配置更简洁，功能更具灵活性，新增区域概念，系统预设了几个区域，区域定义了数据包进出的信任程度，可同时活跃多个区域，但是多数情况下还是以单区域为主，根据需求也可以配置辅区域<br><strong>（1）默认拒绝所有请求访问，根据需求可自行添加放行服务与端口</strong><br><strong>（2）配置文件：</strong> <code>/etc/firewalld [默认配置]</code>   <code>/usr/lib/firewalld [预设配置 可选择]</code><br><strong>（3）配置方式：</strong> 命令行 <code>firewall-cmd</code>，图形化<code>firewall-config</code>，编辑配置文件xml文件<br><strong>（4）两种配置方式：</strong>【临时配置：<code>runtime</code>】【永久配置：<code>permanent</code>】<br><strong>（5）将临时配置转为永久配置：</strong> <code>firewall-cmd --runtime-to-permanent</code>，<code>firewall-cmd --... --per</code>，<code>firewall-cmd --reload</code><br><strong>（6）相关命令：</strong><br><img src="/images/%E9%98%B2%E7%81%AB%E5%A2%993.png"></p>
<p><strong>（7）区域</strong><br>    区域是一种逻辑上的网络区域划分，系统预设了几个常用区域，每个区域都有其自己的默认防火墙规则集，这些规则定义了允许通过或拒绝的网络流量类型，可以根据特定网络环境的安全需求，定制每个区域的防火墙规则。<br>    注意：可以同时活动多个区域，只是有主次之分，可以设置允许进入和禁止放行操作；请勿整个主域切换至drop&#x2F;block或者自定义的以拦截流入数据包为target的区域，此类型规则十分严格，几乎阻止所有流量进入，也包含本身ip<br>    <img src="/images/%E9%98%B2%E7%81%AB%E5%A2%994.png"><br><img src="/images/%E9%98%B2%E7%81%AB%E5%A2%995.png"></p>
<p><strong>（8）端口转发与 NAT 地址伪装</strong><br>    端口转发：将发往本机端口的流量数据包转发到本机或其他主机的特定端口上<br>    地址伪装：由于ipv4地址不够需求使用，内部网络中的多个设备使用地址伪装技术，使得内部网络设备共享同一个公共 IPv4 地址访问互联网，固在同一个内网，可以有多个内网IP，在出口路由器或防火墙上配置地址伪装规则，但是他们在访问外网时，会被映射为同一个公共 IPv4 地址，从而隐藏真实IP，形成一种“多设备共用一IP”的行为来解决IP不足的问题</p>
<p>A. 端口转发类型：</p>
<ol>
<li>本机端口转发</li>
<li>远端端口转发（需要开启地址伪装，否则请求报文与回应报文的地址不同，路径不一致，导致无法建立对话）</li>
<li>动态端口转发</li>
</ol>
<p>B. NAT地址转换类型：</p>
<ol>
<li>静态NAT：内部私有IP映射到一个公共IP地址</li>
<li>动态NAT：内部私有IP由一个NAT设备管理器管理的IP地址池中</li>
<li>PAT：属于一种“跨主机”+“端口转发”的行为，在进行地址转换时，不仅需要考虑IP地址，还需要考虑其端口，常在ipv4公网不足时使用。</li>
</ol>
<p>C. 为什么在“跨主机”+“端口转发”的情况下，需要开启masquerade选项进行IP伪装？<br>    当主机A通过访问主机B的某端口，而主机B的端口流量转发给了主机C，即主机A是通过主机B访问主机C的，那么就要开启地址伪装，否则在主机C接收到响应后开始发送回应报文，而接收地址依然是主机B的地址，但是主机A一直在等待主机B的回应，固对话建立失败，因为来访回应的地址不同。<br><img src="/images/%E9%98%B2%E7%81%AB%E5%A2%996.png"></p>
<p><strong>（9）富规则</strong><br>Firewalld中的富规则表示更细致、更详细的防火墙策略配置，它可以针对系统服务、端口号、源地址和目标地址等诸多信息进行更有针对性的策略配置。<br><img src="/images/%E9%98%B2%E7%81%AB%E5%A2%997.png"></p>
<p><strong>（10）http 与 firewalld</strong><br><img src="/images/%E9%98%B2%E7%81%AB%E5%A2%998.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
