<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker</title>
    <url>/2024/12/30/Docker/</url>
    <content><![CDATA[<h3 id="一、基础介绍"><a href="#一、基础介绍" class="headerlink" title="一、基础介绍"></a>一、基础介绍</h3><ul>
<li>镜像<br>docker镜像类似于一个安装包，类比mysql，内部可以有mysql安装依赖部署等，docker可以拉取镜像到本地虚拟机中，并忽略不同操作系统之间的差异，拉取后可以直接使用</li>
<li>容器<br>镜像拉取到本地后，会在本地开辟一个隔离空间来运行，称之为容器，一个镜像可以开辟多个不同的容器，且之间不会有干扰，实现多开效果，注意，一个容器是运行在虚拟机内部，完全隔离外界的，拥有自己的ip地址等，但是无法与外界进行通信，类似自己一个小主机，只能和宿主机实现通信效果</li>
</ul>
<h3 id="二、常见选项和操作"><a href="#二、常见选项和操作" class="headerlink" title="二、常见选项和操作"></a>二、常见选项和操作</h3><blockquote>
<p><strong>常见子选项</strong><br><code>-d</code> 容器在后台运行，不加-d会占用前台<br><code>-name</code> 为容器取名，唯一<br><code>-p [localhost-port]:[docker-port]</code> 设置端口映射，将宿主机的port和docker的内部port做一个端口映射，使其能和外界做通信，一个宿主机的端口只能分配给一个docker做映射，一个docker相当于一个宿主机的进程<br><code>-e [KEY]=[VALUE]</code> 设置环境变量，由镜像决定<br><code>[repository]:[tag]</code> 指定运行的镜像名称和镜像版本，默认最新版，一般加在docker命令尾端</p>
</blockquote>
<blockquote>
<p><strong>镜像相关操作</strong><br><code>docker pull</code> 拉取镜像地址到本地<br><code>docker images</code> 查看本地所有镜像<br><code>docker rmi</code> 删除镜像<br><code>docker file + docker build</code> 创建自定义镜像<br><code>docker save</code> 保存镜像<br><code>docker load</code> 下载镜像<br><code>docker push</code> 上传镜像到镜像仓库</p>
</blockquote>
<blockquote>
<p><strong>容器相关操作</strong><br><code>docker stop</code> 停止容器进程，容器还是存在<br><code>docker start</code> 开启容器进程<br><code>docker run</code> 创建并运行一个容器<br><code>docker ps</code> 查看容器进程<br><code>docker rm</code> 删除容器<br><code>docker logs</code> 查看容器日志<br><code>docker exec</code> 运行容器内部服务</p>
</blockquote>
<h3 id="三、配置服务示例"><a href="#三、配置服务示例" class="headerlink" title="三、配置服务示例"></a>三、配置服务示例</h3><h4 id="1-配置阿里云镜像"><a href="#1-配置阿里云镜像" class="headerlink" title="1. 配置阿里云镜像"></a>1. 配置阿里云镜像</h4><ol>
<li>安装docker依赖包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y yum-utils</span><br><span class="line">[root@localhost ~]# <span class="built_in">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">[root@localhost ~]# yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></li>
<li>查看安装是否成功<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker -v</span><br><span class="line">[root@localhost ~]# systemctl <span class="built_in">enable</span> --now docker</span><br><span class="line">[root@localhost ~]# docker images</span><br></pre></td></tr></table></figure></li>
<li>配置阿里云镜像服务器并重启<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /etc/docker</span><br><span class="line">[root@localhost docker]# vim /etc/docker/daemon.json</span><br><span class="line">&#123; &quot;registry-mirrors&quot;: [ &quot;https://2a6bf1988cb6428c877f723ec7530dbc.mirror.swr.myhuaweicloud.com&quot;, &quot;https://docker.m.daocloud.io&quot;, &quot;https://hub-mirror.c.163.com&quot;, &quot;https://mirror.baidubce.com&quot;, &quot;https://your_preferred_mirror&quot;, &quot;https://dockerhub.icu&quot;, &quot;https://docker.registry.cyou&quot;, &quot;https://docker-cf.registry.cyou&quot;, &quot;https://dockercf.jsdelivr.fyi&quot;, &quot;https://docker.jsdelivr.fyi&quot;, &quot;https://dockertest.jsdelivr.fyi&quot;, &quot;https://mirror.aliyuncs.com&quot;, &quot;https://dockerproxy.com&quot;, &quot;https://mirror.baidubce.com&quot;, &quot;https://docker.m.daocloud.io&quot;, &quot;https://docker.nju.edu.cn&quot;, &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot;, &quot;https://mirror.iscas.ac.cn&quot;, &quot;https://docker.rainbond.cc&quot; ] &#125;</span><br><span class="line">[root@localhost ~]# systemctl daemon-reload</span><br><span class="line">[root@localhost ~]# systemctl restart docker &amp;&amp; systemctl status docker</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-配置Nginx环境"><a href="#2-配置Nginx环境" class="headerlink" title="2. 配置Nginx环境"></a>2. 配置Nginx环境</h4><ol>
<li>拉取nginx镜像<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker pull nginx</span><br><span class="line">[root@localhost docker]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">nginx        latest    3b25b682ea82   3 weeks ago   192MB</span><br></pre></td></tr></table></figure></li>
<li>打包nginx镜像(-o output)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker save -o nginx.tar nginx:latest</span><br><span class="line">[root@localhost docker]# ll</span><br><span class="line">总用量 191248</span><br><span class="line">-rw-r--r-- 1 root root       799 10月 27 06:22 daemon.json</span><br><span class="line">-rw-r--r-- 1 root root        67 10月 27 05:32 daemon.json.bak</span><br><span class="line">-rw------- 1 root root 195826176 10月 27 06:27 nginx.tar</span><br></pre></td></tr></table></figure></li>
<li>删除nginx镜像包，使用tar包进行下载(-i input)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker rmi nginx:latest</span><br><span class="line">Untagged: nginx:latest</span><br><span class="line">[root@localhost docker]# docker load -i nginx.tar </span><br></pre></td></tr></table></figure></li>
<li>创建并执行一个名为nignx的容器，配置80端口映射，使用nginx镜像包<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker run -d --name nginx -p 80:80 nginx</span><br></pre></td></tr></table></figure></li>
<li>查看正在执行的docker容器进程和所有进程<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS                               NAMES</span><br><span class="line">5f8880ea2cff   nginx     &quot;/docker-entrypoint.…&quot;   8 seconds ago   Up 7 seconds   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx</span><br><span class="line">[root@localhost docker]# docker ps -a</span><br></pre></td></tr></table></figure></li>
<li>查看nginx容器的日志，-f占用前台追踪日志<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker logs nginx</span><br><span class="line">[root@localhost docker]# docker logs nginx -f</span><br></pre></td></tr></table></figure></li>
<li>进入容器内部，-it(interactive terminal)新开辟终端使用bash解释器<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker exec -it nginx bash</span><br><span class="line">root@5f8880ea2cff:/# ls</span><br><span class="line">bin  boot  dev	docker-entrypoint.d  docker-entrypoint.sh  etc	home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@5f8880ea2cff:/# exit</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-配置mysql环境"><a href="#3-配置mysql环境" class="headerlink" title="3. 配置mysql环境"></a>3. 配置mysql环境</h4><ol>
<li>拉取mysql运行镜像，创建并运行一个容器实例对象<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker pull mysql</span><br><span class="line">[root@localhost docker]# docker run -d --name mysql -p 3306:3306 \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-e TZ:Asia/Shanghai -e MYSQL_ROOT_PASSWORD=123 mysql</span> </span><br><span class="line">[root@localhost docker]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">mysql        latest    be960704dfac   12 days ago   602MB</span><br><span class="line">nginx        latest    3b25b682ea82   3 weeks ago   192MB</span><br></pre></td></tr></table></figure></li>
<li>进入容器内部<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker exec -it mysql bash</span><br><span class="line">bash-5.1# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show databases;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line">bash-5.1# ls</span><br><span class="line">bash-5.1# cat /etc/os-release</span><br><span class="line">PRETTY_NAME=&quot;Oracle Linux Server 9.4&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="四、-数据卷"><a href="#四、-数据卷" class="headerlink" title="四、 数据卷"></a>四、 数据卷</h3><p>已创建已运行的docker容器无法再挂载数据卷，只有在创建容器时边执行挂载数据卷操作，且容器会帮助我们自动创建数据卷，我们只需要执行挂载操作即可，挂载成功后docker服务会将目录自动映射到宿主机下，宿主机下的真实路径也会自动创建</p>
<blockquote>
<p><code>docker volume create</code> 创建数据卷<br><code>docker volume ls</code> 查看数据卷<br><code>docker volume inspect [volume-name]</code>  查看数据卷详细信息<br><code>docker volume rm</code> 删除数据卷<br><code>docker volume prune</code> 清除数据卷数据<br><img src="/images/%E6%95%B0%E6%8D%AE%E5%8D%B71.png"><br> <code>docker run -v [数据卷名称]:[docker内部地址] -d --name [容器名] -p[宿主机port]:[docker-port]</code></p>
</blockquote>
<ol>
<li>删除原有nginx容器<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~] docker rm -f nginx</span><br><span class="line">[root@localhost ~] docker ps    # 确保无nginx进程</span><br></pre></td></tr></table></figure></li>
<li>重新下载nginx容器，下载时创建数据卷<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~] docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3f2c8e43875ec9cb78f21b4ff0411af5902755b50ce48280a585738fb2de072b</span></span><br><span class="line">[root@localhost ~] docker volume ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DRIVER    VOLUME NAME</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     f11e855b8916d5eaf33f7492f3308b64114fbc57e9f795e072c7dcedd1c93520</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     html</span></span><br><span class="line">[root@localhost ~] docker volume inspect html</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2024-10-27T17:55:39+08:00&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Labels&quot;</span>: null,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,   <span class="comment"># 宿主机真实路径</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,    <span class="comment"># 逻辑卷卷名</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Options&quot;</span>: null,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">]</span></span><br><span class="line">[root@localhost ~] ls /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">50x.html  index.html    <span class="comment"># 文件与容器内部的配置文件相同</span></span></span><br><span class="line">[root@localhost _data] vim index.html</span><br><span class="line">[root@localhost _data] pwd &amp;&amp; cat index.html | grep h1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/var/lib/docker/volumes/html/_data</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;h1&gt;Welcome to China!&lt;/h1&gt;    <span class="comment"># 修改为China</span></span></span><br></pre></td></tr></table></figure></li>
<li>进入docker容器进行校验<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost _data] docker exec -it nginx bash</span><br><span class="line">root@3f2c8e43875e:/ cd /usr/share/nginx/html</span><br><span class="line">root@3f2c8e43875e:/usr/share/nginx/html cat index.html | grep h1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;h1&gt;Welcome to China!&lt;/h1&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/images/%E6%95%B0%E6%8D%AE%E5%8D%B72.png"></li>
</ol>
<h3 id="五、本地目录挂载"><a href="#五、本地目录挂载" class="headerlink" title="五、本地目录挂载"></a>五、本地目录挂载</h3><p>mysql容器会自动将容器内部的数据挂载到宿主机上，挂载后数据存储在宿主机，生成匿名卷，卷名称随机生成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------ 【自动挂载如下】</span></span><br><span class="line">[root@localhost _data] docker inspect mysql     # 以下就是容器自动挂载点结果</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;Mounts&quot;</span>: [</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Name&quot;</span>:    <span class="string">&quot;4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd&quot;</span>,    <span class="comment"># 容器名称</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd/_data&quot;</span>,     // 宿主机挂载地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,    // 容器存储地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">],</span></span><br><span class="line">[root@localhost _data] docker volume ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DRIVER    VOLUME NAME</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     f11e855b8916d5eaf33f7492f3308b64114fbc57e9f795e072c7dcedd1c93520</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     html</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------ 【手动挂载顺序】</span></span><br><span class="line">[root@localhost ~] mkdir /mysql/&#123;data,init,conf&#125; -p</span><br><span class="line">[root@localhost _data] docker run -d --name mysql \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-p 3306:3306 \</span></span><br><span class="line"><span class="language-bash">&gt; -e TZ=Asia/Shanghai \     <span class="comment"># [配置环境变量-时间地区]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-e MYSQL_ROOT_PASSWORD=cjnn10030406 \    <span class="comment"># [配置mysql中root的密码]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-v /root/mysql/data:/var/lib/mysql \    <span class="comment"># [挂载数据]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-v /root/mysql/init:/docker-entrypoint-initdb.d \    <span class="comment"># [挂载初始文件]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-v /root/mysql/conf:/etc/mysql/conf.d \    <span class="comment"># [挂载配置文件]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">mysql</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5c4e6bea23a990338b1c15e08708ae372ef47b21e7e3e71f2e56a91d8e7fc7ae</span></span><br><span class="line">[root@localhost ~] docker inspect mysql   # 挂载详情</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;Mounts&quot;</span>: [</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/root/mysql/data&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/root/mysql/init&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/docker-entrypoint-initdb.d&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/root/mysql/conf&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/etc/mysql/conf.d&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">],</span></span><br><span class="line">[root@localhost ~] du -sh mysql    # ls mysql 中可以查看data下已经成功挂载很多文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">213M    mysql</span></span><br><span class="line">[root@localhost ~] docker ps -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CONTAINER ID   IMAGE     COMMAND                   CREATED          STATUS          PORTS                                                  NAMES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5c4e6bea23a9   mysql     <span class="string">&quot;docker-entrypoint.s…&quot;</span>   15 minutes ago   Up 15 minutes   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3f2c8e43875e   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   3 hours ago      Up 3 hours      0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                      nginx</span></span><br></pre></td></tr></table></figure>


<h3 id="六、-删除镜像"><a href="#六、-删除镜像" class="headerlink" title="六、 删除镜像"></a>六、 删除镜像</h3><p><strong>删除镜像前，需要将所有镜像创建的容器进行删除，删除成功后最后在删除镜像</strong></p>
<p>显示无法删除，因为 mysql 镜像有容器正在运行中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker rmi mysql:latest</span><br><span class="line">Error response from daemon: conflict: unable to remove repository reference <span class="string">&quot;mysql:latest&quot;</span> (must force) - container 5c4e6bea23a9 is using its referenced image be960704dfac</span><br></pre></td></tr></table></figure>
<p>查看所有正在运行的容器进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED       STATUS                     PORTS                                                  NAMES</span><br><span class="line">817412dd0343   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>         6 weeks ago   Exited (255) 5 weeks ago   0.0.0.0:3355-&gt;8080/tcp, :::3355-&gt;8080/tcp              tomcat01</span><br><span class="line">5c4e6bea23a9   mysql     <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 weeks ago   Exited (255) 7 weeks ago   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span><br><span class="line">3f2c8e43875e   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   7 weeks ago   Exited (255) 7 weeks ago   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                      nginx</span><br></pre></td></tr></table></figure>
<p>停止 mysql 镜像运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker stop mysql</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure>
<p>删除 mysql 容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker <span class="built_in">rm</span> 5c4e6bea23a9</span><br><span class="line">5c4e6bea23a9</span><br></pre></td></tr></table></figure>
<p>再次查看容器进程，删除容器成功，删除容器进程成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED       STATUS                     PORTS                                       NAMES</span><br><span class="line">817412dd0343   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>         6 weeks ago   Exited (255) 5 weeks ago   0.0.0.0:3355-&gt;8080/tcp, :::3355-&gt;8080/tcp   tomcat01</span><br><span class="line">3f2c8e43875e   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   7 weeks ago   Exited (255) 7 weeks ago   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp           nginx</span><br></pre></td></tr></table></figure>
<p>删除镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker rmi mysql:latest</span><br></pre></td></tr></table></figure>



<h3 id="七、DockerFile"><a href="#七、DockerFile" class="headerlink" title="七、DockerFile"></a>七、DockerFile</h3><p>是一种定义镜像构建过程的脚本，包含了一系列的命令和指令，可以实现自动化构建 Docker 镜像<br>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS with JDK 8</span></span><br><span class="line"><span class="comment"># Author 2303010148</span></span><br><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="comment"># 指定作者</span></span><br><span class="line">MAINTAINER 2303010148</span><br><span class="line"><span class="comment"># 新建文件夹用于存放JDK文件</span></span><br><span class="line">RUN <span class="built_in">mkdir</span> /usr/local/java</span><br><span class="line"><span class="comment"># 将JDK文件复制到镜像内并解压</span></span><br><span class="line">ADD jdk-8u151-linux-x64.tar.gz /usr/local/java/</span><br><span class="line"><span class="comment"># 创建软链接</span></span><br><span class="line">RUN <span class="built_in">ln</span> -s /usr/local/java/jdk1.8.0_151 /usr/local/java/jdk</span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk</span><br><span class="line">ENV JDK_HOME <span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line">ENV CLASSPATH .:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line">ENV PATH <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>


<hr>
<p>不断学习ing，如果有错请指出(⸝⸝•‧̫•⸝⸝)</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP</title>
    <url>/2024/12/31/FTP/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>File Transport File，提供文件上传和下载服务</li>
<li>服务名：vsftpd</li>
<li>端口：21&#x2F;tcp</li>
<li>配置文件：<code>/etc/vsftpd/vsftpd.conf</code></li>
<li>配置文件常见字段：<br>（1）annoymous_enable &#x3D; YES&#x2F;NO，是否允许匿名用户登录<br>（2）IndexOptions Charset&#x3D;UTF-8，文件编码格式<br>（3）chroot_local_user &#x3D; YES, local_root &#x3D; &#x2F;share，访问根目录</li>
<li>安全上下文策略：<code>ftpd_full_access</code></li>
<li>防火墙名称：vsftpd</li>
</ul>
<hr>
<p>@ <a href="https://zybuluo.com/2303010148/note/2563425">基于 DNS + httpd + ftpd 服务的个人主页发布系统</a><br>@ <a href="https://zybuluo.com/mdeditor#2564002-full-reader">shell 脚本批量创建个人主页系统</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mail</title>
    <url>/2024/12/31/Mail/</url>
    <content><![CDATA[<p><img src="/images/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8.png"></p>
<ul>
<li>邮件传输代理<br>MTA-Mail Transport Agent，负责将邮件在服务器之间传输。常用协议：SMTP。常见代理商软件：postfix，sendmail，Exim</li>
<li>邮件用户代理<br>MUA-Mail User Agent，负责发送和接收邮件。常用协议：IMAP，POP3，POP3S。常见代理商软件：Dovecot，常见Web端：openwebmail，roundcubemail。</li>
<li>邮件投递代理<br>MDA-Mail Delivery Agent，负责将邮件存储到接收方的邮箱中。</li>
</ul>
<h4 id="一、Postfix-配置"><a href="#一、Postfix-配置" class="headerlink" title="一、Postfix 配置"></a>一、Postfix 配置</h4><p>安装 postfix 软件包，对主配置文件 <code>/et/postfix/main.cf</code> 文件进行配置，并重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> dnf install -y postfix</span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> vim /etc/postfix/main.cf</span><br><span class="line">myhostname = mail.titi.cn    <span class="comment"># 主机名</span></span><br><span class="line">mydomain = titi.cn           <span class="comment"># 域名</span></span><br><span class="line">myorigin = <span class="variable">$mydomain</span>                    <span class="comment"># 查看邮件发件人来源设置</span></span><br><span class="line">inet_interfaces = all                   <span class="comment"># 通过所有可用的网络接口来接收和发送邮件</span></span><br><span class="line">mydestination = <span class="variable">$myhostname</span>, <span class="variable">$mydomain</span>, localhost       <span class="comment"># 定义接收的邮件域名</span></span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now postfix</span><br></pre></td></tr></table></figure>
<p>防火墙放行 SMTP 服务的所有数据包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> firewall-cmd --add-service=smtp --per</span><br><span class="line">success</span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure>
<p>postconf 命令，查看 &#x2F;etc&#x2F;postfix&#x2F;main.cf 中的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost ~]$ postconf myhostname</span><br><span class="line">myhostname = mail.sziit2303010148.cn</span><br><span class="line">[titi@localhost ~]$ postconf mydomain</span><br><span class="line">mydomain = sziit2303010148.cn</span><br><span class="line">[titi@localhost ~]$ postconf myorigin</span><br><span class="line">myorigin = <span class="variable">$mydomain</span></span><br><span class="line">[titi@localhost ~]$ postconf inet_interfaces</span><br><span class="line">inet_interfaces = all</span><br><span class="line">[titi@localhost ~]$ postconf mydestination</span><br><span class="line">mydestination = <span class="variable">$myhostname</span>, <span class="variable">$mydomain</span>, localhost</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/postfix/main.cf | grep -v <span class="string">&#x27;^#&#x27;</span> | grep -v <span class="string">&#x27;^$&#x27;</span></span><br></pre></td></tr></table></figure>


<h4 id="二、Dovecot-配置"><a href="#二、Dovecot-配置" class="headerlink" title="二、Dovecot 配置"></a>二、Dovecot 配置</h4><p>安装服务，配置配置文件，开启允许协议通过，定义邮件存储格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> dnf install -y dovecot</span><br><span class="line"><span class="comment"># 主配置文件，开放接收协议</span></span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> vim /etc/dovecot/dovecot.conf</span><br><span class="line">[titi@localhost ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/dovecot/dovecot.conf | grep -v <span class="string">&#x27;^#&#x27;</span> | grep protocol</span><br><span class="line">protocols = imap pop3 lmtp submission      </span><br><span class="line"><span class="comment"># 子配置文件，定义邮件存储格式</span></span><br><span class="line">[titi@localhost ~]$ <span class="built_in">cd</span> /etc/dovecot/conf.d</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> vim 10-mail.conf</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> 10-mail.conf | grep -v <span class="string">&#x27;^#&#x27;</span> | grep mail_location</span><br><span class="line">   mail_location = mbox:~/mail:INBOX=/var/mail/%u   </span><br><span class="line"><span class="comment"># 开机自动启动</span></span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now dovecot</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> systemctl is-active dovecot</span><br><span class="line">active</span><br></pre></td></tr></table></figure>
<p>防火墙放行所需的 pop3s 协议</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> firewall-cmd --add-service=pop3s --per</span><br><span class="line">success</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> firewall-cmd --add-service=imaps --per</span><br><span class="line">success</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line">success</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> firewall-cmd --list-services</span><br><span class="line">cockpit dhcpv6-client dns mdns pop3s samba smtp ssh</span><br></pre></td></tr></table></figure>
<p>生产证书解决SSL加密问题<br>Dovecot 邮件服务器启用 SSL&#x2F;TLS 加密，10-ssl.conf 配置 SSL 相关信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> vim 10-ssl.conf</span><br><span class="line">ssl_cert = &lt;/etc/pki/dovecot/certs/dovecot.pem    <span class="comment"># SSL证书文件</span></span><br><span class="line">ssl_key = &lt;/etc/pki/dovecot/private/dovecot.pem   <span class="comment"># SSL私钥文件</span></span><br><span class="line"><span class="comment">#ssl_cipher_list = PROFILE=SYSTEM</span></span><br></pre></td></tr></table></figure>
<p>指向的SSL证书文件与私钥文件默认都为空</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/pki/dovecot/certs/dovecot.pem</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/pki/dovecot/private/dovecot.pem</span><br></pre></td></tr></table></figure>
<p>打开配置文件中的认证模块一</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SSL ciphers to use, the default is:</span></span><br><span class="line">ssl_cipher_list = ALL:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW@STRENGTH</span><br><span class="line"><span class="comment"># To disable non-EC DH, use:</span></span><br><span class="line"><span class="comment">#ssl_cipher_list = ALL:!DH:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW@STRENGTH</span></span><br><span class="line"><span class="comment">#ssl_cipher_list = PROFILE=SYSTEM</span></span><br></pre></td></tr></table></figure>
<p>配置文件中提及： Included doc&#x2F;mkcert.sh can be used to easily generate self-signed certificate，使用 mkcert.sh 脚本可以生成 SSL 密钥。<br>使用 rpm -ql 命令查找 dovecot 软件所有已安装的包，在搜索 mkcert.sh 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost conf.d]$ rpm -ql dovecot | grep mkcert.sh</span><br><span class="line">/usr/libexec/dovecot/mkcert.sh</span><br><span class="line">/usr/share/doc/dovecot/mkcert.sh</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">cat</span> /usr/share/doc/dovecot/mkcert.sh</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generates a self-signed certificate.</span></span><br><span class="line"><span class="comment"># Edit dovecot-openssl.cnf before running this.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">umask</span> 077   </span><br><span class="line">OPENSSL=<span class="variable">$&#123;OPENSSL-openssl&#125;</span>          </span><br><span class="line">SSLDIR=<span class="variable">$&#123;SSLDIR-/etc/pki/dovecot&#125;</span>    </span><br><span class="line">OPENSSLCONFIG=<span class="variable">$&#123;OPENSSLCONFIG-/etc/pki/dovecot/dovecot-openssl.cnf&#125;</span></span><br><span class="line"></span><br><span class="line">CERTDIR=<span class="variable">$SSLDIR</span>/certs</span><br><span class="line">KEYDIR=<span class="variable">$SSLDIR</span>/private</span><br><span class="line"></span><br><span class="line">CERTFILE=<span class="variable">$CERTDIR</span>/dovecot.pem</span><br><span class="line">KEYFILE=<span class="variable">$KEYDIR</span>/dovecot.pem</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$CERTDIR</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$SSLDIR</span>/certs directory doesn&#x27;t exist&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$KEYDIR</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$SSLDIR</span>/private directory doesn&#x27;t exist&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$CERTFILE</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$CERTFILE</span> already exists, won&#x27;t overwrite&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$KEYFILE</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$KEYFILE</span> already exists, won&#x27;t overwrite&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$OPENSSL</span> req -new -x509 -nodes -config <span class="variable">$OPENSSLCONFIG</span> -out <span class="variable">$CERTFILE</span> -keyout <span class="variable">$KEYFILE</span> -days 365 || <span class="built_in">exit</span> 2</span><br><span class="line"><span class="built_in">chown</span> root:root <span class="variable">$CERTFILE</span> <span class="variable">$KEYFILE</span></span><br><span class="line"><span class="built_in">chmod</span> 0600 <span class="variable">$CERTFILE</span> <span class="variable">$KEYFILE</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="variable">$OPENSSL</span> x509 -subject -fingerprint -noout -<span class="keyword">in</span> <span class="variable">$CERTFILE</span> || <span class="built_in">exit</span> 2</span><br></pre></td></tr></table></figure>
<p>执行文件，生成 SSL 密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> sh -x /usr/share/doc/dovecot/mkcert.sh</span><br><span class="line"><span class="comment"># + echo &#x27;/etc/pki/dovecot/certs/dovecot.pem already exists, won&#x27;\&#x27;&#x27;t overwrite&#x27;</span></span><br><span class="line"><span class="comment"># /etc/pki/dovecot/certs/dovecot.pem already exists, won&#x27;t overwrite</span></span><br><span class="line"><span class="comment"># + exit 1</span></span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> <span class="built_in">rm</span> /etc/pki/dovecot/certs/dovecot.pem</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> sh -x /usr/share/doc/dovecot/mkcert.sh</span><br><span class="line"><span class="comment"># + echo &#x27;/etc/pki/dovecot/private/dovecot.pem already exists, won&#x27;\&#x27;&#x27;t overwrite&#x27;</span></span><br><span class="line"><span class="comment"># /etc/pki/dovecot/private/dovecot.pem already exists, won&#x27;t overwrite</span></span><br><span class="line"><span class="comment"># + exit 1</span></span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> <span class="built_in">rm</span> /etc/pki/dovecot/private/dovecot.pem</span><br><span class="line">[titi@localhost conf.d]$ <span class="built_in">sudo</span> sh -x /usr/share/doc/dovecot/mkcert.sh</span><br><span class="line">+ <span class="built_in">umask</span> 077</span><br><span class="line">+ OPENSSL=openssl</span><br><span class="line">+ SSLDIR=/etc/pki/dovecot</span><br><span class="line">+ OPENSSLCONFIG=/etc/pki/dovecot/dovecot-openssl.cnf</span><br><span class="line">+ CERTDIR=/etc/pki/dovecot/certs</span><br><span class="line">+ KEYDIR=/etc/pki/dovecot/private</span><br><span class="line">+ CERTFILE=/etc/pki/dovecot/certs/dovecot.pem</span><br><span class="line">+ KEYFILE=/etc/pki/dovecot/private/dovecot.pem</span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> <span class="string">&#x27;!&#x27;</span> -d /etc/pki/dovecot/certs <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> <span class="string">&#x27;!&#x27;</span> -d /etc/pki/dovecot/private <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> -f /etc/pki/dovecot/certs/dovecot.pem <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> -f /etc/pki/dovecot/private/dovecot.pem <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ openssl req -new -x509 -nodes -config /etc/pki/dovecot/dovecot-openssl.cnf -out /etc/pki/dovecot/certs/dovecot.pem -keyout /etc/pki/dovecot/private/dovecot.pem -days 365</span><br><span class="line">Generating a RSA private key</span><br><span class="line">..............................++++</span><br><span class="line">...........................................................................................................................................................++++</span><br><span class="line">writing new private key to <span class="string">&#x27;/etc/pki/dovecot/private/dovecot.pem&#x27;</span></span><br><span class="line">-----</span><br><span class="line">+ <span class="built_in">chown</span> root:root /etc/pki/dovecot/certs/dovecot.pem /etc/pki/dovecot/private/dovecot.pem</span><br><span class="line">+ <span class="built_in">chmod</span> 0600 /etc/pki/dovecot/certs/dovecot.pem /etc/pki/dovecot/private/dovecot.pem</span><br><span class="line">+ <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">+ openssl x509 -subject -fingerprint -noout -<span class="keyword">in</span> /etc/pki/dovecot/certs/dovecot.pem</span><br><span class="line">subject=OU = IMAP server, CN = imap.example.com, emailAddress = postmaster@example.com</span><br><span class="line">SHA1 Fingerprint=38:33:D4:53:45:51:1D:C2:BB:31:4D:1A:C5:40:3E:E3:CC:98:47:3D</span><br></pre></td></tr></table></figure>


<h4 id="三、roundcube-软件客户端-web-部署"><a href="#三、roundcube-软件客户端-web-部署" class="headerlink" title="三、roundcube 软件客户端 web 部署"></a>三、roundcube 软件客户端 web 部署</h4><p>（1）从官网 <a href="https://roundcube.net/">https://roundcube.net/</a> 上下载客户端工具 complete 版本<br>（2）解压到 <code>/var/www/mail</code> 目录下，根据该工具的配置，编辑 <code>/etc/php.ini</code> 文件，编辑配置时区，<code>date.timezone = Asia/Shanghai</code><br>（3）修改 php-fpm 的配置文件后，重启 Htppd 服务使其生效<br>（4）为 roundcube 创建数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123 </span><br><span class="line">create database roundcubemail;</span><br><span class="line">show databases;</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure>
<p>（5）修改 <code>/var/www/mail/&#123;temp,logs&#125;</code> 文件权限，添加 <code>w</code> 写权限<br>（6）在浏览器输入：<code>http://mail.titi.cn/installer</code> 进行一步步配置（本虚拟机的 DNS 配置中，指定 mail.titi.cn 网址指向 &#x2F;var&#x2F;www&#x2F;mail 目录），not OK 问题需要修复，not available 问题可以忽略，若打不开网站，可以尝试重启 httpd 服务，mariadb 或 named 服务<br>（7）在 web 端的安装引导页面，第三页中，生成 <code>config.inc.php</code> 文件，复制到 <code>/var/www/mail/config/</code> 目录下，然后在第三页中点击 <code>initialize database</code> 初始化数据库，最后可以使用 <code>Test IMAP config</code> 进行邮件收发测试<br>（8）最终验证：打开 <code>http://mail.titi.cn</code> 可以登录账号，账号需要在虚拟机中进行创建，加入附加组 mail 组即可<br>（9）其他：本次测试基于 redhat9.2 发行版实施，</p>
<hr>
<p>@ <a href="https://zybuluo.com/2303010148/note/2566257">支持邮件客户端的邮件服务器</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SAMBA</title>
    <url>/2025/01/01/SAMBA/</url>
    <content><![CDATA[<h3 id="一、安装samba工具"><a href="#一、安装samba工具" class="headerlink" title="一、安装samba工具"></a>一、安装samba工具</h3><p>1. 确保虚拟机有连接光盘（光盘存放真正软件源，yum包起链接作用）<br>2. 挂载光盘： mount &#x2F;dev&#x2F;sr0 &#x2F;mnt<br>3. 切换目录： cd &#x2F;etc&#x2F;yum.repos.d<br>4. 检查内部是否正常：ls &#x2F;etc&#x2F;yum.repos.d    cat &#x2F;etc&#x2F;yum.repos.d&#x2F;cdrom.repo    yum repolist -v.<br>5. 开始下载： yum install samba -y<br>6. 下载完成： which smbpasswd（查找有无此命令，有即工具已下载）<br> rpm -qa | grep samba（查找有无samba工具）<br><img src="/images/samba.png"></p>
<h3 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h3><p>工具名：samba<br>命令名：smbpasswd<br>服务名：smb</p>
<h3 id="三、命令"><a href="#三、命令" class="headerlink" title="三、命令"></a>三、命令</h3><h4 id="3-1-smbpasswd"><a href="#3-1-smbpasswd" class="headerlink" title="3.1 smbpasswd"></a>3.1 smbpasswd</h4><p>将 linux 用户添加为 samba 用户：<code>smbpasswd -a username</code><br>显式添加samba用户：<code>echo -e &quot;123\n123&quot; | smbpasswd -a username</code><br>删除samba用户：<code>smbpasswd -x username</code></p>
<h4 id="3-2-smbclient"><a href="#3-2-smbclient" class="headerlink" title="3.2 smbclient"></a>3.2 smbclient</h4><p>查看该主机下有什么共享目录：<code>smbclient -L [ipAddress]</code><br>使用samba用户查看share目录：<code>smbclient //ipAddress/share -U [username]%[password] -L</code><br>连接到共享：<code>smbclient //ipAddress/share -U [username]%[password]</code><br>连接后操作：<code>smbclient //ipAddress/share -U [username]%[password] -c [command]</code><br>上传文件到共享：<code>smbclient //ipAddress/share -U [username]%[password] -c &quot;put localfile remotefile&quot;</code><br>从共享中下载文件：<code>smbclient //ipAddress/share -U [username]%[password] -c &quot;get remotefile localfile&quot;</code></p>
<h4 id="3-3-smbmount"><a href="#3-3-smbmount" class="headerlink" title="3.3 smbmount"></a>3.3 smbmount</h4><p>从 samba 挂载到本地：<code>smbmount //ipAddress/share /mnt -o username=?,password=?</code><br>使用 mount.cifs 挂载：<code>mount.cifs //ipAddress/share /mnt -o username=?,password=?</code></p>
<h4 id="3-4-others"><a href="#3-4-others" class="headerlink" title="3.4 others"></a>3.4 others</h4><p>验证配置文件是否出错：<code>testparm [configuration file]</code><br>查看 samba 用户列表：<code>pdbedit -L</code><br>查看登录状态：<code>smbstatus</code></p>
<h3 id="四、配置文件-etc-samba-smb-conf"><a href="#四、配置文件-etc-samba-smb-conf" class="headerlink" title="四、配置文件 &#x2F;etc&#x2F;samba&#x2F;smb.conf"></a>四、配置文件 &#x2F;etc&#x2F;samba&#x2F;smb.conf</h3><p><code>[]</code>&#x3D;共享文件名<br><code>comment</code>&#x3D;说明<br><code>path</code>&#x3D;实际共享路径<br><code>public</code>&#x3D;yes&#x2F;no，是否公开<br><code>write list</code>&#x3D;user&#x2F;@group，可写用户列表，组要加@符号<br><code>read list</code>&#x3D;user&#x2F;@group可读用户列表<br><code>valid user</code>&#x3D;user&#x2F;@group有效用户<br><code>writable</code>&#x3D;yes&#x2F;no，是否全部可写<br><code>host allow</code>&#x3D;ip，白名单<br><code>host deny</code>&#x3D;ip，黑名单</p>
<h3 id="五、Samba与Selinux"><a href="#五、Samba与Selinux" class="headerlink" title="五、Samba与Selinux"></a>五、Samba与Selinux</h3><p>Selinux安全策略：<code>samba_enable_home_dirs</code><br>Selinux安全上下文：<code>samba_share_t</code></p>
<h3 id="六、断开连接："><a href="#六、断开连接：" class="headerlink" title="六、断开连接："></a>六、断开连接：</h3><p>访问方式：在文件资源系统中，打开：<code>\\ipAddress</code>，跳转登录界面<br><code>net use * /del</code> 断开连接<br><code>smbstatus</code> 查看服务状态<br><code>samba -x</code> 删除特定用户连接</p>
<h3 id="七、特殊配置"><a href="#七、特殊配置" class="headerlink" title="七、特殊配置"></a>七、特殊配置</h3><p>若在 windows 中连接不了 samba，无法打开登录对话框，在主配置文件的全局配置中，手动指定 samba 相互通信的协议版本，指定 NT1 可以兼容 Windows XP 系统之后的所有系统，编辑后重启 samba 服务即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client min protocol = NT1</span><br><span class="line">server min protocol = NT1</span><br></pre></td></tr></table></figure>

<hr>
<p>其他：<br>@：&#x2F;etc&#x2F;samba&#x2F;smb.conf中writable&#x3D;yes与write list是相冲突的，writable开启属于全部人可读，而write list是部分用户可读，固writable会覆盖write list<br>@：useradd -M创建系统用户且不设置默认家目录，无法登录，windows下无法查看自己的家目录<br>@：mount -o guest 使用选项guest常常挂载共享文件<br>@：配置完配置文件后，可以使用testparm命令对&#x2F;etc&#x2F;samba&#x2F;smb.conf文件检查语法，按enter确认<br>@：用户认证文件：&#x2F;var&#x2F;lib&#x2F;samba&#x2F;private&#x2F;passdb.tdb，存放samba用户与linux用户的映射关系，passdb.tdb是一个数据库文件；<br>@：TDB（Trivial Database）是 Samba 中常用的数据库格式之一，用于存储用户凭据、共享信息、锁定信息等。</p>
<hr>
<p>@：<a href="https://zybuluo.com/2303010148/note/2564937">部门级samba服务器</a><br>@：<a href="https://zybuluo.com/2303010148/note/2565072">企业级samba服务器</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH</title>
    <url>/2025/01/01/SSH/</url>
    <content><![CDATA[<h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>SSH(Secure Shell)是一个网络安全协议，用于多操作系统间的远程登录与服务，相对与Telnet明文传输而言，SSH是<strong>对传输内容进行了压缩</strong>，后在<strong>加密传送</strong>，<strong>非明文传送</strong>，更加安全可靠，提高传输速度<br><img src="/images/ssh1.png"><br><img src="/images/ssh2.png"></p>
<h3 id="软件名："><a href="#软件名：" class="headerlink" title="软件名："></a>软件名：</h3><p>sshd</p>
<h3 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h3><p>服务端程序：<code>/usr/bin/sshd</code>，服务端配置文件：<code>/etc/ssh/sshd_config</code><br>客户端程序：<code>/usr/bin/ssh</code>， 客户端配置文件：<code>/etc/ssh/ssh_config</code></p>
<h3 id="etc-ssh-sshd-config-主要配置字段："><a href="#etc-ssh-sshd-config-主要配置字段：" class="headerlink" title="&#x2F;etc&#x2F;ssh&#x2F;sshd_config 主要配置字段："></a>&#x2F;etc&#x2F;ssh&#x2F;sshd_config 主要配置字段：</h3><p><code>PermitRootLogin no</code> 是否允许root登录<br><code>PasswordAuthentication yes</code> 是否允许密码登录<br><code>PubkeyAuthentication yes</code> 是否允许公钥登录<br><code>AllowUsers</code>，<code>AllowGroups</code> 白名单<br><code>DenyUsers</code>，<code>DenyGroups</code> 黑名单</p>
<h3 id="其他文件："><a href="#其他文件：" class="headerlink" title="其他文件："></a>其他文件：</h3><p>Client机私钥文件：<code>~/.ssh/id_rsa</code><br>Client机公钥文件：<code>~/.ssh/id_rsa.pub</code><br>Client机信任主机文件：<code>~/.ssh/known_hosts</code><br>Server机接收的公钥文件：<code>~/.ssh/authorized_keys</code></p>
<h3 id="相关命令："><a href="#相关命令：" class="headerlink" title="相关命令："></a>相关命令：</h3><p>生成密钥对：<code>ssh-keygen</code><br>发送公钥：<code>ssh-copy-id  username@ip_address 密码登录：</code>ssh username@IpAddress<code>， </code>ssh -l username IpAddress&#96;</p>
<h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><ul>
<li>client已经对server设置了ssh免密登录，如何再次使用密码登录？<br>禁止免密登录，即使用密码登录：<code>ssh -o PubkeyAuthentication=no user@IpAddress</code><br>选择登录方式为密码登录：<code>ssh -o PreferredAuthentications=password user@IpAddress</code></li>
<li>ssh远程执行命令<br><code>ssh user@IpAddress [command]</code></li>
<li>如何对ssh配置文件进行备份？<br>复制 <code>.bak</code> 备份文件在同一目录下：<code>cp /etc/ssh/sshd_config&#123;,.bak&#125;</code></li>
<li><code>~/.ssh</code> 目录文件权限必须为 700，除了自己，其他人没有任何权限，否则 ssh 服务器拒绝登录</li>
<li>服务器上的 <code>~/.ssh/authorized_keys</code> 权限必须为 600</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Selinux</title>
    <url>/2024/12/30/Selinux/</url>
    <content><![CDATA[<h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p>LINUX传统访问控制标准是DAC自主访问控制，这种情况下进程以一个UID或者一个SUID运行，拥有该角色的权限。而MAC强制访问控制中，策略和安全上下文决定了主体能够访问哪个对象。<br><img src="/images/selinux1.png"></p>
<h3 id="二、工作模式"><a href="#二、工作模式" class="headerlink" title="二、工作模式"></a>二、工作模式</h3><p><code>Enforcing</code>：强制模式，基于策略规则拒绝主体对目标的访问。<br><code>Permissive</code>：宽容模式，属于旁观者状态，不会拒绝访问，但是会把信息记录到日志中。<br><code>Disabled</code>：关闭禁用selinux。</p>
<h3 id="三、工作策略"><a href="#三、工作策略" class="headerlink" title="三、工作策略"></a>三、工作策略</h3><p><code>Targeted</code>：默认模式，对大部分网络服务进程进行管理<br><code>Minimum</code>：对选定的网络服务进行管理<br><code>Mls</code>：多级高级安全保护</p>
<h3 id="四、配置文件："><a href="#四、配置文件：" class="headerlink" title="四、配置文件："></a>四、配置文件：</h3><p>&#x2F;etc&#x2F;selinux&#x2F;config</p>
<h3 id="五、查询selinux状态"><a href="#五、查询selinux状态" class="headerlink" title="五、查询selinux状态"></a>五、查询selinux状态</h3><p><code>sestatus (-v)</code> -v显示详细内容<br><code>getenforce</code> </p>
<h3 id="六、设置selinux开关"><a href="#六、设置selinux开关" class="headerlink" title="六、设置selinux开关"></a>六、设置selinux开关</h3><ul>
<li>临时开关：setenforce 1&#x2F;0 （1表示开启0表示关闭）</li>
<li>永久修改：修改配置文件&#x2F;etc&#x2F;selinux&#x2F;config（重启系统生效）</li>
</ul>
<h3 id="七、安全上下文"><a href="#七、安全上下文" class="headerlink" title="七、安全上下文"></a>七、安全上下文</h3><p>Selinux为每个文件&#x2F;目录&#x2F;进程服务提供安全上下文信息，这些信息标签作为可否访问文件的依据</p>
<p><strong>1. 查看</strong><br>文件&#x2F;目录查看安全上下文：<code>ls -Z</code><br>进程服务查看安全上下文：<code>ps -auxZ</code><br>显示内容：<code>[user] [role] [type] [degree] [file-name]</code><br>（其中Z选项都是查看安全上下文的子选项）<br>selinux进程访问时，会四配与日标文件的安全上下文中的类型type字段，匹配成功进行访问，匹配失败根据工作模式进行相对应操作</p>
<p><strong>2. 临时性修改安全上下文信息chcon</strong><br>由于chcon是临时性操作，固常用于调试，重启后即失效<br>格式：<code>chcon [选项] [文件/目录]</code><br>常用选项：-R递归；-t指定类型；-u指定用户；-r指定角色<br>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归更改目录的selinux类型</span></span><br><span class="line"><span class="built_in">chcon</span> -R -t httpd_sys_content_t /var/www/html/</span><br><span class="line"><span class="comment"># 更改文件的selinux用户</span></span><br><span class="line"><span class="built_in">chcon</span> -u user /filename</span><br><span class="line"><span class="comment"># 恢复文件的默认selinux类型</span></span><br><span class="line"><span class="built_in">chcon</span> -l /var/www/html/index.html</span><br><span class="line"><span class="comment"># 查看文件的安全上下文</span></span><br><span class="line"><span class="built_in">chcon</span> -Z /var/www/html/index.html</span><br></pre></td></tr></table></figure>

<p><strong>3. 永久性&#x2F;修改默认安全上下文信息 semanage</strong><br>semanage是一个管理selinux的主命令，其中包含一些子命令，每个子命令都有自己的选项和功能<br>通过man semanage查看关于semanage的使用手册说明，也可以通过semanage –help和semanage -h查看使用 说明的简短信息<br>修改类型标签：<code>semanage fcontext [选项] [路径(/.*)? ]</code><br>常用选项：-a添加&#x2F;-m修改&#x2F;-d删除&#x2F;-l查看&#x2F;-t指定类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 持久修改目录及其子文件上下文类型</span></span><br><span class="line">semanage fcontext -a -t httpd_sys_content_t <span class="string">&#x27;/var/www/html(/.*)?&#x27;</span></span><br><span class="line"><span class="comment"># 查看所有文件的上下文规则</span></span><br><span class="line">semanage fcontext -l</span><br></pre></td></tr></table></figure>

<p><strong>4. restorecon恢复安全上下文</strong><br>格式：<code>restorecon [选项] [文件/目录]</code><br>常用选项：-R递归；-v显示细节<br>在临时修改后，使用restorecon重置删除上下文<br>在永久修改后，使用restorecon保存上下文配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用更改</span></span><br><span class="line">restorecon -R /var/www/html/</span><br></pre></td></tr></table></figure>

<p><strong>5. 复制与移动对文件安全上下文的继承效果</strong><br>复制文件，文件安全上下文信息被更改，继承了新的目录的安全上下文<br>移动文件，保留了原有的安全上下文信息</p>
<p><strong>6. 常用上下文</strong><br>WEB端用户家目录：<code>httpd_user_content_t</code><br>WEB端目录：<code>httpd_sys_content_t</code><br>WEB端可读目录：<code>httpd_sys_rw_content_t</code><br>SAMBA服务：<code>samba_share_t</code></p>
<h3 id="八、安全策略"><a href="#八、安全策略" class="headerlink" title="八、安全策略"></a>八、安全策略</h3><p>Selinux策略辅助于selinux上下文匹配，二者结合对于进程访问主体做管控</p>
<p><strong>1. 策略管理常用命令</strong><br>设置策略开关：<code>setsebool  (-P)  policy_name  on/off(1/0)</code> ，-P为永久设置，立即生效<br><img src="/images/SeBoolean.png" alt="图片"><br><strong>2. 常用策略</strong><br>允许 HTTPD 访问用户的主目录：<code>httpd_enable_homedirs</code><br>允许 Samba 共享用户的主目录：<code>samba_enable_home_dirs</code><br>允许 Samba 共享目录时具有读写权限：<code>samba_export_all_rw</code><br>允许 HTTPD进程访问由其他服务控制的文件：<code>httpd_unified</code><br>允许 NFS 共享所有文件系统并且只读：<code>nfs_export_all_ro</code><br>允许 HTTPD 进程进行网络连接：<code>httpd_can_network_connect</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动HTTPD服务访问网络</span></span><br><span class="line">semanage boolean -m --on httpd_can_network_connect</span><br><span class="line"><span class="comment"># 允许NFS共享只读所有文件系统</span></span><br><span class="line">setsebool -P nfs_export_all_ro on </span><br></pre></td></tr></table></figure>



<h3 id="九、端口"><a href="#九、端口" class="headerlink" title="九、端口"></a>九、端口</h3><p>查看所有端口：<code>semanage port -l</code><br>添加端口：<code>semanage port -a -t &lt;type&gt; -p &lt;protocol&gt; &lt;port_number&gt;</code><br>删除端口：<code>semanage port -d -t &lt;type&gt; -p &lt;protocol&gt; &lt;port_number&gt;</code><br>常用端口上下文：<code>http_port_t</code> <code>ssh_port_t</code><br>选项：<code>-a</code> 新增规则，<code>-t</code> 指定端口类型，<code>-p</code> 指定协议，最后添加端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为8080端口设置类型用于HTTP服务</span></span><br><span class="line">semanage port -a -t http_port_t -p tcp 8080</span><br><span class="line"><span class="comment"># 删除8080端口的selinux类型</span></span><br><span class="line">semanage port -d -t http_port_t -p tcp 8080</span><br><span class="line"><span class="comment"># 查看所有selinux端口规则</span></span><br><span class="line">semanage port -l</span><br></pre></td></tr></table></figure>

<h3 id="十、用户"><a href="#十、用户" class="headerlink" title="十、用户"></a>十、用户</h3><p><code>semanage login</code> 用于管理系统用户关联的 selinux 用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将系统用户titi映射到selinux用户user_u</span></span><br><span class="line">semanage login -a -s user_u titi</span><br><span class="line"><span class="comment"># 列出所有用户映射</span></span><br><span class="line">semanage login -l</span><br></pre></td></tr></table></figure>
<p><img src="/images/selinux2.png"></p>
<h3 id="十一、日志追踪"><a href="#十一、日志追踪" class="headerlink" title="十一、日志追踪"></a>十一、日志追踪</h3><p>selinux系统相关安全信息主要存放在<code>/var/log/audit/audit.log</code>下，有些分布在<code>/var/log/messages</code>公共目录下</p>
<p>由于观察selinux拦截的系统信息时，查看不方便，多使用<code>sealert</code>，<code>audit2why</code>和<code>audit2allow</code>工具进行自动分析，后存放至一个文件下，需要查看时执行命令进行更新分析。</p>
<p>格式：<br><code>sealert -a /var/log/audit/audit.log &gt; name.txt </code>（-a: analyse)<br><code>audit2why &lt; /var/log/audit/audit.log &gt; name.txt</code><br><code>audit2allow -a /var/log/audit/audit.log &gt; name.txt</code><br>下载工具包：yum install -y setroubleshoot* 和 yum install -y policycoreutils*</p>
<h3 id="十二、有关审计日志"><a href="#十二、有关审计日志" class="headerlink" title="十二、有关审计日志"></a>十二、有关审计日志</h3><p>若audit审计工具在运行，selinux的拒绝信息被写入&#x2F;var&#x2F;log&#x2F;audit&#x2F;audit.log中<br>服务名：<code>auditd</code>；查看状态：systemctl status auditd 或 auditctl -s</p>
<h3 id="十三、常见报错"><a href="#十三、常见报错" class="headerlink" title="十三、常见报错"></a>十三、常见报错</h3><p>NOT FOUND：文件路径找不到，路径错误<br>Forbidden：权限错误</p>
<h3 id="十四、访问出错排查"><a href="#十四、访问出错排查" class="headerlink" title="十四、访问出错排查"></a>十四、访问出错排查</h3><p>1，网络是否通常（内网和虚拟机，虚拟机内网ping外网）<br>2，DAC权限是否可以操作<br>3，防火墙firewalld是否关闭<br>4，Apache&#x2F;samba&#x2F;auditd是否开启（关乎是否能上网，是否能window与linux远程登陆，是否记录审计日志）<br>5，进程与文件是否属于同一个域<br>6，策略方案getsebool -a | grep<br>7，http 端口</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN</title>
    <url>/2024/12/31/VPN/</url>
    <content><![CDATA[<h2 id="一、-PPTP-协议"><a href="#一、-PPTP-协议" class="headerlink" title="一、 PPTP 协议"></a>一、 PPTP 协议</h2><p>点对点隧道协议，Point-to-Point Tunneling Protocol，是实现<a href="https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91" title="虚拟专用网">虚拟专用网</a>（VPN）的一种方式。<br>PPTP 使用<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" title="传输控制协议">传输控制协议</a>（TCP）建立控制通道以发送控制命令，并利用<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E8%B7%AF%E7%94%B1%E5%B0%81%E8%A3%85" title="通用路由封装">通用路由封装</a>（GRE）通道封装<a href="https://zh.wikipedia.org/wiki/%E7%82%B9%E5%AF%B9%E7%82%B9%E5%8D%8F%E8%AE%AE" title="点对点协议">点对点协议</a>（PPP）数据包以发送数据。</p>
<h2 id="二、-PPTP-服务"><a href="#二、-PPTP-服务" class="headerlink" title="二、 PPTP 服务"></a>二、 PPTP 服务</h2><h4 id="2-1-基础信息："><a href="#2-1-基础信息：" class="headerlink" title="2.1 基础信息："></a>2.1 基础信息：</h4><p>下载安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y ppp </span><br><span class="line">wget http://dl.fedoraproject.org/pub/archive/epel/7/x86_64/Packages/p/pptpd-1.4.0-2.el7.x86_64.rpm</span><br><span class="line">yum install -y pptpd-1.4.0-2.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p>端口：1723&#x2F;tcp</p>
<h4 id="2-2-防火墙"><a href="#2-2-防火墙" class="headerlink" title="2.2 防火墙"></a>2.2 防火墙</h4><p>–add-port&#x3D;1723&#x2F;tcp，–add-protocol&#x3D;gre，–add-service&#x3D;pptp，–zone&#x3D;trusted –add-interface&#x3D;ppp+（该命令的作用是将所有以 ppp 开头的接口，例如 ppp0、ppp1 等添加到 trusted 区域，- –add-interface 用来将一个特定的网络接口添加到指定的区域中。ppp+ 是一个接口的名称。这里的 ppp+ 是一个匹配模式，ppp 通常是点对点协议 PPP 接口的名称，常见于拨号连接、VPN、拨号调制解调器等）</p>
<h4 id="2-3-主配置文件：-etc-pptpd-conf"><a href="#2-3-主配置文件：-etc-pptpd-conf" class="headerlink" title="2.3 主配置文件：&#x2F;etc&#x2F;pptpd.conf"></a>2.3 主配置文件：&#x2F;etc&#x2F;pptpd.conf</h4><p>相关字段：<br>option 配置PPTP连接。选项文件包含了有关连接的各种配置设置，例如认证方式、加密方式、DNS服务器等<br>localip 指定了PPTP服务器在VPN连接中使用的本地IP地址<br>remoteip 指定了PPTP服务器用于分配给VPN客户端的IP地址范围</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">option /etc/ppp/options.pptpd</span><br><span class="line">localip &lt;PPTP服务器的IP地址&gt;</span><br><span class="line">remoteip &lt;分配给客户端的IP地址范围&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-4-用户配置文件：-etc-ppp-chap-secrets"><a href="#2-4-用户配置文件：-etc-ppp-chap-secrets" class="headerlink" title="2.4 用户配置文件：&#x2F;etc&#x2F;ppp&#x2F;chap-secrets"></a>2.4 用户配置文件：&#x2F;etc&#x2F;ppp&#x2F;chap-secrets</h4><p>添加用户名、服务器、密码和IP地址的条目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Secrets for authentication using CHAP</span></span><br><span class="line"><span class="comment"># client        server  secret                  IP addresses</span></span><br><span class="line">  user1         *       password1               *</span><br><span class="line">  user2         *       password2               *</span><br></pre></td></tr></table></figure>
<h4 id="2-5-开启linux的IP转发功能"><a href="#2-5-开启linux的IP转发功能" class="headerlink" title="2.5 开启linux的IP转发功能"></a>2.5 开启linux的IP转发功能</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">sysctl -p /proc/sys/net/ipv4/ip_forward	   <span class="comment"># 刷新配置生效</span></span><br></pre></td></tr></table></figure>
<h4 id="2-6-开启-PPTP-的穿透功能"><a href="#2-6-开启-PPTP-的穿透功能" class="headerlink" title="2.6 开启 PPTP 的穿透功能"></a>2.6 开启 PPTP 的穿透功能</h4><p>这个命令用于加载 ip_nat_pptp 内核模块，以支持PPTP的网络地址转换（NAT）。<br>PPTP协议本身需要特殊的NAT处理来正确地转发PPTP通信中的控制和数据流量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">modprobe ip_nat_pptp</span><br><span class="line">lsmod | grep pptp</span><br></pre></td></tr></table></figure>
<h4 id="2-7-添加-pptp-服务的-xml-文件"><a href="#2-7-添加-pptp-服务的-xml-文件" class="headerlink" title="2.7 添加 pptp 服务的 xml 文件"></a>2.7 添加 pptp 服务的 xml 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/firewalld/services</span><br><span class="line"><span class="built_in">cp</span> -p http.xml pptp.xml</span><br><span class="line">vim pptp.xml</span><br><span class="line">&lt;service&gt;</span><br><span class="line">	...</span><br><span class="line">	&lt;port protocol=<span class="string">&quot;tcp&quot;</span> port=<span class="string">&quot;1723&quot;</span> /&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>代理</title>
    <url>/2024/12/31/%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、Proxy-代理和-NAT-地址转换的区别"><a href="#一、Proxy-代理和-NAT-地址转换的区别" class="headerlink" title="一、Proxy 代理和 NAT 地址转换的区别"></a>一、Proxy 代理和 NAT 地址转换的区别</h2><p><strong>NAT：</strong> 将一个内网 IP 映射为一个公网 IP 才可访问公网，不存在缓存加速功能，适用于小型网络如家庭路由器<br><strong>Proxy：</strong> 相当于一个局域网的出入口，代理服务器拥有一个公网 IP，所有内网 IP 将数据包发送给代理服务器，代理服务器接收数据包后进行转发到公网中；代理服务器因为频繁接收多个请求，会将某些内网 IP 频繁访问的数据进行缓存，每一个生命周期 TTL 过后进行一次更新</p>
<h2 id="二、正向代理、透明代理与反向代理"><a href="#二、正向代理、透明代理与反向代理" class="headerlink" title="二、正向代理、透明代理与反向代理"></a>二、正向代理、透明代理与反向代理</h2><h4 id="2-1-正向代理："><a href="#2-1-正向代理：" class="headerlink" title="2.1 正向代理："></a>2.1 正向代理：</h4><p>正向代理服务器充当了客户端和服务端之间的中介，客户端无法直接发送数据到达服务端，在客户端需要设置代理服务器的 IP 和端口，使用正向代理服务器去发送数据，可以有效保护真实的客户端地址，向服务端隐藏了客户端地址。</p>
<ul>
<li>客户端向代理服务器发送请求。</li>
<li>代理服务器接收请求并代表客户端访问目标服务器。</li>
<li>代理服务器将目标服务器的响应转发给客户端。<br><img src="/images/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.png"></li>
</ul>
<h4 id="2-2-透明代理："><a href="#2-2-透明代理：" class="headerlink" title="2.2 透明代理："></a>2.2 透明代理：</h4><p>它在客户端和目标服务器之间充当中间人，但客户端不需要配置代理服务器。透明代理是“隐形”的，客户端并不知道代理的存在。无需客户端配置，透明代理不会隐藏客户端的真实 IP 地址，目标服务器仍然可以看到客户端的真实 IP。</p>
<ul>
<li>客户端直接向目标服务器发起请求。</li>
<li>网络中的透明代理会拦截这些请求，并在不改变客户端配置的情况下转发到目标服务器。</li>
<li>透明代理会接收目标服务器的响应并将其转发给客户端。</li>
</ul>
<h4 id="2-3-反向代理："><a href="#2-3-反向代理：" class="headerlink" title="2.3 反向代理："></a>2.3 反向代理：</h4><p>反向代理服务器对客户端隐藏了服务端的地址，防止了 DDOS 攻击。负载均衡：因为此服务器不止一个，反向代理服务器会将请求均匀的转发给它的服务器资源池中，防止当个服务器因为过多客户端请求而过载。</p>
<ul>
<li>客户端向反向代理服务器发送请求，通常是通过域名访问。</li>
<li>反向代理服务器接收到请求后，会根据负载均衡策略或其他规则，转发请求到实际的目标服务器（也称为后端服务器）。</li>
<li>后端服务器处理请求并返回响应。</li>
<li>反向代理服务器将后端服务器的响应返回给客户端，客户端通常不直接与后端服务器交互。<br><img src="/images/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png"></li>
</ul>
<h2 id="三、正向代理配置"><a href="#三、正向代理配置" class="headerlink" title="三、正向代理配置"></a>三、正向代理配置</h2><p>&lt;1&gt; 软件：squid<br>&lt;2&gt; 主配置文件：&#x2F;etc&#x2F;squid&#x2F;squid.conf<br>&lt;3&gt;设备：Kylin-V10SP3 一台（代理服务器），Win10 一台（内网测试机）</p>
<h4 id="3-1-网络配置"><a href="#3-1-网络配置" class="headerlink" title="3.1 网络配置"></a>3.1 网络配置</h4><p>在互联网中，一般内网使用仅主机模式，外网使用 NAT 模式。固为代理虚拟机添加两张网卡，外网使用 ens160 网卡，网络模式为 NAT；内网使用 ens224 网卡，网络模式为仅主机模式。测试机网卡使用仅主机模式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ nmcli c</span><br><span class="line">NAME  UUID                                  TYPE      DEVICE</span><br><span class="line">WAN   2965720b-3805-4059-8cc3-5698a3104bef  ethernet  ens160</span><br><span class="line">LAN   f6bdfcdf-5fae-4dea-86f4-53a52c458495  ethernet  ens224</span><br><span class="line">[sziit@2303010148 ~]$ nmcli dev</span><br><span class="line">DEVICE  TYPE      STATE   CONNECTION</span><br><span class="line">ens160  ethernet  已连接  WAN</span><br><span class="line">ens224  ethernet  已连接  LAN</span><br><span class="line">lo      loopback  未托管  --</span><br></pre></td></tr></table></figure>
<h4 id="3-2-代理服务端配置和测试端配置"><a href="#3-2-代理服务端配置和测试端配置" class="headerlink" title="3.2 代理服务端配置和测试端配置"></a>3.2 代理服务端配置和测试端配置</h4><p>（1）在 linux 代理服务器虚拟机上安装 squid 服务，设置开机自动启动，查看配置文件中服务的端口信息，防火墙放行该端口 3128&#x2F;tcp 与服务，允许数据包从 3128 端口流入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> dnf install -y squid</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now squid</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/squid/squid.conf | grep http_port</span><br><span class="line">http_port 3128</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> firewall-cmd --add-port=3128/tcp --per</span><br><span class="line">success</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> firewall-cmd --add-service=squid --per</span><br><span class="line">success</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure>
<p>（2）在 windows 虚拟机上，关闭防火墙，设置 IpAddress 为 <code>10.10.48.10/24</code>，子网掩码为 <code>255.255.255.0</code>，与 linux 虚拟机的仅主机网卡 <code>10.10.48.254/24</code> 在 <em>同一个网段内</em> ，确保两个仅主机网卡之间可以相互 ping 通发送数据包。<br>（3）在 windows 虚拟机上，在控制面板对网络代理进行配置（控制面板-&gt;配置代理服务器-&gt;连接-&gt;局域网设置-&gt;代理服务器-&gt;地址端口：<code>10.10.48.254 : 3128</code>），设置代理地址为 linux 虚拟机中的仅主机网卡地址。<br>（4）windows 上发送的虚拟机通过 <code>10.10.48.10/24</code> 地址发送给 linux 虚拟机上的 <code>10.10.48.254/24</code> 地址，存储到该地址上后，使用 <code>192.168.48.100/24</code> 发送给实体机的 <code>192.168.48.10/24</code> 的 NET8 网卡，此时数据包可以由实体机进行对外网发送与访问。<br>（5）在 windows 端访问百度网站，实际由 linux 虚拟机进行访问，记录日志信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">tail</span> -f /var/log/squid/access.log</span><br><span class="line">1733278706.206    218 10.10.48.10 TCP_TUNNEL/200 130089 CONNECT www.baidu.com:443 - HIER_DIRECT/157.148.69.80 -</span><br></pre></td></tr></table></figure>
<p>注意事项：<br>linux 的仅主机网卡，无需配置 DNS 与 gateway，因为仅主机网卡无法访问网络，只能在局域网内部通信使用<br>windows 仅主机网卡，不能配置 DNS 与 gateway，只能通过代理商进行输出访问</p>
<h4 id="3-3-实现访问控制"><a href="#3-3-实现访问控制" class="headerlink" title="3.3 实现访问控制"></a>3.3 实现访问控制</h4><p><strong>（1）使用时间配置</strong><br>在 <code>/etc/squid/squid.conf</code> 添加自定义访问控制列表，设置工作时间在早上九点到下午五点之间，不可访问网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span></span><br><span class="line">acl WorkTime <span class="keyword">time</span> 9:00-17:00</span><br><span class="line">http_access deny WorkTime</span><br></pre></td></tr></table></figure>
<p>重新加载 Squid 服务的配置文件，此时在当前时间 10:30 刚好为工作时间，在 windows 段则无法访问网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> systemctl reload squid</span><br></pre></td></tr></table></figure>
<p>如果修改当前时间为下午六点，则非工作时间，windows 端可正常访问网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">date</span> -s 18:00</span><br><span class="line">2024年 12月 04日 星期三 18:00:00 CST</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">date</span></span><br><span class="line">2024年 12月 04日 星期三 18:00:05 CST</span><br></pre></td></tr></table></figure>

<p><strong>（2）使用域名控制</strong><br>添加自定义访问控制列表，设置禁止访问的域名列表为 &#x2F;etc&#x2F;squid&#x2F;WebSiteBlock.list，若访问这个列表中的域名，即拒绝访问，设置禁止访问域名列表如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/squid/WebSiteBlock.list</span><br><span class="line">.jd.com</span><br><span class="line">.taobao.com</span><br><span class="line">.tmall.com</span><br></pre></td></tr></table></figure>
<p>添加 squid 配置，将时间配置关闭，否则发生拒绝冲突，时间配置关闭后观察由域名配置的变化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span></span><br><span class="line">acl WorkTime <span class="keyword">time</span> 9:00-17:00</span><br><span class="line">acl WebSiteBlock dstdomain <span class="string">&quot;/etc/squid/WebSiteBlock.list&quot;</span></span><br><span class="line"></span><br><span class="line">http_access deny WebSiteBlock</span><br><span class="line"><span class="comment"># http_access deny WorkTime</span></span><br></pre></td></tr></table></figure>
<p>重新加载服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> systemctl reload squid</span><br></pre></td></tr></table></figure>
<p>此时在 windows 端访问这些购物网站失败，访问普通网站类似百度等访问成功</p>
<p><strong>（3）使用 IP 黑名单控制</strong><br>使用 src 关键字定义黑名单列表为 &#x2F;etc&#x2F;squid&#x2F;IPBlock.list</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span></span><br><span class="line">acl WorkTime <span class="keyword">time</span> 9:00-17:00</span><br><span class="line">acl WebSiteBlock dstdomain <span class="string">&quot;/etc/squid/WebSiteBlock.list&quot;</span></span><br><span class="line">acl IPBlock src <span class="string">&quot;/etc/squid/IPBlock.list&quot;</span></span><br><span class="line">http_access deny IPBlock</span><br><span class="line">http_access deny WebSiteBlock WorkTime</span><br><span class="line"><span class="comment"># http_access deny WebSiteBlock</span></span><br><span class="line"><span class="comment"># http_access deny WorkTime</span></span><br></pre></td></tr></table></figure>
<p>黑名单列表如下，包含 Windows 端 IP 地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">cat</span> /etc/squid/IPBlock.list</span><br><span class="line">10.10.48.10</span><br></pre></td></tr></table></figure>
<p>此时在 Windows 端（10.10.48.10）中无法正常上网，Squid 代理商拒绝代理该 IP 地址的请求</p>
<p><strong>（4）联合控制</strong><br>实现：前台Ip在上班时间禁止访问购物网站，假设前台 IP 地址为：10.10.48.10，禁止访问的购物网站为：京东、淘宝、天猫，则实现相关配置如下，定义限制时间为早九晚五，定义限制域名为购物网站域名，定义限制的黑名单用户为前台IP，同时满足三者条件触发拒绝操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/squid/IPBlock.conf</span><br><span class="line">10.10.48.10</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/squid/WebSiteBlock.conf</span><br><span class="line">.jd.com</span><br><span class="line">.taobao.com</span><br><span class="line">.tmall.com</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span></span><br><span class="line">acl WorkTime <span class="keyword">time</span> 9:00-17:00</span><br><span class="line">acl WebSiteBlock dstdomain <span class="string">&quot;/etc/squid/WebSiteBlock.conf&quot;</span></span><br><span class="line">acl IPBlock src <span class="string">&quot;/etc/squid/IPBlock.conf&quot;</span></span><br><span class="line">http_access deny WorkTime WebSiteBlock IPBlock</span><br></pre></td></tr></table></figure>


<h4 id="3-4-squid-服务的日志统计"><a href="#3-4-squid-服务的日志统计" class="headerlink" title="3.4 squid 服务的日志统计"></a>3.4 squid 服务的日志统计</h4><p>在 Squid 服务的日志文件 &#x2F;var&#x2F;log&#x2F;squid&#x2F;access.log 中，每一行表示一次客户端请求</p>
<blockquote>
<p>[时间戳] [所处理的时间|ms] [客户端IP] [请求状态] [响应字节数] [HTTP方法和请求] [请求头] [缓存状态] [响应类型]</p>
</blockquote>
<p>使用 awk 过滤第四个字段：请求状态，使用 sort 进行分类，使用 uniq -c 计算每种状态码的数量，使用 sort -n 对状态码计数进行排序，后输出到 output.txt 文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sziit@2303010148 ~]$ <span class="built_in">sudo</span> awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span> /var/log/squid/access.log | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -n &gt; ~/output.txt                                                                                     </span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">ls</span></span><br><span class="line">app  Changelog.md  config  data  discuz.zip  grade.sh  index.php  kodbox.1.54.zip  list.txt  output.txt  plugins  static  _tmp  wordpress.tar.gz</span><br><span class="line">[sziit@2303010148 ~]$ <span class="built_in">cat</span> output.txt</span><br><span class="line">      1 TCP_MISS/301</span><br><span class="line">      1 TCP_MISS/503</span><br><span class="line">      2 TCP_REFRESH_MODIFIED/200</span><br><span class="line">      3 TCP_REFRESH_UNMODIFIED/200</span><br><span class="line">      4 TCP_MISS/304</span><br><span class="line">      9 TCP_MEM_HIT/200</span><br><span class="line">     28 TCP_MISS/302</span><br><span class="line">     57 TCP_MISS/200</span><br><span class="line">     59 TCP_DENIED/403</span><br><span class="line">    190 TCP_TUNNEL_ABORTED/200</span><br><span class="line">    340 TCP_TUNNEL/200</span><br></pre></td></tr></table></figure>


<h2 id="四、透明代理"><a href="#四、透明代理" class="headerlink" title="四、透明代理"></a>四、透明代理</h2><p>（1）安装软件包，设置软件为开机自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y squid</span><br><span class="line">systemctl <span class="built_in">enable</span> --now squid</span><br></pre></td></tr></table></figure>
<p>（2）编辑配置文件 &#x2F;etc&#x2F;squid&#x2F;squid.conf，编辑缓存目录大小，从 100 MB 改为 1000 MB<br>http_port 字段：监听的端口<br>cache_dir 字段：磁盘缓存设置，<code>ufs</code> 是缓存的存储类型，<code>/var/spool/squid</code> 是缓存目录的路径，<code>100</code> 是缓存目录的大小，单位MB，<code>16</code> 是指定存储子目录的数量，<code>256</code> 是每个子目录中的目录数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Squid normally listens to port 3128 </span></span><br><span class="line">http_port 3128 </span><br><span class="line"><span class="comment"># Uncomment and adjust the following to add a disk cache directory. </span></span><br><span class="line">cache_dir ufs /var/spool/squid 1000 16 256</span><br></pre></td></tr></table></figure>
<p>（3）编辑配置文件 &#x2F;etc&#x2F;squid&#x2F;squid.conf，添加控制访问<br>acl 字段：用于限制操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span></span><br><span class="line">acl BlockWeb dstdomain <span class="string">&quot;/etc/squid/BlockWeb.list&quot;</span></span><br><span class="line">http_access deny BlockWeb</span><br></pre></td></tr></table></figure>
<p>（4）开启 IP 转发</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward    </span><br></pre></td></tr></table></figure>
<p>（5）配置防火墙规则<br>在 internal 内网区域中，开放接收 squid 服务的数据包，将发送到本机的 80 端口数据包，转发至本机 squid 服务的 3128 端口，进行代理服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-service=squid --zone=internal --permanent</span><br><span class="line">firewall-cmd --add-forward-port=port=80:proto=tcp:toport=3128:toaddr=192.168.48.250 --per</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<p>（6）在测试机上验证<br>测试机的网关 gateway 指向该代理机，测试机的所有网络数据包发送到代理机的 80 端口进行端口转发，测试成功</p>
<hr>
<p>@ <a href="https://zybuluo.com/2303010148/note/2568518">Squid 正向代理服务器</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/12/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
