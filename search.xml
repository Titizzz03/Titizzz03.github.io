<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker</title>
    <url>/2024/12/30/Docker/</url>
    <content><![CDATA[<h3 id="一、基础介绍"><a href="#一、基础介绍" class="headerlink" title="一、基础介绍"></a>一、基础介绍</h3><ul>
<li>镜像<br>docker镜像类似于一个安装包，类比mysql，内部可以有mysql安装依赖部署等，docker可以拉取镜像到本地虚拟机中，并忽略不同操作系统之间的差异，拉取后可以直接使用</li>
<li>容器<br>镜像拉取到本地后，会在本地开辟一个隔离空间来运行，称之为容器，一个镜像可以开辟多个不同的容器，且之间不会有干扰，实现多开效果，注意，一个容器是运行在虚拟机内部，完全隔离外界的，拥有自己的ip地址等，但是无法与外界进行通信，类似自己一个小主机，只能和宿主机实现通信效果</li>
</ul>
<h3 id="二、常见选项和操作"><a href="#二、常见选项和操作" class="headerlink" title="二、常见选项和操作"></a>二、常见选项和操作</h3><blockquote>
<p><strong>常见子选项</strong><br><code>-d</code> 容器在后台运行，不加-d会占用前台<br><code>-name</code> 为容器取名，唯一<br><code>-p [localhost-port]:[docker-port]</code> 设置端口映射，将宿主机的port和docker的内部port做一个端口映射，使其能和外界做通信，一个宿主机的端口只能分配给一个docker做映射，一个docker相当于一个宿主机的进程<br><code>-e [KEY]=[VALUE]</code> 设置环境变量，由镜像决定<br><code>[repository]:[tag]</code> 指定运行的镜像名称和镜像版本，默认最新版，一般加在docker命令尾端</p>
</blockquote>
<blockquote>
<p><strong>镜像相关操作</strong><br><code>docker pull</code> 拉取镜像地址到本地<br><code>docker images</code> 查看本地所有镜像<br><code>docker rmi</code> 删除镜像<br><code>docker file + docker build</code> 创建自定义镜像<br><code>docker save</code> 保存镜像<br><code>docker load</code> 下载镜像<br><code>docker push</code> 上传镜像到镜像仓库</p>
</blockquote>
<blockquote>
<p><strong>容器相关操作</strong><br><code>docker stop</code> 停止容器进程，容器还是存在<br><code>docker start</code> 开启容器进程<br><code>docker run</code> 创建并运行一个容器<br><code>docker ps</code> 查看容器进程<br><code>docker rm</code> 删除容器<br><code>docker logs</code> 查看容器日志<br><code>docker exec</code> 运行容器内部服务</p>
</blockquote>
<h3 id="三、配置服务示例"><a href="#三、配置服务示例" class="headerlink" title="三、配置服务示例"></a>三、配置服务示例</h3><h4 id="1-配置阿里云镜像"><a href="#1-配置阿里云镜像" class="headerlink" title="1. 配置阿里云镜像"></a>1. 配置阿里云镜像</h4><ol>
<li>安装docker依赖包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y yum-utils</span><br><span class="line">[root@localhost ~]# <span class="built_in">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">[root@localhost ~]# yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></li>
<li>查看安装是否成功<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker -v</span><br><span class="line">[root@localhost ~]# systemctl <span class="built_in">enable</span> --now docker</span><br><span class="line">[root@localhost ~]# docker images</span><br></pre></td></tr></table></figure></li>
<li>配置阿里云镜像服务器并重启<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /etc/docker</span><br><span class="line">[root@localhost docker]# vim /etc/docker/daemon.json</span><br><span class="line">&#123; &quot;registry-mirrors&quot;: [ &quot;https://2a6bf1988cb6428c877f723ec7530dbc.mirror.swr.myhuaweicloud.com&quot;, &quot;https://docker.m.daocloud.io&quot;, &quot;https://hub-mirror.c.163.com&quot;, &quot;https://mirror.baidubce.com&quot;, &quot;https://your_preferred_mirror&quot;, &quot;https://dockerhub.icu&quot;, &quot;https://docker.registry.cyou&quot;, &quot;https://docker-cf.registry.cyou&quot;, &quot;https://dockercf.jsdelivr.fyi&quot;, &quot;https://docker.jsdelivr.fyi&quot;, &quot;https://dockertest.jsdelivr.fyi&quot;, &quot;https://mirror.aliyuncs.com&quot;, &quot;https://dockerproxy.com&quot;, &quot;https://mirror.baidubce.com&quot;, &quot;https://docker.m.daocloud.io&quot;, &quot;https://docker.nju.edu.cn&quot;, &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot;, &quot;https://mirror.iscas.ac.cn&quot;, &quot;https://docker.rainbond.cc&quot; ] &#125;</span><br><span class="line">[root@localhost ~]# systemctl daemon-reload</span><br><span class="line">[root@localhost ~]# systemctl restart docker &amp;&amp; systemctl status docker</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-配置Nginx环境"><a href="#2-配置Nginx环境" class="headerlink" title="2. 配置Nginx环境"></a>2. 配置Nginx环境</h4><ol>
<li>拉取nginx镜像<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker pull nginx</span><br><span class="line">[root@localhost docker]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">nginx        latest    3b25b682ea82   3 weeks ago   192MB</span><br></pre></td></tr></table></figure></li>
<li>打包nginx镜像(-o output)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker save -o nginx.tar nginx:latest</span><br><span class="line">[root@localhost docker]# ll</span><br><span class="line">总用量 191248</span><br><span class="line">-rw-r--r-- 1 root root       799 10月 27 06:22 daemon.json</span><br><span class="line">-rw-r--r-- 1 root root        67 10月 27 05:32 daemon.json.bak</span><br><span class="line">-rw------- 1 root root 195826176 10月 27 06:27 nginx.tar</span><br></pre></td></tr></table></figure></li>
<li>删除nginx镜像包，使用tar包进行下载(-i input)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker rmi nginx:latest</span><br><span class="line">Untagged: nginx:latest</span><br><span class="line">[root@localhost docker]# docker load -i nginx.tar </span><br></pre></td></tr></table></figure></li>
<li>创建并执行一个名为nignx的容器，配置80端口映射，使用nginx镜像包<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker run -d --name nginx -p 80:80 nginx</span><br></pre></td></tr></table></figure></li>
<li>查看正在执行的docker容器进程和所有进程<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS                               NAMES</span><br><span class="line">5f8880ea2cff   nginx     &quot;/docker-entrypoint.…&quot;   8 seconds ago   Up 7 seconds   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx</span><br><span class="line">[root@localhost docker]# docker ps -a</span><br></pre></td></tr></table></figure></li>
<li>查看nginx容器的日志，-f占用前台追踪日志<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker logs nginx</span><br><span class="line">[root@localhost docker]# docker logs nginx -f</span><br></pre></td></tr></table></figure></li>
<li>进入容器内部，-it(interactive terminal)新开辟终端使用bash解释器<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker exec -it nginx bash</span><br><span class="line">root@5f8880ea2cff:/# ls</span><br><span class="line">bin  boot  dev	docker-entrypoint.d  docker-entrypoint.sh  etc	home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@5f8880ea2cff:/# exit</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-配置mysql环境"><a href="#3-配置mysql环境" class="headerlink" title="3. 配置mysql环境"></a>3. 配置mysql环境</h4><ol>
<li>拉取mysql运行镜像，创建并运行一个容器实例对象<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker pull mysql</span><br><span class="line">[root@localhost docker]# docker run -d --name mysql -p 3306:3306 \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-e TZ:Asia/Shanghai -e MYSQL_ROOT_PASSWORD=123 mysql</span> </span><br><span class="line">[root@localhost docker]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">mysql        latest    be960704dfac   12 days ago   602MB</span><br><span class="line">nginx        latest    3b25b682ea82   3 weeks ago   192MB</span><br></pre></td></tr></table></figure></li>
<li>进入容器内部<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker exec -it mysql bash</span><br><span class="line">bash-5.1# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show databases;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line">bash-5.1# ls</span><br><span class="line">bash-5.1# cat /etc/os-release</span><br><span class="line">PRETTY_NAME=&quot;Oracle Linux Server 9.4&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="四、-数据卷"><a href="#四、-数据卷" class="headerlink" title="四、 数据卷"></a>四、 数据卷</h3><p>已创建已运行的docker容器无法再挂载数据卷，只有在创建容器时边执行挂载数据卷操作，且容器会帮助我们自动创建数据卷，我们只需要执行挂载操作即可，挂载成功后docker服务会将目录自动映射到宿主机下，宿主机下的真实路径也会自动创建</p>
<blockquote>
<p><code>docker volume create</code> 创建数据卷<br><code>docker volume ls</code> 查看数据卷<br><code>docker volume inspect [volume-name]</code>  查看数据卷详细信息<br><code>docker volume rm</code> 删除数据卷<br><code>docker volume prune</code> 清除数据卷数据<br><img src="/Docker_files/1.jpg"><br> <code>docker run -v [数据卷名称]:[docker内部地址] -d --name [容器名] -p[宿主机port]:[docker-port]</code></p>
</blockquote>
<ol>
<li>删除原有nginx容器<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~] docker rm -f nginx</span><br><span class="line">[root@localhost ~] docker ps    # 确保无nginx进程</span><br></pre></td></tr></table></figure></li>
<li>重新下载nginx容器，下载时创建数据卷<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~] docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3f2c8e43875ec9cb78f21b4ff0411af5902755b50ce48280a585738fb2de072b</span></span><br><span class="line">[root@localhost ~] docker volume ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DRIVER    VOLUME NAME</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     f11e855b8916d5eaf33f7492f3308b64114fbc57e9f795e072c7dcedd1c93520</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     html</span></span><br><span class="line">[root@localhost ~] docker volume inspect html</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2024-10-27T17:55:39+08:00&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Labels&quot;</span>: null,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,   <span class="comment"># 宿主机真实路径</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,    <span class="comment"># 逻辑卷卷名</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Options&quot;</span>: null,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">]</span></span><br><span class="line">[root@localhost ~] ls /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">50x.html  index.html    <span class="comment"># 文件与容器内部的配置文件相同</span></span></span><br><span class="line">[root@localhost _data] vim index.html</span><br><span class="line">[root@localhost _data] pwd &amp;&amp; cat index.html | grep h1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/var/lib/docker/volumes/html/_data</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;h1&gt;Welcome to China!&lt;/h1&gt;    <span class="comment"># 修改为China</span></span></span><br></pre></td></tr></table></figure></li>
<li>进入docker容器进行校验<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost _data] docker exec -it nginx bash</span><br><span class="line">root@3f2c8e43875e:/ cd /usr/share/nginx/html</span><br><span class="line">root@3f2c8e43875e:/usr/share/nginx/html cat index.html | grep h1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;h1&gt;Welcome to China!&lt;/h1&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/Docker_files/2.jpg"></li>
</ol>
<h3 id="五、本地目录挂载"><a href="#五、本地目录挂载" class="headerlink" title="五、本地目录挂载"></a>五、本地目录挂载</h3><p>mysql容器会自动将容器内部的数据挂载到宿主机上，挂载后数据存储在宿主机，生成匿名卷，卷名称随机生成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------ 【自动挂载如下】</span></span><br><span class="line">[root@localhost _data] docker inspect mysql     # 以下就是容器自动挂载点结果</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;Mounts&quot;</span>: [</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Name&quot;</span>:    <span class="string">&quot;4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd&quot;</span>,    <span class="comment"># 容器名称</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd/_data&quot;</span>,     // 宿主机挂载地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,    // 容器存储地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">],</span></span><br><span class="line">[root@localhost _data] docker volume ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DRIVER    VOLUME NAME</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     4fc7e1072ae128b6873bfc940247b0b39d46b64d8bca6d7169d544808d0075dd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     f11e855b8916d5eaf33f7492f3308b64114fbc57e9f795e072c7dcedd1c93520</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span>     html</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------ 【手动挂载顺序】</span></span><br><span class="line">[root@localhost ~] mkdir /mysql/&#123;data,init,conf&#125; -p</span><br><span class="line">[root@localhost _data] docker run -d --name mysql \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-p 3306:3306 \</span></span><br><span class="line"><span class="language-bash">&gt; -e TZ=Asia/Shanghai \     <span class="comment"># [配置环境变量-时间地区]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-e MYSQL_ROOT_PASSWORD=cjnn10030406 \    <span class="comment"># [配置mysql中root的密码]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-v /root/mysql/data:/var/lib/mysql \    <span class="comment"># [挂载数据]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-v /root/mysql/init:/docker-entrypoint-initdb.d \    <span class="comment"># [挂载初始文件]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-v /root/mysql/conf:/etc/mysql/conf.d \    <span class="comment"># [挂载配置文件]</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">mysql</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5c4e6bea23a990338b1c15e08708ae372ef47b21e7e3e71f2e56a91d8e7fc7ae</span></span><br><span class="line">[root@localhost ~] docker inspect mysql   # 挂载详情</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;Mounts&quot;</span>: [</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/root/mysql/data&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/root/mysql/init&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/docker-entrypoint-initdb.d&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/root/mysql/conf&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/etc/mysql/conf.d&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">],</span></span><br><span class="line">[root@localhost ~] du -sh mysql    # ls mysql 中可以查看data下已经成功挂载很多文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">213M    mysql</span></span><br><span class="line">[root@localhost ~] docker ps -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CONTAINER ID   IMAGE     COMMAND                   CREATED          STATUS          PORTS                                                  NAMES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5c4e6bea23a9   mysql     <span class="string">&quot;docker-entrypoint.s…&quot;</span>   15 minutes ago   Up 15 minutes   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3f2c8e43875e   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   3 hours ago      Up 3 hours      0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                      nginx</span></span><br></pre></td></tr></table></figure>


<h3 id="六、-删除镜像"><a href="#六、-删除镜像" class="headerlink" title="六、 删除镜像"></a>六、 删除镜像</h3><p><strong>删除镜像前，需要将所有镜像创建的容器进行删除，删除成功后最后在删除镜像</strong></p>
<p>显示无法删除，因为 mysql 镜像有容器正在运行中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker rmi mysql:latest</span><br><span class="line">Error response from daemon: conflict: unable to remove repository reference <span class="string">&quot;mysql:latest&quot;</span> (must force) - container 5c4e6bea23a9 is using its referenced image be960704dfac</span><br></pre></td></tr></table></figure>
<p>查看所有正在运行的容器进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED       STATUS                     PORTS                                                  NAMES</span><br><span class="line">817412dd0343   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>         6 weeks ago   Exited (255) 5 weeks ago   0.0.0.0:3355-&gt;8080/tcp, :::3355-&gt;8080/tcp              tomcat01</span><br><span class="line">5c4e6bea23a9   mysql     <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 weeks ago   Exited (255) 7 weeks ago   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span><br><span class="line">3f2c8e43875e   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   7 weeks ago   Exited (255) 7 weeks ago   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                      nginx</span><br></pre></td></tr></table></figure>
<p>停止 mysql 镜像运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker stop mysql</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure>
<p>删除 mysql 容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker <span class="built_in">rm</span> 5c4e6bea23a9</span><br><span class="line">5c4e6bea23a9</span><br></pre></td></tr></table></figure>
<p>再次查看容器进程，删除容器成功，删除容器进程成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED       STATUS                     PORTS                                       NAMES</span><br><span class="line">817412dd0343   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>         6 weeks ago   Exited (255) 5 weeks ago   0.0.0.0:3355-&gt;8080/tcp, :::3355-&gt;8080/tcp   tomcat01</span><br><span class="line">3f2c8e43875e   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   7 weeks ago   Exited (255) 7 weeks ago   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp           nginx</span><br></pre></td></tr></table></figure>
<p>删除镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker-2303010148 ~]# docker rmi mysql:latest</span><br></pre></td></tr></table></figure>



<h3 id="七、DockerFile"><a href="#七、DockerFile" class="headerlink" title="七、DockerFile"></a>七、DockerFile</h3><p>是一种定义镜像构建过程的脚本，包含了一系列的命令和指令，可以实现自动化构建 Docker 镜像<br>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS with JDK 8</span></span><br><span class="line"><span class="comment"># Author 2303010148</span></span><br><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="comment"># 指定作者</span></span><br><span class="line">MAINTAINER 2303010148</span><br><span class="line"><span class="comment"># 新建文件夹用于存放JDK文件</span></span><br><span class="line">RUN <span class="built_in">mkdir</span> /usr/local/java</span><br><span class="line"><span class="comment"># 将JDK文件复制到镜像内并解压</span></span><br><span class="line">ADD jdk-8u151-linux-x64.tar.gz /usr/local/java/</span><br><span class="line"><span class="comment"># 创建软链接</span></span><br><span class="line">RUN <span class="built_in">ln</span> -s /usr/local/java/jdk1.8.0_151 /usr/local/java/jdk</span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk</span><br><span class="line">ENV JDK_HOME <span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line">ENV CLASSPATH .:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line">ENV PATH <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>


<hr>
<p>不断学习ing，如果有错请指出(⸝⸝•‧̫•⸝⸝)</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/12/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
